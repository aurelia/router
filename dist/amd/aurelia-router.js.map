{"version":3,"file":"aurelia-router.js","sources":["../../src/navigation-instruction.ts","../../src/nav-model.ts","../../src/util.ts","../../src/router-configuration.ts","../../src/router.ts","../../src/next.ts","../../src/pipeline.ts","../../src/navigation-commands.ts","../../src/navigation-plan.ts","../../src/step-build-navigation-plan.ts","../../src/utilities-route-loading.ts","../../src/route-loader.ts","../../src/step-load-route.ts","../../src/step-commit-changes.ts","../../src/activation-strategy.ts","../../src/utilities-activation.ts","../../src/step-activation.ts","../../src/pipeline-provider.ts","../../src/app-router.ts","../../src/pipeline-status.ts","../../src/router-event.ts","../../src/pipeline-slot-name.ts"],"sourcesContent":["import { ViewPortInstruction, RouteConfig, ViewPort, LifecycleArguments, ViewPortComponent } from './interfaces';\nimport { Router } from './router';\nimport { ActivationStrategyType, InternalActivationStrategy } from './activation-strategy';\n\n/**\n * Initialization options for a navigation instruction\n */\nexport interface NavigationInstructionInit {\n  fragment: string;\n  queryString?: string;\n  params?: Record<string, any>;\n  queryParams?: Record<string, any>;\n  config: RouteConfig;\n  parentInstruction?: NavigationInstruction;\n  previousInstruction?: NavigationInstruction;\n  router: Router;\n  options?: Object;\n  plan?: Record<string, /*ViewPortInstruction*/any>;\n}\n\nexport interface ViewPortInstructionInit {\n  name: string;\n  strategy: ActivationStrategyType;\n  moduleId: string;\n  component: ViewPortComponent;\n}\n\n/**\n * Class used to represent an instruction during a navigation.\n */\nexport class NavigationInstruction {\n  /**\n   * The URL fragment.\n   */\n  fragment: string;\n\n  /**\n   * The query string.\n   */\n  queryString: string;\n\n  /**\n   * Parameters extracted from the route pattern.\n   */\n  params: any;\n\n  /**\n   * Parameters extracted from the query string.\n   */\n  queryParams: any;\n\n  /**\n   * The route config for the route matching this instruction.\n   */\n  config: RouteConfig;\n\n  /**\n   * The parent instruction, if this instruction was created by a child router.\n   */\n  parentInstruction: NavigationInstruction;\n\n  parentCatchHandler: any;\n\n  /**\n   * The instruction being replaced by this instruction in the current router.\n   */\n  previousInstruction: NavigationInstruction;\n\n  /**\n   * viewPort instructions to used activation.\n   */\n  viewPortInstructions: Record<string, /*ViewPortInstruction*/any>;\n\n  /**\n   * The router instance.\n   */\n  router: Router;\n\n  /**\n   * Current built viewport plan of this nav instruction\n   */\n  plan: Record<string, /*ViewPortPlan*/any> = null;\n\n  options: Record<string, any> = {};\n\n  /**@internal */\n  lifecycleArgs: LifecycleArguments;\n  /**@internal */\n  resolve?: (val?: any) => void;\n\n  constructor(init: NavigationInstructionInit) {\n    Object.assign(this, init);\n\n    this.params = this.params || {};\n    this.viewPortInstructions = {};\n\n    let ancestorParams = [];\n    let current: NavigationInstruction = this;\n    do {\n      let currentParams = Object.assign({}, current.params);\n      if (current.config && current.config.hasChildRouter) {\n        // remove the param for the injected child route segment\n        delete currentParams[current.getWildCardName()];\n      }\n\n      ancestorParams.unshift(currentParams);\n      current = current.parentInstruction;\n    } while (current);\n\n    let allParams = Object.assign({}, this.queryParams, ...ancestorParams);\n    this.lifecycleArgs = [allParams, this.config, this];\n  }\n\n  /**\n   * Gets an array containing this instruction and all child instructions for the current navigation.\n   */\n  getAllInstructions(): Array<NavigationInstruction> {\n    let instructions: NavigationInstruction[] = [this];\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\n\n    for (let key in viewPortInstructions) {\n      let childInstruction = viewPortInstructions[key].childNavigationInstruction;\n      if (childInstruction) {\n        instructions.push(...childInstruction.getAllInstructions());\n      }\n    }\n\n    return instructions;\n  }\n\n  /**\n   * Gets an array containing the instruction and all child instructions for the previous navigation.\n   * Previous instructions are no longer available after navigation completes.\n   */\n  getAllPreviousInstructions(): Array<NavigationInstruction> {\n    return this.getAllInstructions().map(c => c.previousInstruction).filter(c => c);\n  }\n\n  /**\n   * Adds a viewPort instruction. Returns the newly created instruction based on parameters\n   */\n  addViewPortInstruction(initOptions: ViewPortInstructionInit): /*ViewPortInstruction*/ any;\n  addViewPortInstruction(viewPortName: string, strategy: ActivationStrategyType, moduleId: string, component: any): /*ViewPortInstruction*/ any;\n  addViewPortInstruction(\n    nameOrInitOptions: string | ViewPortInstructionInit,\n    strategy?: ActivationStrategyType,\n    moduleId?: string,\n    component?: any\n  ): /*ViewPortInstruction*/ any {\n\n    let viewPortInstruction: ViewPortInstruction;\n    let viewPortName = typeof nameOrInitOptions === 'string' ? nameOrInitOptions : nameOrInitOptions.name;\n    const lifecycleArgs = this.lifecycleArgs;\n    const config: RouteConfig = Object.assign({}, lifecycleArgs[1], { currentViewPort: viewPortName });\n\n    if (typeof nameOrInitOptions === 'string') {\n      viewPortInstruction = {\n        name: nameOrInitOptions,\n        strategy: strategy,\n        moduleId: moduleId,\n        component: component,\n        childRouter: component.childRouter,\n        lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]] as LifecycleArguments\n      };\n    } else {\n      viewPortInstruction = {\n        name: viewPortName,\n        strategy: nameOrInitOptions.strategy,\n        component: nameOrInitOptions.component,\n        moduleId: nameOrInitOptions.moduleId,\n        childRouter: nameOrInitOptions.component.childRouter,\n        lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]] as LifecycleArguments\n      };\n    }\n\n    return this.viewPortInstructions[viewPortName] = viewPortInstruction;\n  }\n\n  /**\n   * Gets the name of the route pattern's wildcard parameter, if applicable.\n   */\n  getWildCardName(): string {\n    // todo: potential issue, or at least unsafe typings\n    let configRoute = this.config.route as string;\n    let wildcardIndex = configRoute.lastIndexOf('*');\n    return configRoute.substr(wildcardIndex + 1);\n  }\n\n  /**\n   * Gets the path and query string created by filling the route\n   * pattern's wildcard parameter with the matching param.\n   */\n  getWildcardPath(): string {\n    let wildcardName = this.getWildCardName();\n    let path = this.params[wildcardName] || '';\n    let queryString = this.queryString;\n\n    if (queryString) {\n      path += '?' + queryString;\n    }\n\n    return path;\n  }\n\n  /**\n   * Gets the instruction's base URL, accounting for wildcard route parameters.\n   */\n  getBaseUrl(): string {\n    let $encodeURI = encodeURI;\n    let fragment = decodeURI(this.fragment);\n\n    if (fragment === '') {\n      let nonEmptyRoute = this.router.routes.find(route => {\n        return route.name === this.config.name &&\n          route.route !== '';\n      });\n      if (nonEmptyRoute) {\n        fragment = nonEmptyRoute.route as any;\n      }\n    }\n\n    if (!this.params) {\n      return $encodeURI(fragment);\n    }\n\n    let wildcardName = this.getWildCardName();\n    let path = this.params[wildcardName] || '';\n\n    if (!path) {\n      return $encodeURI(fragment);\n    }\n\n    return $encodeURI(fragment.substr(0, fragment.lastIndexOf(path)));\n  }\n\n  /**\n   * Finalize a viewport instruction\n   * @internal\n   */\n  _commitChanges(waitToSwap: boolean): Promise<void> {\n    let router = this.router;\n    router.currentInstruction = this;\n\n    const previousInstruction = this.previousInstruction;\n    if (previousInstruction) {\n      previousInstruction.config.navModel.isActive = false;\n    }\n\n    this.config.navModel.isActive = true;\n\n    router.refreshNavigation();\n\n    let loads: Promise<void>[] = [];\n    let delaySwaps: ISwapPlan[] = [];\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\n\n    for (let viewPortName in viewPortInstructions) {\n      let viewPortInstruction = viewPortInstructions[viewPortName];\n      let viewPort = router.viewPorts[viewPortName];\n\n      if (!viewPort) {\n        throw new Error(`There was no router-view found in the view for ${viewPortInstruction.moduleId}.`);\n      }\n\n      let childNavInstruction = viewPortInstruction.childNavigationInstruction;\n      if (viewPortInstruction.strategy === InternalActivationStrategy.Replace) {\n        if (childNavInstruction && childNavInstruction.parentCatchHandler) {\n          loads.push(childNavInstruction._commitChanges(waitToSwap));\n        } else {\n          if (waitToSwap) {\n            delaySwaps.push({ viewPort, viewPortInstruction });\n          }\n          loads.push(\n            viewPort\n              .process(viewPortInstruction, waitToSwap)\n              .then(() => childNavInstruction\n                ? childNavInstruction._commitChanges(waitToSwap)\n                : Promise.resolve()\n              )\n          );\n        }\n      } else {\n        if (childNavInstruction) {\n          loads.push(childNavInstruction._commitChanges(waitToSwap));\n        }\n      }\n    }\n\n    return Promise\n      .all(loads)\n      .then(() => {\n        delaySwaps.forEach(x => x.viewPort.swap(x.viewPortInstruction));\n        return null;\n      })\n      .then(() => prune(this));\n  }\n\n  /**@internal */\n  _updateTitle(): void {\n    let router = this.router;\n    let title = this._buildTitle(router.titleSeparator);\n    if (title) {\n      router.history.setTitle(title);\n    }\n  }\n\n  /**@internal */\n  _buildTitle(separator: string = ' | '): string {\n    let title = '';\n    let childTitles = [];\n    let navModelTitle = this.config.navModel.title;\n    let instructionRouter = this.router;\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\n\n    if (navModelTitle) {\n      title = instructionRouter.transformTitle(navModelTitle);\n    }\n\n    for (let viewPortName in viewPortInstructions) {\n      let viewPortInstruction = viewPortInstructions[viewPortName];\n      let child_nav_instruction = viewPortInstruction.childNavigationInstruction;\n\n      if (child_nav_instruction) {\n        let childTitle = child_nav_instruction._buildTitle(separator);\n        if (childTitle) {\n          childTitles.push(childTitle);\n        }\n      }\n    }\n\n    if (childTitles.length) {\n      title = childTitles.join(separator) + (title ? separator : '') + title;\n    }\n\n    if (instructionRouter.title) {\n      title += (title ? separator : '') + instructionRouter.transformTitle(instructionRouter.title);\n    }\n\n    return title;\n  }\n}\n\nconst prune = (instruction: NavigationInstruction): void => {\n  instruction.previousInstruction = null;\n  instruction.plan = null;\n};\n\ninterface ISwapPlan {\n  viewPort: ViewPort;\n  viewPortInstruction: ViewPortInstruction;\n}\n","import { Router } from './router';\nimport { RouteConfig } from './interfaces';\n\n/**\n* Class for storing and interacting with a route's navigation settings.\n*/\nexport class NavModel {\n\n  /**\n  * True if this nav item is currently active.\n  */\n  isActive: boolean = false;\n\n  /**\n  * The title.\n  */\n  title: string = null;\n\n  /**\n  * This nav item's absolute href.\n  */\n  href: string = null;\n\n  /**\n  * This nav item's relative href.\n  */\n  relativeHref: string = null;\n\n  /**\n  * Data attached to the route at configuration time.\n  */\n  settings: any = {};\n\n  /**\n  * The route config.\n  */\n  config: RouteConfig = null;\n\n  /**\n  * The router associated with this navigation model.\n  */\n  router: Router;\n\n  order: number | boolean;\n\n  constructor(router: Router, relativeHref: string) {\n    this.router = router;\n    this.relativeHref = relativeHref;\n  }\n\n  /**\n  * Sets the route's title and updates document.title.\n  *  If the a navigation is in progress, the change will be applied\n  *  to document.title when the navigation completes.\n  *\n  * @param title The new title.\n  */\n  setTitle(title: string): void {\n    this.title = title;\n\n    if (this.isActive) {\n      this.router.updateTitle();\n    }\n  }\n}\n","import { RouteConfig } from './interfaces';\n\nexport function _normalizeAbsolutePath(path: string, hasPushState: boolean, absolute: boolean = false) {\n  if (!hasPushState && path[0] !== '#') {\n    path = '#' + path;\n  }\n\n  if (hasPushState && absolute) {\n    path = path.substring(1, path.length);\n  }\n\n  return path;\n}\n\nexport function _createRootedPath(fragment: string, baseUrl: string, hasPushState: boolean, absolute?: boolean) {\n  if (isAbsoluteUrl.test(fragment)) {\n    return fragment;\n  }\n\n  let path = '';\n\n  if (baseUrl.length && baseUrl[0] !== '/') {\n    path += '/';\n  }\n\n  path += baseUrl;\n\n  if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {\n    path += '/';\n  }\n\n  if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {\n    path = path.substring(0, path.length - 1);\n  }\n\n  return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);\n}\n\nexport function _resolveUrl(fragment: string, baseUrl: string, hasPushState?: boolean) {\n  if (isRootedPath.test(fragment)) {\n    return _normalizeAbsolutePath(fragment, hasPushState);\n  }\n\n  return _createRootedPath(fragment, baseUrl, hasPushState);\n}\n\nexport function _ensureArrayWithSingleRoutePerConfig(config: RouteConfig) {\n  let routeConfigs = [];\n\n  if (Array.isArray(config.route)) {\n    for (let i = 0, ii = config.route.length; i < ii; ++i) {\n      let current = Object.assign({}, config);\n      current.route = config.route[i];\n      routeConfigs.push(current);\n    }\n  } else {\n    routeConfigs.push(Object.assign({}, config));\n  }\n\n  return routeConfigs;\n}\n\nconst isRootedPath = /^#?\\//;\nconst isAbsoluteUrl = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\n","import { RouteConfig, PipelineStep, RouteConfigSpecifier } from './interfaces';\nimport { _ensureArrayWithSingleRoutePerConfig } from './util';\nimport { Router } from './router';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { PipelineSlotName } from './pipeline-slot-name';\n\n/**\n * Class used to configure a [[Router]] instance.\n *\n * @constructor\n */\nexport class RouterConfiguration {\n  instructions: Array<(router: Router) => void> = [];\n  options: {\n    [key: string]: any;\n    compareQueryParams?: boolean;\n    root?: string;\n    pushState?: boolean;\n    hashChange?: boolean;\n    silent?: boolean;\n  } = {};\n  pipelineSteps: Array<{ name: string, step: Function | PipelineStep }> = [];\n  title: string;\n  titleSeparator: string;\n  unknownRouteConfig: RouteConfigSpecifier;\n  viewPortDefaults: Record<string, any>;\n\n  /**@internal */\n  _fallbackRoute: string;\n\n  /**\n   * Adds a step to be run during the [[Router]]'s navigation pipeline.\n   *\n   * @param name The name of the pipeline slot to insert the step into.\n   * @param step The pipeline step.\n   * @chainable\n   */\n  addPipelineStep(name: string, step: Function | PipelineStep): RouterConfiguration {\n    if (step === null || step === undefined) {\n      throw new Error('Pipeline step cannot be null or undefined.');\n    }\n    this.pipelineSteps.push({ name, step });\n    return this;\n  }\n\n  /**\n   * Adds a step to be run during the [[Router]]'s authorize pipeline slot.\n   *\n   * @param step The pipeline step.\n   * @chainable\n   */\n  addAuthorizeStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.Authorize, step);\n  }\n\n  /**\n   * Adds a step to be run during the [[Router]]'s preActivate pipeline slot.\n   *\n   * @param step The pipeline step.\n   * @chainable\n   */\n  addPreActivateStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.PreActivate, step);\n  }\n\n  /**\n   * Adds a step to be run during the [[Router]]'s preRender pipeline slot.\n   *\n   * @param step The pipeline step.\n   * @chainable\n   */\n  addPreRenderStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.PreRender, step);\n  }\n\n  /**\n   * Adds a step to be run during the [[Router]]'s postRender pipeline slot.\n   *\n   * @param step The pipeline step.\n   * @chainable\n   */\n  addPostRenderStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.PostRender, step);\n  }\n\n  /**\n   * Configures a route that will be used if there is no previous location available on navigation cancellation.\n   *\n   * @param fragment The URL fragment to use as the navigation destination.\n   * @chainable\n   */\n  fallbackRoute(fragment: string): RouterConfiguration {\n    this._fallbackRoute = fragment;\n    return this;\n  }\n\n  /**\n   * Maps one or more routes to be registered with the router.\n   *\n   * @param route The [[RouteConfig]] to map, or an array of [[RouteConfig]] to map.\n   * @chainable\n   */\n  map(route: RouteConfig | RouteConfig[]): RouterConfiguration {\n    if (Array.isArray(route)) {\n      route.forEach(r => this.map(r));\n      return this;\n    }\n\n    return this.mapRoute(route);\n  }\n\n  /**\n   * Configures defaults to use for any view ports.\n   *\n   * @param viewPortConfig a view port configuration object to use as a\n   *  default, of the form { viewPortName: { moduleId } }.\n   * @chainable\n   */\n  useViewPortDefaults(viewPortConfig: Record<string, { [key: string]: any; moduleId: string }>): RouterConfiguration {\n    this.viewPortDefaults = viewPortConfig;\n    return this;\n  }\n\n  /**\n   * Maps a single route to be registered with the router.\n   *\n   * @param route The [[RouteConfig]] to map.\n   * @chainable\n   */\n  mapRoute(config: RouteConfig): RouterConfiguration {\n    this.instructions.push(router => {\n      let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\n\n      let navModel;\n      for (let i = 0, ii = routeConfigs.length; i < ii; ++i) {\n        let routeConfig = routeConfigs[i];\n        routeConfig.settings = routeConfig.settings || {};\n        if (!navModel) {\n          navModel = router.createNavModel(routeConfig);\n        }\n\n        router.addRoute(routeConfig, navModel);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Registers an unknown route handler to be run when the URL fragment doesn't match any registered routes.\n   *\n   * @param config A string containing a moduleId to load, or a [[RouteConfig]], or a function that takes the\n   *  [[NavigationInstruction]] and selects a moduleId to load.\n   * @chainable\n   */\n  mapUnknownRoutes(config: RouteConfigSpecifier): RouterConfiguration {\n    this.unknownRouteConfig = config;\n    return this;\n  }\n\n  /**\n   * Applies the current configuration to the specified [[Router]].\n   *\n   * @param router The [[Router]] to apply the configuration to.\n   */\n  exportToRouter(router: Router): void {\n    let instructions = this.instructions;\n    for (let i = 0, ii = instructions.length; i < ii; ++i) {\n      instructions[i](router);\n    }\n\n    let { title, titleSeparator, unknownRouteConfig, _fallbackRoute, viewPortDefaults } = this;\n\n    if (title) {\n      router.title = title;\n    }\n\n    if (titleSeparator) {\n      router.titleSeparator = titleSeparator;\n    }\n\n    if (unknownRouteConfig) {\n      router.handleUnknownRoutes(unknownRouteConfig);\n    }\n\n    if (_fallbackRoute) {\n      router.fallbackRoute = _fallbackRoute;\n    }\n\n    if (viewPortDefaults) {\n      router.useViewPortDefaults(viewPortDefaults);\n    }\n\n    Object.assign(router.options, this.options);\n\n    let pipelineSteps = this.pipelineSteps;\n    let pipelineStepCount = pipelineSteps.length;\n    if (pipelineStepCount) {\n      if (!router.isRoot) {\n        throw new Error('Pipeline steps can only be added to the root router');\n      }\n\n      let pipelineProvider = router.pipelineProvider;\n      for (let i = 0, ii = pipelineStepCount; i < ii; ++i) {\n        let { name, step } = pipelineSteps[i];\n        pipelineProvider.addStep(name, step);\n      }\n    }\n  }\n}\n","import { RouteRecognizer, RouteHandler, ConfigurableRoute, State, RecognizedRoute } from 'aurelia-route-recognizer';\nimport { Container } from 'aurelia-dependency-injection';\nimport { History, NavigationOptions } from 'aurelia-history';\nimport { NavigationInstruction, NavigationInstructionInit } from './navigation-instruction';\nimport { NavModel } from './nav-model';\nimport { RouterConfiguration } from './router-configuration';\nimport {\n  _ensureArrayWithSingleRoutePerConfig,\n  _normalizeAbsolutePath,\n  _createRootedPath,\n  _resolveUrl\n} from './util';\nimport { RouteConfig, RouteConfigSpecifier, ViewPortInstruction } from './interfaces';\nimport { PipelineProvider } from './pipeline-provider';\n\n/**@internal */\ndeclare module 'aurelia-history' {\n  interface History {\n    // This is wrong, as it's an implementation detail from aurelia-history-browser\n    // but we are poking it in here so probably will need to make it official in `aurelia-history`\n    /**\n     * A private flag of Aurelia History implementation to indicate if push state should be used\n     */\n    _hasPushState: boolean;\n\n    previousLocation: string;\n  }\n}\n\n/**@internal */\ndeclare module 'aurelia-route-recognizer' {\n  interface State {\n    types: {\n      dynamics: DynamicSegment;\n      stars: StarSegment;\n    };\n  }\n\n  interface RouteHandler {\n    navigationStrategy?: (instruction: NavigationInstruction) => any;\n  }\n\n  interface RecognizedRoute {\n    config?: RouteConfig;\n    queryParams?: Record<string, any>;\n  }\n}\n\ntype RouterConfigurationResolution = RouterConfiguration | ((cfg: RouterConfiguration) => void | RouterConfiguration | Promise<RouterConfiguration>);\n\n/**\n * The primary class responsible for handling routing and navigation.\n */\nexport class Router {\n\n  /**\n   * Container associated with this router. Also used to create child container for creating child router.\n   */\n  container: Container;\n\n  /**\n   * History instance of Aurelia abstract class for wrapping platform history global object\n   */\n  history: History;\n\n  /**\n   * A registry of registered viewport. Will be used to handle process navigation instruction route loading\n   * and dom swapping\n   */\n  viewPorts: Record<string, any>;\n\n  /**\n   * List of route configs registered with this router\n   */\n  routes: RouteConfig[];\n\n  /**\n  * The [[Router]]'s current base URL, typically based on the [[Router.currentInstruction]].\n  */\n  baseUrl: string;\n\n  /**\n   * If defined, used in generation of document title for [[Router]]'s routes.\n   */\n  title: string | undefined;\n\n  /**\n   * The separator used in the document title between [[Router]]'s routes.\n   */\n  titleSeparator: string | undefined;\n\n  /**\n   * True if the [[Router]] has been configured.\n   */\n  isConfigured: boolean;\n\n  /**\n   * True if the [[Router]] is currently processing a navigation.\n   */\n  isNavigating: boolean;\n\n  /**\n   * True if the [[Router]] is navigating due to explicit call to navigate function(s).\n   */\n  isExplicitNavigation: boolean;\n\n  /**\n   * True if the [[Router]] is navigating due to explicit call to navigateBack function.\n   */\n  isExplicitNavigationBack: boolean;\n\n  /**\n   * True if the [[Router]] is navigating into the app for the first time in the browser session.\n   */\n  isNavigatingFirst: boolean;\n\n  /**\n   * True if the [[Router]] is navigating to a page instance not in the browser session history.\n   */\n  isNavigatingNew: boolean;\n\n  /**\n   * True if the [[Router]] is navigating forward in the browser session history.\n   */\n  isNavigatingForward: boolean;\n\n  /**\n   * True if the [[Router]] is navigating back in the browser session history.\n   */\n  isNavigatingBack: boolean;\n\n  /**\n   * True if the [[Router]] is navigating due to a browser refresh.\n   */\n  isNavigatingRefresh: boolean;\n\n  /**\n   * True if the previous instruction successfully completed the CanDeactivatePreviousStep in the current navigation.\n   */\n  couldDeactivate: boolean;\n\n  /**\n   * The currently active navigation tracker.\n   */\n  currentNavigationTracker: number;\n\n  /**\n   * The navigation models for routes that specified [[RouteConfig.nav]].\n   */\n  navigation: NavModel[];\n\n  /**\n   * The currently active navigation instruction.\n   */\n  currentInstruction: NavigationInstruction;\n\n  /**\n   * The parent router, or null if this instance is not a child router.\n   */\n  parent: Router = null;\n\n  options: any = {};\n\n  /**\n   * The defaults used when a viewport lacks specified content\n   */\n  viewPortDefaults: Record<string, any> = {};\n\n  /**@internal */\n  catchAllHandler: (instruction: NavigationInstruction) => NavigationInstruction | Promise<NavigationInstruction>;\n  /**@internal */\n  fallbackRoute: string;\n  /**@internal */\n  pipelineProvider: PipelineProvider;\n  /**@internal */\n  _fallbackOrder: number;\n  /**@internal */\n  _recognizer: RouteRecognizer;\n  /**@internal */\n  _childRecognizer: RouteRecognizer;\n  /**@internal */\n  _configuredPromise: Promise<any>;\n  /**@internal */\n  _resolveConfiguredPromise: (value?: any) => void;\n\n  /**\n   * Extension point to transform the document title before it is built and displayed.\n   * By default, child routers delegate to the parent router, and the app router\n   * returns the title unchanged.\n   */\n  transformTitle: (title: string) => string = (title: string) => {\n    if (this.parent) {\n      return this.parent.transformTitle(title);\n    }\n    return title;\n  }\n\n  /**\n   * @param container The [[Container]] to use when child routers.\n   * @param history The [[History]] implementation to delegate navigation requests to.\n   */\n  constructor(container: Container, history: History) {\n    this.container = container;\n    this.history = history;\n    this.reset();\n  }\n\n  /**\n   * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\n   * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\n   */\n  reset() {\n    this.viewPorts = {};\n    this.routes = [];\n    this.baseUrl = '';\n    this.isConfigured = false;\n    this.isNavigating = false;\n    this.isExplicitNavigation = false;\n    this.isExplicitNavigationBack = false;\n    this.isNavigatingFirst = false;\n    this.isNavigatingNew = false;\n    this.isNavigatingRefresh = false;\n    this.isNavigatingForward = false;\n    this.isNavigatingBack = false;\n    this.couldDeactivate = false;\n    this.navigation = [];\n    this.currentInstruction = null;\n    this.viewPortDefaults = {};\n    this._fallbackOrder = 100;\n    this._recognizer = new RouteRecognizer();\n    this._childRecognizer = new RouteRecognizer();\n    this._configuredPromise = new Promise(resolve => {\n      this._resolveConfiguredPromise = resolve;\n    });\n  }\n\n  /**\n   * Gets a value indicating whether or not this [[Router]] is the root in the router tree. I.e., it has no parent.\n   */\n  get isRoot(): boolean {\n    return !this.parent;\n  }\n\n  /**\n   * Registers a viewPort to be used as a rendering target for activated routes.\n   *\n   * @param viewPort The viewPort.\n   * @param name The name of the viewPort. 'default' if unspecified.\n   */\n  registerViewPort(viewPort: /*ViewPort*/any, name?: string): void {\n    name = name || 'default';\n    this.viewPorts[name] = viewPort;\n  }\n\n  /**\n   * Returns a Promise that resolves when the router is configured.\n   */\n  ensureConfigured(): Promise<void> {\n    return this._configuredPromise;\n  }\n\n  /**\n   * Configures the router.\n   *\n   * @param callbackOrConfig The [[RouterConfiguration]] or a callback that takes a [[RouterConfiguration]].\n   */\n  configure(callbackOrConfig: RouterConfiguration | ((config: RouterConfiguration) => RouterConfiguration)): Promise<void> {\n    this.isConfigured = true;\n\n    let result: RouterConfigurationResolution = callbackOrConfig as RouterConfiguration;\n    let config: RouterConfiguration;\n    if (typeof callbackOrConfig === 'function') {\n      config = new RouterConfiguration();\n      result = callbackOrConfig(config);\n    }\n\n    return Promise\n      .resolve(result)\n      .then((c) => {\n        if (c && (c as RouterConfiguration).exportToRouter) {\n          config = c;\n        }\n\n        config.exportToRouter(this);\n        this.isConfigured = true;\n        this._resolveConfiguredPromise();\n      });\n  }\n\n  /**\n   * Navigates to a new location.\n   *\n   * @param fragment The URL fragment to use as the navigation destination.\n   * @param options The navigation options.\n   */\n  navigate(fragment: string, options?: NavigationOptions): boolean {\n    if (!this.isConfigured && this.parent) {\n      return this.parent.navigate(fragment, options);\n    }\n\n    this.isExplicitNavigation = true;\n    return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);\n  }\n\n  /**\n   * Navigates to a new location corresponding to the route and params specified. Equivallent to [[Router.generate]] followed\n   * by [[Router.navigate]].\n   *\n   * @param route The name of the route to use when generating the navigation location.\n   * @param params The route parameters to be used when populating the route pattern.\n   * @param options The navigation options.\n   */\n  navigateToRoute(route: string, params?: any, options?: NavigationOptions): boolean {\n    let path = this.generate(route, params);\n    return this.navigate(path, options);\n  }\n\n  /**\n   * Navigates back to the most recent location in history.\n   */\n  navigateBack(): void {\n    this.isExplicitNavigationBack = true;\n    this.history.navigateBack();\n  }\n\n  /**\n   * Creates a child router of the current router.\n   *\n   * @param container The [[Container]] to provide to the child router. Uses the current [[Router]]'s [[Container]] if unspecified.\n   * @returns {Router} The new child Router.\n   */\n  createChild(container?: Container): Router {\n    let childRouter = new Router(container || this.container.createChild(), this.history);\n    childRouter.parent = this;\n    return childRouter;\n  }\n\n  /**\n   * Generates a URL fragment matching the specified route pattern.\n   *\n   * @param name The name of the route whose pattern should be used to generate the fragment.\n   * @param params The route params to be used to populate the route pattern.\n   * @param options If options.absolute = true, then absolute url will be generated; otherwise, it will be relative url.\n   * @returns {string} A string containing the generated URL fragment.\n   */\n  generate(nameOrRoute: string | RouteConfig, params: any = {}, options: any = {}): string {\n    // A child recognizer generates routes for potential child routes. Any potential child route is added\n    // to the childRoute property of params for the childRouter to recognize. When generating routes, we\n    // use the childRecognizer when childRoute params are available to generate a child router enabled route.\n    let recognizer = 'childRoute' in params ? this._childRecognizer : this._recognizer;\n    let hasRoute = recognizer.hasRoute(nameOrRoute as string | RouteHandler);\n    if (!hasRoute) {\n      if (this.parent) {\n        return this.parent.generate(nameOrRoute, params, options);\n      }\n      throw new Error(`A route with name '${nameOrRoute}' could not be found. Check that \\`name: '${nameOrRoute}'\\` was specified in the route's config.`);\n    }\n    let path = recognizer.generate(nameOrRoute as string | RouteHandler, params);\n    let rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);\n    return options.absolute ? `${this.history.getAbsoluteRoot()}${rootedPath}` : rootedPath;\n  }\n\n  /**\n   * Creates a [[NavModel]] for the specified route config.\n   *\n   * @param config The route config.\n   */\n  createNavModel(config: RouteConfig): NavModel {\n    let navModel = new NavModel(\n      this,\n      'href' in config\n        ? config.href\n        // potential error when config.route is a string[] ?\n        : config.route as string);\n    navModel.title = config.title;\n    navModel.order = config.nav;\n    navModel.href = config.href;\n    navModel.settings = config.settings;\n    navModel.config = config;\n\n    return navModel;\n  }\n\n  /**\n   * Registers a new route with the router.\n   *\n   * @param config The [[RouteConfig]].\n   * @param navModel The [[NavModel]] to use for the route. May be omitted for single-pattern routes.\n   */\n  addRoute(config: RouteConfig, navModel?: NavModel): void {\n    if (Array.isArray(config.route)) {\n      let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\n      // the following is wrong. todo: fix this after TS refactoring release\n      routeConfigs.forEach(this.addRoute.bind(this));\n      return;\n    }\n\n    validateRouteConfig(config);\n\n    if (!('viewPorts' in config) && !config.navigationStrategy) {\n      config.viewPorts = {\n        'default': {\n          moduleId: config.moduleId,\n          view: config.view\n        }\n      };\n    }\n\n    if (!navModel) {\n      navModel = this.createNavModel(config);\n    }\n\n    this.routes.push(config);\n\n    let path = config.route;\n    if (path.charAt(0) === '/') {\n      path = path.substr(1);\n    }\n    let caseSensitive = config.caseSensitive === true;\n    let state: State = this._recognizer.add({\n      path: path,\n      handler: config as RouteHandler,\n      caseSensitive: caseSensitive\n    } as ConfigurableRoute);\n\n    if (path) {\n      let settings = config.settings;\n      delete config.settings;\n      let withChild = JSON.parse(JSON.stringify(config));\n      config.settings = settings;\n      withChild.route = `${path}/*childRoute`;\n      withChild.hasChildRouter = true;\n      this._childRecognizer.add({\n        path: withChild.route,\n        handler: withChild,\n        caseSensitive: caseSensitive\n      });\n\n      withChild.navModel = navModel;\n      withChild.settings = config.settings;\n      withChild.navigationStrategy = config.navigationStrategy;\n    }\n\n    config.navModel = navModel;\n\n    let navigation = this.navigation;\n\n    if ((navModel.order || navModel.order === 0) && navigation.indexOf(navModel) === -1) {\n      if ((!navModel.href && navModel.href !== '') && (state.types.dynamics || state.types.stars)) {\n        throw new Error('Invalid route config for \"' + config.route + '\" : dynamic routes must specify an \"href:\" to be included in the navigation model.');\n      }\n\n      if (typeof navModel.order !== 'number') {\n        navModel.order = ++this._fallbackOrder;\n      }\n\n      navigation.push(navModel);\n      // this is a potential error / inconsistency between browsers\n      //\n      // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n      // If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other,\n      // but sorted with respect to all different elements.\n      // Note: the ECMAscript standard does not guarantee this behaviour,\n      // and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.\n      navigation.sort((a, b) => <any>a.order - <any>b.order);\n    }\n  }\n\n  /**\n   * Gets a value indicating whether or not this [[Router]] or one of its ancestors has a route registered with the specified name.\n   *\n   * @param name The name of the route to check.\n   */\n  hasRoute(name: string): boolean {\n    return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));\n  }\n\n  /**\n   * Gets a value indicating whether or not this [[Router]] has a route registered with the specified name.\n   *\n   * @param name The name of the route to check.\n   */\n  hasOwnRoute(name: string): boolean {\n    return this._recognizer.hasRoute(name);\n  }\n\n  /**\n   * Register a handler to use when the incoming URL fragment doesn't match any registered routes.\n   *\n   * @param config The moduleId, or a function that selects the moduleId, or a [[RouteConfig]].\n   */\n  handleUnknownRoutes(config?: RouteConfigSpecifier): void {\n    if (!config) {\n      throw new Error('Invalid unknown route handler');\n    }\n\n    this.catchAllHandler = instruction => {\n      return this\n        ._createRouteConfig(config, instruction)\n        .then(c => {\n          instruction.config = c;\n          return instruction;\n        });\n    };\n  }\n\n  /**\n   * Updates the document title using the current navigation instruction.\n   */\n  updateTitle(): void {\n    let parentRouter = this.parent;\n    if (parentRouter) {\n      return parentRouter.updateTitle();\n    }\n\n    let currentInstruction = this.currentInstruction;\n    if (currentInstruction) {\n      currentInstruction._updateTitle();\n    }\n    return undefined;\n  }\n\n  /**\n   * Updates the navigation routes with hrefs relative to the current location.\n   * Note: This method will likely move to a plugin in a future release.\n   */\n  refreshNavigation(): void {\n    let nav = this.navigation;\n\n    for (let i = 0, length = nav.length; i < length; i++) {\n      let current = nav[i];\n      if (!current.config.href) {\n        current.href = _createRootedPath(current.relativeHref, this.baseUrl, this.history._hasPushState);\n      } else {\n        current.href = _normalizeAbsolutePath(current.config.href, this.history._hasPushState);\n      }\n    }\n  }\n\n  /**\n   * Sets the default configuration for the view ports. This specifies how to\n   *  populate a view port for which no module is specified. The default is\n   *  an empty view/view-model pair.\n   */\n  useViewPortDefaults($viewPortDefaults: Record<string, any>): void {\n    // a workaround to have strong typings while not requiring to expose interface ViewPortInstruction\n    let viewPortDefaults: Record<string, ViewPortInstruction> = $viewPortDefaults;\n    for (let viewPortName in viewPortDefaults) {\n      let viewPortConfig = viewPortDefaults[viewPortName];\n      this.viewPortDefaults[viewPortName] = {\n        moduleId: viewPortConfig.moduleId\n      };\n    }\n  }\n\n  /**@internal */\n  _refreshBaseUrl(): void {\n    let parentRouter = this.parent;\n    if (parentRouter) {\n      this.baseUrl = generateBaseUrl(parentRouter, parentRouter.currentInstruction);\n    }\n  }\n\n  /**@internal */\n  _createNavigationInstruction(url: string = '', parentInstruction: NavigationInstruction = null): Promise<NavigationInstruction> {\n    let fragment = url;\n    let queryString = '';\n\n    let queryIndex = url.indexOf('?');\n    if (queryIndex !== -1) {\n      fragment = url.substr(0, queryIndex);\n      queryString = url.substr(queryIndex + 1);\n    }\n\n    let urlRecognizationResults = this._recognizer.recognize(url) as IRouteRecognizationResults;\n    if (!urlRecognizationResults || !urlRecognizationResults.length) {\n      urlRecognizationResults = this._childRecognizer.recognize(url) as IRouteRecognizationResults;\n    }\n\n    let instructionInit: NavigationInstructionInit = {\n      fragment,\n      queryString,\n      config: null,\n      parentInstruction,\n      previousInstruction: this.currentInstruction,\n      router: this,\n      options: {\n        compareQueryParams: this.options.compareQueryParams\n      }\n    };\n\n    let result: Promise<NavigationInstruction>;\n\n    if (urlRecognizationResults && urlRecognizationResults.length) {\n      let first = urlRecognizationResults[0];\n      let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n        params: first.params,\n        queryParams: first.queryParams || urlRecognizationResults.queryParams,\n        config: first.config || first.handler\n      }));\n\n      if (typeof first.handler === 'function') {\n        result = evaluateNavigationStrategy(instruction, first.handler, first);\n      } else if (first.handler && typeof first.handler.navigationStrategy === 'function') {\n        result = evaluateNavigationStrategy(instruction, first.handler.navigationStrategy, first.handler);\n      } else {\n        result = Promise.resolve(instruction);\n      }\n    } else if (this.catchAllHandler) {\n      let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n        params: { path: fragment },\n        queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\n        config: null // config will be created by the catchAllHandler\n      }));\n\n      result = evaluateNavigationStrategy(instruction, this.catchAllHandler);\n    } else if (this.parent) {\n      let router = this._parentCatchAllHandler(this.parent);\n\n      if (router) {\n        let newParentInstruction = this._findParentInstructionFromRouter(router, parentInstruction);\n\n        let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n          params: { path: fragment },\n          queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\n          router: router,\n          parentInstruction: newParentInstruction,\n          parentCatchHandler: true,\n          config: null // config will be created by the chained parent catchAllHandler\n        }));\n\n        result = evaluateNavigationStrategy(instruction, router.catchAllHandler);\n      }\n    }\n\n    if (result && parentInstruction) {\n      this.baseUrl = generateBaseUrl(this.parent, parentInstruction);\n    }\n\n    return result || Promise.reject(new Error(`Route not found: ${url}`));\n  }\n\n  /**@internal */\n  _findParentInstructionFromRouter(router: Router, instruction: NavigationInstruction): NavigationInstruction {\n    if (instruction.router === router) {\n      instruction.fragment = router.baseUrl; // need to change the fragment in case of a redirect instead of moduleId\n      return instruction;\n    } else if (instruction.parentInstruction) {\n      return this._findParentInstructionFromRouter(router, instruction.parentInstruction);\n    }\n    return undefined;\n  }\n\n  /**@internal */\n  _parentCatchAllHandler(router: Router): Router | false {\n    if (router.catchAllHandler) {\n      return router;\n    } else if (router.parent) {\n      return this._parentCatchAllHandler(router.parent);\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _createRouteConfig(config: RouteConfigSpecifier, instruction: NavigationInstruction): Promise<RouteConfig> {\n    return Promise\n      .resolve(config)\n      .then((c: any) => {\n        if (typeof c === 'string') {\n          return { moduleId: c } as RouteConfig;\n        } else if (typeof c === 'function') {\n          return c(instruction);\n        }\n\n        return c;\n      })\n      // typing here could be either RouteConfig or RedirectConfig\n      // but temporarily treat both as RouteConfig\n      // todo: improve typings precision\n      .then((c: string | RouteConfig) => typeof c === 'string' ? { moduleId: c } as RouteConfig : c)\n      .then((c: RouteConfig) => {\n        c.route = instruction.params.path;\n        validateRouteConfig(c);\n\n        if (!c.navModel) {\n          c.navModel = this.createNavModel(c);\n        }\n\n        return c;\n      });\n  }\n}\n\n/* @internal exported for unit testing */\nexport const generateBaseUrl = (router: Router, instruction: NavigationInstruction): string => {\n  return `${router.baseUrl || ''}${instruction.getBaseUrl() || ''}`;\n};\n\n/* @internal exported for unit testing */\nexport const validateRouteConfig = (config: RouteConfig): void => {\n  if (typeof config !== 'object') {\n    throw new Error('Invalid Route Config');\n  }\n\n  if (typeof config.route !== 'string') {\n    let name = config.name || '(no name)';\n    throw new Error('Invalid Route Config for \"' + name + '\": You must specify a \"route:\" pattern.');\n  }\n\n  if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {\n    throw new Error('Invalid Route Config for \"' + config.route + '\": You must specify a \"moduleId:\", \"redirect:\", \"navigationStrategy:\", or \"viewPorts:\".');\n  }\n};\n\n/* @internal exported for unit testing */\nexport const evaluateNavigationStrategy = (\n  instruction: NavigationInstruction,\n  evaluator: Function,\n  context?: any\n): Promise<NavigationInstruction> => {\n  return Promise\n    .resolve(evaluator.call(context, instruction))\n    .then(() => {\n      if (!('viewPorts' in instruction.config)) {\n        instruction.config.viewPorts = {\n          'default': {\n            moduleId: instruction.config.moduleId\n          }\n        };\n      }\n\n      return instruction;\n    });\n};\n\ninterface IRouteRecognizationResults extends Array<RecognizedRoute> {\n  queryParams: Record<string, any>;\n}\n","import { PipelineStatus } from './pipeline-status';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { Next, StepRunnerFunction, NextCompletionHandler } from './interfaces';\n\n/**@internal exported for unit testing */\nexport const createNextFn = (instruction: NavigationInstruction, steps: StepRunnerFunction[]): Next => {\n  let index = -1;\n  const next: Next = function() {\n    index++;\n\n    if (index < steps.length) {\n      let currentStep = steps[index];\n\n      try {\n        return currentStep(instruction, next);\n      } catch (e) {\n        return next.reject(e);\n      }\n    } else {\n      return next.complete();\n    }\n  } as Next;\n\n  next.complete = createCompletionHandler(next, PipelineStatus.Completed);\n  next.cancel = createCompletionHandler(next, PipelineStatus.Canceled);\n  next.reject = createCompletionHandler(next, PipelineStatus.Rejected);\n\n  return next;\n};\n\n/**@internal exported for unit testing */\nexport const createCompletionHandler = (next: Next, status: PipelineStatus): NextCompletionHandler => {\n  return (output: any) => Promise\n    .resolve({\n      status,\n      output,\n      completed: status === PipelineStatus.Completed\n    });\n};\n","import { PipelineStep, PipelineResult, Next, StepRunnerFunction, IPipelineSlot } from './interfaces';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { createNextFn } from './next';\n\n/**\n * The class responsible for managing and processing the navigation pipeline.\n */\nexport class Pipeline {\n  /**\n   * The pipeline steps. And steps added via addStep will be converted to a function\n   * The actualy running functions with correct step contexts of this pipeline\n   */\n  steps: StepRunnerFunction[] = [];\n\n  /**\n   * Adds a step to the pipeline.\n   *\n   * @param step The pipeline step.\n   */\n  addStep(step: StepRunnerFunction | PipelineStep | IPipelineSlot): Pipeline {\n    let run;\n\n    if (typeof step === 'function') {\n      run = step;\n    } else if (typeof step.getSteps === 'function') {\n      // getSteps is to enable support open slots\n      // where devs can add multiple steps into the same slot name\n      let steps = step.getSteps();\n      for (let i = 0, l = steps.length; i < l; i++) {\n        this.addStep(steps[i]);\n      }\n\n      return this;\n    } else {\n      run = (step as PipelineStep).run.bind(step);\n    }\n\n    this.steps.push(run);\n\n    return this;\n  }\n\n  /**\n   * Runs the pipeline.\n   *\n   * @param instruction The navigation instruction to process.\n   */\n  run(instruction: NavigationInstruction): Promise<PipelineResult> {\n    const nextFn = createNextFn(instruction, this.steps);\n    return nextFn();\n  }\n}\n","import { NavigationOptions } from 'aurelia-history';\nimport { Router } from './router';\n\n/**@internal */\ndeclare module 'aurelia-history' {\n  interface NavigationOptions {\n    useAppRouter?: boolean;\n  }\n}\n\n/**\n* When a navigation command is encountered, the current navigation\n* will be cancelled and control will be passed to the navigation\n* command so it can determine the correct action.\n*/\nexport interface NavigationCommand {\n  navigate: (router: Router) => void;\n  /**@internal */\n  shouldContinueProcessing?: boolean;\n  /**@internal */\n  setRouter?: (router: Router) => void;\n}\n\n/**\n* Determines if the provided object is a navigation command.\n* A navigation command is anything with a navigate method.\n*\n* @param obj The object to check.\n*/\nexport function isNavigationCommand(obj: any): obj is NavigationCommand {\n  return obj && typeof obj.navigate === 'function';\n}\n\n/**\n* Used during the activation lifecycle to cause a redirect.\n*/\nexport class Redirect implements NavigationCommand {\n\n  url: string;\n  /**@internal */\n  options: NavigationOptions;\n  /**@internal */\n  shouldContinueProcessing: boolean;\n\n  private router: Router;\n\n  /**\n   * @param url The URL fragment to use as the navigation destination.\n   * @param options The navigation options.\n   */\n  constructor(url: string, options: NavigationOptions = {}) {\n    this.url = url;\n    this.options = Object.assign({ trigger: true, replace: true }, options);\n    this.shouldContinueProcessing = false;\n  }\n\n  /**\n   * Called by the activation system to set the child router.\n   *\n   * @param router The router.\n   */\n  setRouter(router: Router): void {\n    this.router = router;\n  }\n\n  /**\n   * Called by the navigation pipeline to navigate.\n   *\n   * @param appRouter The router to be redirected.\n   */\n  navigate(appRouter: Router): void {\n    let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\n    navigatingRouter.navigate(this.url, this.options);\n  }\n}\n\n/**\n * Used during the activation lifecycle to cause a redirect to a named route.\n */\nexport class RedirectToRoute implements NavigationCommand {\n\n  route: string;\n  params: any;\n  /**@internal */\n  options: NavigationOptions;\n\n  /**@internal */\n  shouldContinueProcessing: boolean;\n\n  /**@internal */\n  router: Router;\n\n  /**\n   * @param route The name of the route.\n   * @param params The parameters to be sent to the activation method.\n   * @param options The options to use for navigation.\n   */\n  constructor(route: string, params: any = {}, options: NavigationOptions = {}) {\n    this.route = route;\n    this.params = params;\n    this.options = Object.assign({ trigger: true, replace: true }, options);\n    this.shouldContinueProcessing = false;\n  }\n\n  /**\n   * Called by the activation system to set the child router.\n   *\n   * @param router The router.\n   */\n  setRouter(router: Router): void {\n    this.router = router;\n  }\n\n  /**\n   * Called by the navigation pipeline to navigate.\n   *\n   * @param appRouter The router to be redirected.\n   */\n  navigate(appRouter: Router): void {\n    let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\n    navigatingRouter.navigateToRoute(this.route, this.params, this.options);\n  }\n}\n","import { ViewPortPlan, ViewPortInstruction, RouteConfig, ViewPort } from './interfaces';\nimport { Redirect } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { InternalActivationStrategy, ActivationStrategyType } from './activation-strategy';\n\ntype ViewPortPlansRecord = Record<string, ViewPortPlan>;\n\n/**\n * @internal exported for unit testing\n */\nexport function _buildNavigationPlan(\n  instruction: NavigationInstruction,\n  forceLifecycleMinimum?: boolean\n): Promise<ViewPortPlansRecord | Redirect> {\n  let config = instruction.config;\n\n  if ('redirect' in config) {\n    return buildRedirectPlan(instruction);\n  }\n\n  const prevInstruction = instruction.previousInstruction;\n  const defaultViewPortConfigs = instruction.router.viewPortDefaults;\n\n  if (prevInstruction) {\n    return buildTransitionPlans(instruction, prevInstruction, defaultViewPortConfigs, forceLifecycleMinimum);\n  }\n\n  // first navigation, only need to prepare a few information for each viewport plan\n  const viewPortPlans: ViewPortPlansRecord = {};\n  let viewPortConfigs = config.viewPorts;\n  for (let viewPortName in viewPortConfigs) {\n    let viewPortConfig = viewPortConfigs[viewPortName];\n    if (viewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {\n      viewPortConfig = defaultViewPortConfigs[viewPortName];\n    }\n    viewPortPlans[viewPortName] = {\n      name: viewPortName,\n      strategy: InternalActivationStrategy.Replace,\n      config: viewPortConfig\n    };\n  }\n\n  return Promise.resolve(viewPortPlans);\n}\n\n/**\n * Build redirect plan based on config of a navigation instruction\n * @internal exported for unit testing\n */\nexport const buildRedirectPlan = (instruction: NavigationInstruction) => {\n  const config = instruction.config;\n  const router = instruction.router;\n  return router\n    ._createNavigationInstruction(config.redirect)\n    .then(redirectInstruction => {\n\n      const params: Record<string, any> = {};\n      const originalInstructionParams = instruction.params;\n      const redirectInstructionParams = redirectInstruction.params;\n\n      for (let key in redirectInstructionParams) {\n        // If the param on the redirect points to another param, e.g. { route: first/:this, redirect: second/:this }\n        let val = redirectInstructionParams[key];\n        if (typeof val === 'string' && val[0] === ':') {\n          val = val.slice(1);\n          // And if that param is found on the original instruction then use it\n          if (val in originalInstructionParams) {\n            params[key] = originalInstructionParams[val];\n          }\n        } else {\n          params[key] = redirectInstructionParams[key];\n        }\n      }\n      let redirectLocation = router.generate(redirectInstruction.config, params, instruction.options);\n\n      // Special handling for child routes\n      for (let key in originalInstructionParams) {\n        redirectLocation = redirectLocation.replace(`:${key}`, originalInstructionParams[key]);\n      }\n\n      let queryString = instruction.queryString;\n      if (queryString) {\n        redirectLocation += '?' + queryString;\n      }\n\n      return Promise.resolve(new Redirect(redirectLocation));\n    });\n};\n\n/**\n * @param viewPortPlans the Plan record that holds information about built plans\n * @internal exported for unit testing\n */\nexport const buildTransitionPlans = (\n  currentInstruction: NavigationInstruction,\n  previousInstruction: NavigationInstruction,\n  defaultViewPortConfigs: Record<string, ViewPortInstruction>,\n  forceLifecycleMinimum?: boolean\n): Promise<ViewPortPlansRecord> => {\n\n  let viewPortPlans: ViewPortPlansRecord = {};\n  let newInstructionConfig = currentInstruction.config;\n  let hasNewParams = hasDifferentParameterValues(previousInstruction, currentInstruction);\n  let pending: Promise<void>[] = [];\n  let previousViewPortInstructions = previousInstruction.viewPortInstructions as Record<string, ViewPortInstruction>;\n\n  for (let viewPortName in previousViewPortInstructions) {\n\n    const prevViewPortInstruction = previousViewPortInstructions[viewPortName];\n    const prevViewPortComponent = prevViewPortInstruction.component;\n    const newInstructionViewPortConfigs = newInstructionConfig.viewPorts as Record<string, RouteConfig>;\n\n    // if this is invoked on a viewport without any changes, based on new url,\n    // newViewPortConfig will be the existing viewport instruction\n    let nextViewPortConfig = viewPortName in newInstructionViewPortConfigs\n      ? newInstructionViewPortConfigs[viewPortName]\n      : prevViewPortInstruction;\n\n    if (nextViewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {\n      nextViewPortConfig = defaultViewPortConfigs[viewPortName];\n    }\n\n    const viewPortActivationStrategy = determineActivationStrategy(\n      currentInstruction,\n      prevViewPortInstruction,\n      nextViewPortConfig,\n      hasNewParams,\n      forceLifecycleMinimum\n    );\n    const viewPortPlan = viewPortPlans[viewPortName] = {\n      name: viewPortName,\n      // ViewPortInstruction can quack like a RouteConfig\n      config: nextViewPortConfig as RouteConfig,\n      prevComponent: prevViewPortComponent,\n      prevModuleId: prevViewPortInstruction.moduleId,\n      strategy: viewPortActivationStrategy\n    } as ViewPortPlan;\n\n    // recursively build nav plans for all existing child routers/viewports of this viewport\n    // this is possible because existing child viewports and routers already have necessary information\n    // to process the wildcard path from parent instruction\n    if (viewPortActivationStrategy !== InternalActivationStrategy.Replace && prevViewPortInstruction.childRouter) {\n      const path = currentInstruction.getWildcardPath();\n      const task: Promise<void> = prevViewPortInstruction\n        .childRouter\n        ._createNavigationInstruction(path, currentInstruction)\n        .then((childInstruction: NavigationInstruction) => {\n          viewPortPlan.childNavigationInstruction = childInstruction;\n\n          return _buildNavigationPlan(\n            childInstruction,\n            // is it safe to assume viewPortPlan has not been changed from previous assignment?\n            // if so, can just use local variable viewPortPlanStrategy\n            // there could be user code modifying viewport plan during _createNavigationInstruction?\n            viewPortPlan.strategy === InternalActivationStrategy.InvokeLifecycle\n          )\n            .then(childPlan => {\n              if (childPlan instanceof Redirect) {\n                return Promise.reject(childPlan);\n              }\n              childInstruction.plan = childPlan;\n              // for bluebird ?\n              return null;\n            });\n        });\n\n      pending.push(task);\n    }\n  }\n\n  return Promise.all(pending).then(() => viewPortPlans);\n};\n\n/**\n * @param newViewPortConfig if this is invoked on a viewport without any changes, based on new url, newViewPortConfig will be the existing viewport instruction\n * @internal exported for unit testing\n */\nexport const determineActivationStrategy = (\n  currentNavInstruction: NavigationInstruction,\n  prevViewPortInstruction: ViewPortInstruction,\n  newViewPortConfig: RouteConfig | ViewPortInstruction,\n  // indicates whether there is difference between old and new url params\n  hasNewParams: boolean,\n  forceLifecycleMinimum?: boolean\n): ActivationStrategyType => {\n\n  let newInstructionConfig = currentNavInstruction.config;\n  let prevViewPortViewModel = prevViewPortInstruction.component.viewModel;\n  let viewPortPlanStrategy: ActivationStrategyType;\n\n  if (prevViewPortInstruction.moduleId !== newViewPortConfig.moduleId) {\n    viewPortPlanStrategy = InternalActivationStrategy.Replace;\n  } else if ('determineActivationStrategy' in prevViewPortViewModel) {\n    viewPortPlanStrategy = prevViewPortViewModel.determineActivationStrategy(...currentNavInstruction.lifecycleArgs);\n  } else if (newInstructionConfig.activationStrategy) {\n    viewPortPlanStrategy = newInstructionConfig.activationStrategy;\n  } else if (hasNewParams || forceLifecycleMinimum) {\n    viewPortPlanStrategy = InternalActivationStrategy.InvokeLifecycle;\n  } else {\n    viewPortPlanStrategy = InternalActivationStrategy.NoChange;\n  }\n  return viewPortPlanStrategy;\n};\n\n/**@internal exported for unit testing */\nexport const hasDifferentParameterValues = (prev: NavigationInstruction, next: NavigationInstruction): boolean => {\n  let prevParams = prev.params;\n  let nextParams = next.params;\n  let nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;\n\n  for (let key in nextParams) {\n    if (key === nextWildCardName) {\n      continue;\n    }\n\n    if (prevParams[key] !== nextParams[key]) {\n      return true;\n    }\n  }\n\n  for (let key in prevParams) {\n    if (key === nextWildCardName) {\n      continue;\n    }\n\n    if (prevParams[key] !== nextParams[key]) {\n      return true;\n    }\n  }\n\n  if (!next.options.compareQueryParams) {\n    return false;\n  }\n\n  let prevQueryParams = prev.queryParams;\n  let nextQueryParams = next.queryParams;\n  for (let key in nextQueryParams) {\n    if (prevQueryParams[key] !== nextQueryParams[key]) {\n      return true;\n    }\n  }\n\n  for (let key in prevQueryParams) {\n    if (prevQueryParams[key] !== nextQueryParams[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n","import { Next } from './interfaces';\nimport { Redirect } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { _buildNavigationPlan } from './navigation-plan';\n\n/**\n * Transform a navigation instruction into viewport plan record object,\n * or a redirect request if user viewmodel demands\n */\nexport class BuildNavigationPlanStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return _buildNavigationPlan(navigationInstruction)\n      .then(plan => {\n        if (plan instanceof Redirect) {\n          return next.cancel(plan);\n        }\n        navigationInstruction.plan = plan;\n        return next();\n      })\n      .catch(next.cancel);\n  }\n}\n","import { RouteConfig, ViewPortComponent, ViewPortPlan, ViewPortInstruction } from './interfaces';\nimport { Redirect } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { _buildNavigationPlan } from './navigation-plan';\nimport { InternalActivationStrategy } from './activation-strategy';\nimport { RouteLoader } from './route-loader';\n\n/**\n * Loading plan calculated based on a navigration-instruction and a viewport plan\n */\ninterface ILoadingPlan {\n  viewPortPlan: ViewPortPlan;\n  navigationInstruction: NavigationInstruction;\n}\n\n/**\n * @internal Exported for unit testing\n */\nexport const loadNewRoute = (\n  routeLoader: RouteLoader,\n  navigationInstruction: NavigationInstruction\n): Promise<any[] | void> => {\n  let loadingPlans = determineLoadingPlans(navigationInstruction);\n  let loadPromises = loadingPlans.map((loadingPlan: ILoadingPlan) => loadRoute(\n    routeLoader,\n    loadingPlan.navigationInstruction,\n    loadingPlan.viewPortPlan\n  ));\n\n  return Promise.all(loadPromises);\n};\n\n/**\n * @internal Exported for unit testing\n */\nexport const determineLoadingPlans = (\n  navigationInstruction: NavigationInstruction,\n  loadingPlans: ILoadingPlan[] = []\n): ILoadingPlan[] => {\n  let viewPortPlans: Record<string, ViewPortPlan> = navigationInstruction.plan;\n\n  for (let viewPortName in viewPortPlans) {\n    let viewPortPlan = viewPortPlans[viewPortName];\n    let childNavInstruction = viewPortPlan.childNavigationInstruction;\n\n    if (viewPortPlan.strategy === InternalActivationStrategy.Replace) {\n      loadingPlans.push({ viewPortPlan, navigationInstruction } as ILoadingPlan);\n\n      if (childNavInstruction) {\n        determineLoadingPlans(childNavInstruction, loadingPlans);\n      }\n    } else {\n      let viewPortInstruction = navigationInstruction.addViewPortInstruction({\n        name: viewPortName,\n        strategy: viewPortPlan.strategy,\n        moduleId: viewPortPlan.prevModuleId,\n        component: viewPortPlan.prevComponent\n      }) as ViewPortInstruction;\n\n      if (childNavInstruction) {\n        viewPortInstruction.childNavigationInstruction = childNavInstruction;\n        determineLoadingPlans(childNavInstruction, loadingPlans);\n      }\n    }\n  }\n\n  return loadingPlans;\n};\n\n/**\n * @internal Exported for unit testing\n */\nexport const loadRoute = (\n  routeLoader: RouteLoader,\n  navigationInstruction: NavigationInstruction,\n  viewPortPlan: ViewPortPlan\n): Promise<any> => {\n  let planConfig = viewPortPlan.config;\n  let moduleId = planConfig ? planConfig.moduleId : null;\n\n  return loadComponent(routeLoader, navigationInstruction, planConfig)\n    .then((component) => {\n      let viewPortInstruction = navigationInstruction.addViewPortInstruction({\n        name: viewPortPlan.name,\n        strategy: viewPortPlan.strategy,\n        moduleId: moduleId,\n        component: component\n      }) as ViewPortInstruction;\n\n      let childRouter = component.childRouter;\n      if (childRouter) {\n        let path = navigationInstruction.getWildcardPath();\n\n        return childRouter\n          ._createNavigationInstruction(path, navigationInstruction)\n          .then((childInstruction) => {\n            viewPortPlan.childNavigationInstruction = childInstruction;\n\n            return _buildNavigationPlan(childInstruction)\n              .then((childPlan) => {\n                if (childPlan instanceof Redirect) {\n                  return Promise.reject(childPlan);\n                }\n                childInstruction.plan = childPlan;\n                viewPortInstruction.childNavigationInstruction = childInstruction;\n\n                return loadNewRoute(routeLoader, childInstruction);\n              });\n          });\n      }\n      // ts complains without this, though they are same\n      return void 0;\n    });\n};\n\n/**\n * Load a routed-component based on navigation instruction and route config\n * @internal exported for unit testing only\n */\nexport const loadComponent = (\n  routeLoader: RouteLoader,\n  navigationInstruction: NavigationInstruction,\n  config: RouteConfig\n): Promise<ViewPortComponent> => {\n  let router = navigationInstruction.router;\n  let lifecycleArgs = navigationInstruction.lifecycleArgs;\n\n  return Promise.resolve()\n    .then(() => routeLoader.loadRoute(router, config, navigationInstruction))\n    .then(\n      /**\n       * @param component an object carrying information about loaded route\n       * typically contains information about view model, childContainer, view and router\n       */\n      (component: ViewPortComponent) => {\n        let { viewModel, childContainer } = component;\n        component.router = router;\n        component.config = config;\n\n        if ('configureRouter' in viewModel) {\n          let childRouter = childContainer.getChildRouter();\n          component.childRouter = childRouter;\n\n          return childRouter\n            .configure(c => viewModel.configureRouter(c, childRouter, lifecycleArgs[0], lifecycleArgs[1], lifecycleArgs[2]))\n            .then(() => component);\n        }\n\n        return component;\n      }\n    );\n};\n","import { RouteConfig } from './interfaces';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { Router } from './router';\n\n/**\n * Abstract class that is responsible for loading view / view model from a route config\n * The default implementation can be found in `aurelia-templating-router`\n */\nexport class RouteLoader {\n  /**\n   * Load a route config based on its viewmodel / view configuration\n   */\n  // return typing: return typings used to be never\n  // as it was a throw. Changing it to Promise<any> should not cause any issues\n  loadRoute(router: Router, config: RouteConfig, navigationInstruction: NavigationInstruction): Promise</*ViewPortInstruction*/any> {\n    throw new Error('Route loaders must implement \"loadRoute(router, config, navigationInstruction)\".');\n  }\n}\n","import { Next } from './interfaces';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { loadNewRoute } from './utilities-route-loading';\nimport { RouteLoader } from './route-loader';\n/**\n * A pipeline step responsible for loading a route config of a navigation instruction\n */\nexport class LoadRouteStep {\n  /**@internal */\n  static inject() { return [RouteLoader]; }\n  /**\n   * Route loader isntance that will handle loading route config\n   * @internal\n   */\n  routeLoader: RouteLoader;\n  constructor(routeLoader: RouteLoader) {\n    this.routeLoader = routeLoader;\n  }\n  /**\n   * Run the internal to load route config of a navigation instruction to prepare for next steps in the pipeline\n   */\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return loadNewRoute(this.routeLoader, navigationInstruction)\n      .then(next, next.cancel);\n  }\n}\n","import { NavigationInstruction } from './navigation-instruction';\n\n/**\n * A pipeline step for instructing a piepline to commit changes on a navigation instruction\n */\nexport class CommitChangesStep {\n  run(navigationInstruction: NavigationInstruction, next: Function): Promise<any> {\n    return navigationInstruction\n      ._commitChanges(/*wait to swap?*/ true)\n      .then(() => {\n        navigationInstruction._updateTitle();\n        return next();\n      });\n  }\n}\n","/**\n * An optional interface describing the available activation strategies.\n * @internal Used internally.\n */\nexport const enum InternalActivationStrategy {\n  /**\n   * Reuse the existing view model, without invoking Router lifecycle hooks.\n   */\n  NoChange = 'no-change',\n  /**\n   * Reuse the existing view model, invoking Router lifecycle hooks.\n   */\n  InvokeLifecycle = 'invoke-lifecycle',\n  /**\n   * Replace the existing view model, invoking Router lifecycle hooks.\n   */\n  Replace = 'replace'\n}\n\n/**\n * The strategy to use when activating modules during navigation.\n */\n// kept for compat reason\nexport const activationStrategy: ActivationStrategy = {\n  noChange: InternalActivationStrategy.NoChange,\n  invokeLifecycle: InternalActivationStrategy.InvokeLifecycle,\n  replace: InternalActivationStrategy.Replace\n};\n\n/**\n * An optional interface describing the available activation strategies.\n */\nexport interface ActivationStrategy {\n  /**\n   * Reuse the existing view model, without invoking Router lifecycle hooks.\n   */\n  noChange: 'no-change';\n  /**\n   * Reuse the existing view model, invoking Router lifecycle hooks.\n   */\n  invokeLifecycle: 'invoke-lifecycle';\n  /**\n   * Replace the existing view model, invoking Router lifecycle hooks.\n   */\n  replace: 'replace';\n}\n\n/**\n * Enum like type for activation strategy built-in values\n */\nexport type ActivationStrategyType = ActivationStrategy[keyof ActivationStrategy];\n","import { Next, ViewPortComponent, ViewPortPlan, ViewPortInstruction, LifecycleArguments } from './interfaces';\nimport { isNavigationCommand } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { activationStrategy } from './activation-strategy';\nimport { Router } from './router';\n\n/**\n * Recursively find list of deactivate-able view models\n * and invoke the either 'canDeactivate' or 'deactivate' on each\n * @internal exported for unit testing\n */\nexport const processDeactivatable = (\n  navigationInstruction: NavigationInstruction,\n  callbackName: 'canDeactivate' | 'deactivate',\n  next: Next,\n  ignoreResult?: boolean\n): Promise<any> => {\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\n  let infos = findDeactivatable(plan, callbackName);\n  let i = infos.length; // query from inside out\n\n  function inspect(val: any): Promise<any> {\n    if (ignoreResult || shouldContinue(val)) {\n      return iterate();\n    }\n\n    return next.cancel(val);\n  }\n\n  function iterate(): Promise<any> {\n    if (i--) {\n      try {\n        let viewModel = infos[i];\n        let result = viewModel[callbackName](navigationInstruction);\n        return processPotential(result, inspect, next.cancel);\n      } catch (error) {\n        return next.cancel(error);\n      }\n    }\n\n    navigationInstruction.router.couldDeactivate = true;\n\n    return next();\n  }\n\n  return iterate();\n};\n\n/**\n * Recursively find and returns a list of deactivate-able view models\n * @internal exported for unit testing\n */\nexport const findDeactivatable = (\n  plan: Record<string, ViewPortPlan>,\n  callbackName: string,\n  list: IActivatableInfo[] = []\n): any[] => {\n  for (let viewPortName in plan) {\n    let viewPortPlan = plan[viewPortName];\n    let prevComponent = viewPortPlan.prevComponent;\n\n    if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace)\n      && prevComponent\n    ) {\n      let viewModel = prevComponent.viewModel;\n\n      if (callbackName in viewModel) {\n        list.push(viewModel);\n      }\n    }\n\n    if (viewPortPlan.strategy === activationStrategy.replace && prevComponent) {\n      addPreviousDeactivatable(prevComponent, callbackName, list);\n    } else if (viewPortPlan.childNavigationInstruction) {\n      findDeactivatable(viewPortPlan.childNavigationInstruction.plan, callbackName, list);\n    }\n  }\n\n  return list;\n};\n\n/**\n * @internal exported for unit testing\n */\nexport const addPreviousDeactivatable = (\n  component: ViewPortComponent,\n  callbackName: string,\n  list: IActivatableInfo[]\n): void => {\n  let childRouter = component.childRouter;\n\n  if (childRouter && childRouter.currentInstruction) {\n    let viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;\n\n    for (let viewPortName in viewPortInstructions) {\n      let viewPortInstruction = viewPortInstructions[viewPortName];\n      let prevComponent = viewPortInstruction.component;\n      let prevViewModel = prevComponent.viewModel;\n\n      if (callbackName in prevViewModel) {\n        list.push(prevViewModel);\n      }\n\n      addPreviousDeactivatable(prevComponent, callbackName, list);\n    }\n  }\n};\n\n/**\n * @internal exported for unit testing\n */\nexport const processActivatable = (\n  navigationInstruction: NavigationInstruction,\n  callbackName: 'canActivate' | 'activate',\n  next: Next,\n  ignoreResult?: boolean\n): Promise<any> => {\n  let infos = findActivatable(navigationInstruction, callbackName);\n  let length = infos.length;\n  let i = -1; // query from top down\n\n  function inspect(val: any, router: Router): Promise<any> {\n    if (ignoreResult || shouldContinue(val, router)) {\n      return iterate();\n    }\n\n    return next.cancel(val);\n  }\n\n  function iterate(): Promise<any> {\n    i++;\n\n    if (i < length) {\n      try {\n        let current = infos[i];\n        let result = current.viewModel[callbackName](...current.lifecycleArgs);\n        return processPotential(result, (val: any) => inspect(val, current.router), next.cancel);\n      } catch (error) {\n        return next.cancel(error);\n      }\n    }\n\n    return next();\n  }\n\n  return iterate();\n};\n\ninterface IActivatableInfo {\n  viewModel: any;\n  lifecycleArgs: LifecycleArguments;\n  router: Router;\n}\n\n/**\n * Find list of activatable view model and add to list (3rd parameter)\n * @internal exported for unit testing\n */\nexport const findActivatable = (\n  navigationInstruction: NavigationInstruction,\n  callbackName: 'canActivate' | 'activate',\n  list: IActivatableInfo[] = [],\n  router?: Router\n): IActivatableInfo[] => {\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\n\n  Object\n    .keys(plan)\n    .forEach((viewPortName) => {\n      let viewPortPlan = plan[viewPortName];\n      let viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName] as ViewPortInstruction;\n      let viewPortComponent = viewPortInstruction.component;\n      let viewModel = viewPortComponent.viewModel;\n\n      if (\n        (viewPortPlan.strategy === activationStrategy.invokeLifecycle\n          || viewPortPlan.strategy === activationStrategy.replace\n        )\n        && callbackName in viewModel\n      ) {\n        list.push({\n          viewModel,\n          lifecycleArgs: viewPortInstruction.lifecycleArgs,\n          router\n        });\n      }\n\n      let childNavInstruction = viewPortPlan.childNavigationInstruction;\n\n      if (childNavInstruction) {\n        findActivatable(\n          childNavInstruction,\n          callbackName,\n          list,\n          viewPortComponent.childRouter || router\n        );\n      }\n    });\n\n  return list;\n};\n\nconst shouldContinue = <T = any>(output: T, router?: Router): boolean | T => {\n  if (output instanceof Error) {\n    return false;\n  }\n\n  if (isNavigationCommand(output)) {\n    if (typeof output.setRouter === 'function') {\n      output.setRouter(router);\n    }\n\n    return !!output.shouldContinueProcessing;\n  }\n\n  if (output === undefined) {\n    return true;\n  }\n\n  return output;\n};\n\n/**\n * A basic interface for an Observable type\n */\nexport interface IObservable {\n  subscribe(sub?: IObservableConfig): ISubscription;\n}\n\nexport interface IObservableConfig {\n  next(): void;\n  error(err?: any): void;\n  complete(): void;\n}\n\n/**\n * A basic interface for a Subscription to an Observable\n */\ninterface ISubscription {\n  unsubscribe(): void;\n}\n\ntype SafeSubscriptionFunc = (sub: SafeSubscription) => ISubscription;\n\n/**\n * wraps a subscription, allowing unsubscribe calls even if\n * the first value comes synchronously\n */\nclass SafeSubscription {\n\n  private _subscribed: boolean;\n  private _subscription: ISubscription;\n\n  constructor(subscriptionFunc: SafeSubscriptionFunc) {\n    this._subscribed = true;\n    this._subscription = subscriptionFunc(this);\n\n    if (!this._subscribed) {\n      this.unsubscribe();\n    }\n  }\n\n  get subscribed(): boolean {\n    return this._subscribed;\n  }\n\n  unsubscribe(): void {\n    if (this._subscribed && this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    this._subscribed = false;\n  }\n}\n\n/**\n * A function to process return value from `activate`/`canActivate` steps\n * Supports observable/promise\n *\n * For observable, resolve at first next() or on complete()\n */\nconst processPotential = (obj: any, resolve: (val?: any) => any, reject: (err?: any) => any): any => {\n  // if promise like\n  if (obj && typeof obj.then === 'function') {\n    return Promise.resolve(obj).then(resolve).catch(reject);\n  }\n\n  // if observable\n  if (obj && typeof obj.subscribe === 'function') {\n    let obs: IObservable = obj;\n    return new SafeSubscription(sub => obs.subscribe({\n      next() {\n        if (sub.subscribed) {\n          sub.unsubscribe();\n          resolve(obj);\n        }\n      },\n      error(error) {\n        if (sub.subscribed) {\n          sub.unsubscribe();\n          reject(error);\n        }\n      },\n      complete() {\n        if (sub.subscribed) {\n          sub.unsubscribe();\n          resolve(obj);\n        }\n      }\n    }));\n  }\n\n  // else just resolve\n  try {\n    return resolve(obj);\n  } catch (error) {\n    return reject(error);\n  }\n};\n","import { Next } from './interfaces';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { processDeactivatable, processActivatable } from './utilities-activation';\n\n/**\n * A pipeline step responsible for finding and activating method `canDeactivate` on a view model of a route\n */\nexport class CanDeactivatePreviousStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processDeactivatable(navigationInstruction, 'canDeactivate', next);\n  }\n}\n\n/**\n * A pipeline step responsible for finding and activating method `canActivate` on a view model of a route\n */\nexport class CanActivateNextStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processActivatable(navigationInstruction, 'canActivate', next);\n  }\n}\n\n/**\n * A pipeline step responsible for finding and activating method `deactivate` on a view model of a route\n */\nexport class DeactivatePreviousStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processDeactivatable(navigationInstruction, 'deactivate', next, true);\n  }\n}\n\n/**\n * A pipeline step responsible for finding and activating method `activate` on a view model of a route\n */\nexport class ActivateNextStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processActivatable(navigationInstruction, 'activate', next, true);\n  }\n}\n","import { Container } from 'aurelia-dependency-injection';\nimport { Pipeline } from './pipeline';\nimport { BuildNavigationPlanStep } from './step-build-navigation-plan';\nimport { LoadRouteStep } from './step-load-route';\nimport { CommitChangesStep } from './step-commit-changes';\nimport { CanDeactivatePreviousStep, CanActivateNextStep, DeactivatePreviousStep, ActivateNextStep } from './step-activation';\nimport { PipelineStep, StepRunnerFunction, IPipelineSlot } from './interfaces';\nimport { PipelineSlotName } from './pipeline-slot-name';\n\n/**\n * A multi-slots Pipeline Placeholder Step for hooking into a pipeline execution\n */\nclass PipelineSlot implements IPipelineSlot {\n\n  /**@internal */\n  container: Container;\n  /**@internal */\n  slotName: string;\n  /**@internal */\n  slotAlias?: string;\n\n  steps: (Function | PipelineStep)[] = [];\n\n  constructor(container: Container, name: string, alias?: string) {\n    this.container = container;\n    this.slotName = name;\n    this.slotAlias = alias;\n  }\n\n  getSteps(): (StepRunnerFunction | IPipelineSlot | PipelineStep)[] {\n    return this.steps.map(x => this.container.get(x));\n  }\n}\n\n/**\n * Class responsible for creating the navigation pipeline.\n */\nexport class PipelineProvider {\n\n  /**@internal */\n  static inject() { return [Container]; }\n  /**@internal */\n  container: Container;\n  /**@internal */\n  steps: (Function | PipelineSlot)[];\n\n  constructor(container: Container) {\n    this.container = container;\n    this.steps = [\n      BuildNavigationPlanStep,\n      CanDeactivatePreviousStep, // optional\n      LoadRouteStep,\n      createPipelineSlot(container, PipelineSlotName.Authorize),\n      CanActivateNextStep, // optional\n      createPipelineSlot(container, PipelineSlotName.PreActivate, 'modelbind'),\n      // NOTE: app state changes start below - point of no return\n      DeactivatePreviousStep, // optional\n      ActivateNextStep, // optional\n      createPipelineSlot(container, PipelineSlotName.PreRender, 'precommit'),\n      CommitChangesStep,\n      createPipelineSlot(container, PipelineSlotName.PostRender, 'postcomplete')\n    ];\n  }\n\n  /**\n   * Create the navigation pipeline.\n   */\n  createPipeline(useCanDeactivateStep: boolean = true): Pipeline {\n    let pipeline = new Pipeline();\n    this.steps.forEach(step => {\n      if (useCanDeactivateStep || step !== CanDeactivatePreviousStep) {\n        pipeline.addStep(this.container.get(step));\n      }\n    });\n    return pipeline;\n  }\n\n  /**@internal */\n  _findStep(name: string): PipelineSlot {\n    // Steps that are not PipelineSlots are constructor functions, and they will automatically fail. Probably.\n    return this.steps.find(x => (x as PipelineSlot).slotName === name || (x as PipelineSlot).slotAlias === name) as PipelineSlot;\n  }\n\n  /**\n   * Adds a step into the pipeline at a known slot location.\n   */\n  addStep(name: string, step: PipelineStep | Function): void {\n    let found = this._findStep(name);\n    if (found) {\n      let slotSteps = found.steps;\n      // prevent duplicates\n      if (!slotSteps.includes(step)) {\n        slotSteps.push(step);\n      }\n    } else {\n      throw new Error(`Invalid pipeline slot name: ${name}.`);\n    }\n  }\n\n  /**\n   * Removes a step from a slot in the pipeline\n   */\n  removeStep(name: string, step: PipelineStep): void {\n    let slot = this._findStep(name);\n    if (slot) {\n      let slotSteps = slot.steps;\n      slotSteps.splice(slotSteps.indexOf(step), 1);\n    }\n  }\n\n  /**\n   * Clears all steps from a slot in the pipeline\n   * @internal\n   */\n  _clearSteps(name: string = ''): void {\n    let slot = this._findStep(name);\n    if (slot) {\n      slot.steps = [];\n    }\n  }\n\n  /**\n   * Resets all pipeline slots\n   */\n  reset(): void {\n    this._clearSteps(PipelineSlotName.Authorize);\n    this._clearSteps(PipelineSlotName.PreActivate);\n    this._clearSteps(PipelineSlotName.PreRender);\n    this._clearSteps(PipelineSlotName.PostRender);\n  }\n}\n\n/**@internal */\nconst createPipelineSlot = (container: Container, name: PipelineSlotName, alias?: string): PipelineSlot => {\n  return new PipelineSlot(container, name, alias);\n};\n","import * as LogManager from 'aurelia-logging';\nimport { Container } from 'aurelia-dependency-injection';\nimport { History, NavigationOptions } from 'aurelia-history';\nimport { Router } from './router';\nimport { PipelineProvider } from './pipeline-provider';\nimport { isNavigationCommand } from './navigation-commands';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { ViewPort, ConfiguresRouter, PipelineResult } from './interfaces';\nimport { RouterEvent } from './router-event';\nimport { RouterConfiguration } from './router-configuration';\n\n/**@internal */\ndeclare module 'aurelia-dependency-injection' {\n  interface Container {\n    viewModel?: any;\n  }\n}\n\nconst logger = LogManager.getLogger('app-router');\n\n/**\n * The main application router.\n */\nexport class AppRouter extends Router {\n\n  /**@internal */\n  static inject() { return [Container, History, PipelineProvider, EventAggregator]; }\n\n  events: EventAggregator;\n  /**@internal */\n  maxInstructionCount: number;\n  /**@internal */\n  _queue: NavigationInstruction[];\n  /**@internal */\n  isActive: boolean;\n\n  constructor(container: Container, history: History, pipelineProvider: PipelineProvider, events: EventAggregator) {\n    super(container, history); // Note the super will call reset internally.\n    this.pipelineProvider = pipelineProvider;\n    this.events = events;\n  }\n\n  /**\n   * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\n   * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\n   */\n  reset(): void {\n    super.reset();\n    this.maxInstructionCount = 10;\n    if (!this._queue) {\n      this._queue = [];\n    } else {\n      this._queue.length = 0;\n    }\n  }\n\n  /**\n   * Loads the specified URL.\n   *\n   * @param url The URL fragment to load.\n   */\n  loadUrl(url: string): Promise<NavigationInstruction> {\n    return this\n      ._createNavigationInstruction(url)\n      .then(instruction => this._queueInstruction(instruction))\n      .catch(error => {\n        logger.error(error);\n        restorePreviousLocation(this);\n      });\n  }\n\n  /**\n   * Registers a viewPort to be used as a rendering target for activated routes.\n   *\n   * @param viewPort The viewPort. This is typically a <router-view/> element in Aurelia default impl\n   * @param name The name of the viewPort. 'default' if unspecified.\n   */\n  registerViewPort(viewPort: /*ViewPort*/ any, name?: string): Promise<any> {\n    // having strong typing without changing public API\n    const $viewPort: ViewPort = viewPort;\n    super.registerViewPort($viewPort, name);\n\n    // beside adding viewport to the registry of this instance\n    // AppRouter also configure routing/history to start routing functionality\n    // There are situation where there are more than 1 <router-view/> element at root view\n    // in that case, still only activate once via the following guard\n    if (!this.isActive) {\n      const viewModel = this._findViewModel($viewPort);\n      if ('configureRouter' in viewModel) {\n        // If there are more than one <router-view/> element at root view\n        // use this flag to guard against configure method being invoked multiple times\n        // this flag is set inside method configure\n        if (!this.isConfigured) {\n          // replace the real resolve with a noop to guarantee that any action in base class Router\n          // won't resolve the configurePromise prematurely\n          const resolveConfiguredPromise = this._resolveConfiguredPromise;\n          this._resolveConfiguredPromise = () => {/**/};\n          return this\n            .configure(config =>\n              Promise\n                .resolve(viewModel.configureRouter(config, this))\n                // an issue with configure interface. Should be fixed there\n                // todo: fix this via configure interface in router\n                .then(() => config) as any\n            )\n            .then(() => {\n              this.activate();\n              resolveConfiguredPromise();\n            });\n        }\n      } else {\n        this.activate();\n      }\n    }\n    // when a viewport is added dynamically to a root view that is already activated\n    // just process the navigation instruction\n    else {\n      this._dequeueInstruction();\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Activates the router. This instructs the router to begin listening for history changes and processing instructions.\n   *\n   * @params options The set of options to activate the router with.\n   */\n  activate(options?: NavigationOptions): void {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    // route handler property is responsible for handling url change\n    // the interface of aurelia-history isn't clear on this perspective\n    this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);\n    this.history.activate(this.options);\n    this._dequeueInstruction();\n  }\n\n  /**\n   * Deactivates the router.\n   */\n  deactivate(): void {\n    this.isActive = false;\n    this.history.deactivate();\n  }\n\n  /**@internal */\n  _queueInstruction(instruction: NavigationInstruction): Promise<any> {\n    return new Promise((resolve) => {\n      instruction.resolve = resolve;\n      this._queue.unshift(instruction);\n      this._dequeueInstruction();\n    });\n  }\n\n  /**@internal */\n  _dequeueInstruction(instructionCount: number = 0): Promise<PipelineResult | void> {\n    return Promise.resolve().then(() => {\n      if (this.isNavigating && !instructionCount) {\n        // ts complains about inconsistent returns without void 0\n        return void 0;\n      }\n\n      let instruction = this._queue.shift();\n      this._queue.length = 0;\n\n      if (!instruction) {\n        // ts complains about inconsistent returns without void 0\n        return void 0;\n      }\n\n      this.isNavigating = true;\n\n      let navtracker: number = this.history.getState('NavigationTracker');\n      let currentNavTracker = this.currentNavigationTracker;\n\n      if (!navtracker && !currentNavTracker) {\n        this.isNavigatingFirst = true;\n        this.isNavigatingNew = true;\n      } else if (!navtracker) {\n        this.isNavigatingNew = true;\n      } else if (!currentNavTracker) {\n        this.isNavigatingRefresh = true;\n      } else if (currentNavTracker < navtracker) {\n        this.isNavigatingForward = true;\n      } else if (currentNavTracker > navtracker) {\n        this.isNavigatingBack = true;\n      } if (!navtracker) {\n        navtracker = Date.now();\n        this.history.setState('NavigationTracker', navtracker);\n      }\n      this.currentNavigationTracker = navtracker;\n\n      instruction.previousInstruction = this.currentInstruction;\n\n      let maxInstructionCount = this.maxInstructionCount;\n\n      if (!instructionCount) {\n        this.events.publish(RouterEvent.Processing, { instruction });\n      } else if (instructionCount === maxInstructionCount - 1) {\n        logger.error(`${instructionCount + 1} navigation instructions have been attempted without success. Restoring last known good location.`);\n        restorePreviousLocation(this);\n        return this._dequeueInstruction(instructionCount + 1);\n      } else if (instructionCount > maxInstructionCount) {\n        throw new Error('Maximum navigation attempts exceeded. Giving up.');\n      }\n\n      let pipeline = this.pipelineProvider.createPipeline(!this.couldDeactivate);\n\n      return pipeline\n        .run(instruction)\n        .then(result => processResult(instruction, result, instructionCount, this))\n        .catch(error => {\n          return { output: error instanceof Error ? error : new Error(error) } as PipelineResult;\n        })\n        .then(result => resolveInstruction(instruction, result, !!instructionCount, this));\n    });\n  }\n\n  /**@internal */\n  _findViewModel(viewPort: ViewPort): ConfiguresRouter | undefined {\n    if (this.container.viewModel) {\n      return this.container.viewModel;\n    }\n\n    if (viewPort.container) {\n      let container = viewPort.container;\n\n      while (container) {\n        if (container.viewModel) {\n          this.container.viewModel = container.viewModel;\n          return container.viewModel;\n        }\n\n        container = container.parent;\n      }\n    }\n\n    return undefined;\n  }\n}\n\nconst processResult = (\n  instruction: NavigationInstruction,\n  result: PipelineResult,\n  instructionCount: number,\n  router: AppRouter\n): Promise<PipelineResult> => {\n  if (!(result && 'completed' in result && 'output' in result)) {\n    result = result || {} as PipelineResult;\n    result.output = new Error(`Expected router pipeline to return a navigation result, but got [${JSON.stringify(result)}] instead.`);\n  }\n\n  let finalResult: PipelineResult = null;\n  let navigationCommandResult = null;\n  if (isNavigationCommand(result.output)) {\n    navigationCommandResult = result.output.navigate(router);\n  } else {\n    finalResult = result;\n\n    if (!result.completed) {\n      if (result.output instanceof Error) {\n        logger.error(result.output.toString());\n      }\n\n      restorePreviousLocation(router);\n    }\n  }\n\n  return Promise.resolve(navigationCommandResult)\n    .then(_ => router._dequeueInstruction(instructionCount + 1))\n    .then(innerResult => finalResult || innerResult || result);\n};\n\nconst resolveInstruction = (\n  instruction: NavigationInstruction,\n  result: PipelineResult,\n  isInnerInstruction: boolean,\n  router: AppRouter\n): PipelineResult => {\n  instruction.resolve(result);\n\n  let eventAggregator = router.events;\n  let eventArgs = { instruction, result };\n  if (!isInnerInstruction) {\n    router.isNavigating = false;\n    router.isExplicitNavigation = false;\n    router.isExplicitNavigationBack = false;\n    router.isNavigatingFirst = false;\n    router.isNavigatingNew = false;\n    router.isNavigatingRefresh = false;\n    router.isNavigatingForward = false;\n    router.isNavigatingBack = false;\n    router.couldDeactivate = false;\n\n    let eventName: string;\n\n    if (result.output instanceof Error) {\n      eventName = RouterEvent.Error;\n    } else if (!result.completed) {\n      eventName = RouterEvent.Canceled;\n    } else {\n      let queryString = instruction.queryString ? ('?' + instruction.queryString) : '';\n      router.history.previousLocation = instruction.fragment + queryString;\n      eventName = RouterEvent.Success;\n    }\n\n    eventAggregator.publish(eventName, eventArgs);\n    eventAggregator.publish(RouterEvent.Complete, eventArgs);\n  } else {\n    eventAggregator.publish(RouterEvent.ChildComplete, eventArgs);\n  }\n\n  return result;\n};\n\nconst restorePreviousLocation = (router: AppRouter): void => {\n  let previousLocation = router.history.previousLocation;\n  if (previousLocation) {\n    router.navigate(previousLocation, { trigger: false, replace: true });\n  } else if (router.fallbackRoute) {\n    router.navigate(router.fallbackRoute, { trigger: true, replace: true });\n  } else {\n    logger.error('Router navigation failed, and no previous location or fallbackRoute could be restored.');\n  }\n};\n","/**\n* The status of a Pipeline.\n*/\nexport const enum PipelineStatus {\n  Completed = 'completed',\n  Canceled = 'canceled',\n  Rejected = 'rejected',\n  Running = 'running'\n}\n","/**\n * A list of known router events used by the Aurelia router\n * to signal the pipeline has come to a certain state\n */\n// const enum is preserved in tsconfig\nexport const enum RouterEvent {\n  Processing = 'router:navigation:processing',\n  Error = 'router:navigation:error',\n  Canceled = 'router:navigation:canceled',\n  Complete = 'router:navigation:complete',\n  Success = 'router:navigation:success',\n  ChildComplete = 'router:navigation:child:complete'\n}\n","/**\n * Available pipeline slot names to insert interceptor into router pipeline\n */\n// const enum is preserved in tsconfig\nexport const enum PipelineSlotName {\n  /**\n   * Authorization slot. Invoked early in the pipeline,\n   * before `canActivate` hook of incoming route\n   */\n  Authorize = 'authorize',\n  /**\n   * Pre-activation slot. Invoked early in the pipeline,\n   * Invoked timing:\n   *   - after Authorization slot\n   *   - after canActivate hook on new view model\n   *   - before deactivate hook on old view model\n   *   - before activate hook on new view model\n   */\n  PreActivate = 'preActivate',\n  /**\n   * Pre-render slot. Invoked later in the pipeline\n   * Invokcation timing:\n   *   - after activate hook on new view model\n   *   - before commit step on new navigation instruction\n   */\n  PreRender = 'preRender',\n  /**\n   * Post-render slot. Invoked last in the pipeline\n   */\n  PostRender = 'postRender'\n}\n"],"names":["RouteRecognizer","Container","LogManager.getLogger","tslib_1.__extends","History","EventAggregator","PipelineStatus","RouterEvent","PipelineSlotName"],"mappings":"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"}