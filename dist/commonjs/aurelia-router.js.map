{"version":3,"file":"aurelia-router.js","sources":["../../src/navigation-instruction.ts","../../src/nav-model.ts","../../src/util.ts","../../src/router-configuration.ts","../../src/router.ts","../../src/next.ts","../../src/pipeline.ts","../../src/navigation-commands.ts","../../src/navigation-plan.ts","../../src/step-build-navigation-plan.ts","../../src/utilities-route-loading.ts","../../src/route-loader.ts","../../src/step-load-route.ts","../../src/step-commit-changes.ts","../../src/activation-strategy.ts","../../src/utilities-activation.ts","../../src/step-activation.ts","../../src/pipeline-provider.ts","../../src/app-router.ts","../../src/pipeline-status.ts","../../src/router-event.ts","../../src/pipeline-slot-name.ts"],"sourcesContent":["import { ViewPortInstruction, RouteConfig, ViewPort, LifecycleArguments, ViewPortComponent } from './interfaces';\r\nimport { Router } from './router';\r\nimport { ActivationStrategyType, InternalActivationStrategy } from './activation-strategy';\r\n\r\n/**\r\n * Initialization options for a navigation instruction\r\n */\r\nexport interface NavigationInstructionInit {\r\n  fragment: string;\r\n  queryString?: string;\r\n  params?: Record<string, any>;\r\n  queryParams?: Record<string, any>;\r\n  config: RouteConfig;\r\n  parentInstruction?: NavigationInstruction;\r\n  previousInstruction?: NavigationInstruction;\r\n  router: Router;\r\n  options?: Object;\r\n  plan?: Record<string, /*ViewPortInstruction*/any>;\r\n}\r\n\r\nexport interface ViewPortInstructionInit {\r\n  name: string;\r\n  strategy: ActivationStrategyType;\r\n  moduleId: string;\r\n  component: ViewPortComponent;\r\n}\r\n\r\n/**\r\n * Class used to represent an instruction during a navigation.\r\n */\r\nexport class NavigationInstruction {\r\n  /**\r\n   * The URL fragment.\r\n   */\r\n  fragment: string;\r\n\r\n  /**\r\n   * The query string.\r\n   */\r\n  queryString: string;\r\n\r\n  /**\r\n   * Parameters extracted from the route pattern.\r\n   */\r\n  params: any;\r\n\r\n  /**\r\n   * Parameters extracted from the query string.\r\n   */\r\n  queryParams: any;\r\n\r\n  /**\r\n   * The route config for the route matching this instruction.\r\n   */\r\n  config: RouteConfig;\r\n\r\n  /**\r\n   * The parent instruction, if this instruction was created by a child router.\r\n   */\r\n  parentInstruction: NavigationInstruction;\r\n\r\n  parentCatchHandler: any;\r\n\r\n  /**\r\n   * The instruction being replaced by this instruction in the current router.\r\n   */\r\n  previousInstruction: NavigationInstruction;\r\n\r\n  /**\r\n   * viewPort instructions to used activation.\r\n   */\r\n  viewPortInstructions: Record<string, /*ViewPortInstruction*/any>;\r\n\r\n  /**\r\n   * The router instance.\r\n   */\r\n  router: Router;\r\n\r\n  /**\r\n   * Current built viewport plan of this nav instruction\r\n   */\r\n  plan: Record<string, /*ViewPortPlan*/any> = null;\r\n\r\n  options: Record<string, any> = {};\r\n\r\n  /**@internal */\r\n  lifecycleArgs: LifecycleArguments;\r\n  /**@internal */\r\n  resolve?: (val?: any) => void;\r\n\r\n  constructor(init: NavigationInstructionInit) {\r\n    Object.assign(this, init);\r\n\r\n    this.params = this.params || {};\r\n    this.viewPortInstructions = {};\r\n\r\n    let ancestorParams = [];\r\n    let current: NavigationInstruction = this;\r\n    do {\r\n      let currentParams = Object.assign({}, current.params);\r\n      if (current.config && current.config.hasChildRouter) {\r\n        // remove the param for the injected child route segment\r\n        delete currentParams[current.getWildCardName()];\r\n      }\r\n\r\n      ancestorParams.unshift(currentParams);\r\n      current = current.parentInstruction;\r\n    } while (current);\r\n\r\n    let allParams = Object.assign({}, this.queryParams, ...ancestorParams);\r\n    this.lifecycleArgs = [allParams, this.config, this];\r\n  }\r\n\r\n  /**\r\n   * Gets an array containing this instruction and all child instructions for the current navigation.\r\n   */\r\n  getAllInstructions(): Array<NavigationInstruction> {\r\n    let instructions: NavigationInstruction[] = [this];\r\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\r\n\r\n    for (let key in viewPortInstructions) {\r\n      let childInstruction = viewPortInstructions[key].childNavigationInstruction;\r\n      if (childInstruction) {\r\n        instructions.push(...childInstruction.getAllInstructions());\r\n      }\r\n    }\r\n\r\n    return instructions;\r\n  }\r\n\r\n  /**\r\n   * Gets an array containing the instruction and all child instructions for the previous navigation.\r\n   * Previous instructions are no longer available after navigation completes.\r\n   */\r\n  getAllPreviousInstructions(): Array<NavigationInstruction> {\r\n    return this.getAllInstructions().map(c => c.previousInstruction).filter(c => c);\r\n  }\r\n\r\n  /**\r\n   * Adds a viewPort instruction. Returns the newly created instruction based on parameters\r\n   */\r\n  addViewPortInstruction(initOptions: ViewPortInstructionInit): /*ViewPortInstruction*/ any;\r\n  addViewPortInstruction(viewPortName: string, strategy: ActivationStrategyType, moduleId: string, component: any): /*ViewPortInstruction*/ any;\r\n  addViewPortInstruction(\r\n    nameOrInitOptions: string | ViewPortInstructionInit,\r\n    strategy?: ActivationStrategyType,\r\n    moduleId?: string,\r\n    component?: any\r\n  ): /*ViewPortInstruction*/ any {\r\n\r\n    let viewPortInstruction: ViewPortInstruction;\r\n    let viewPortName = typeof nameOrInitOptions === 'string' ? nameOrInitOptions : nameOrInitOptions.name;\r\n    const lifecycleArgs = this.lifecycleArgs;\r\n    const config: RouteConfig = Object.assign({}, lifecycleArgs[1], { currentViewPort: viewPortName });\r\n\r\n    if (typeof nameOrInitOptions === 'string') {\r\n      viewPortInstruction = {\r\n        name: nameOrInitOptions,\r\n        strategy: strategy,\r\n        moduleId: moduleId,\r\n        component: component,\r\n        childRouter: component.childRouter,\r\n        lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]] as LifecycleArguments\r\n      };\r\n    } else {\r\n      viewPortInstruction = {\r\n        name: viewPortName,\r\n        strategy: nameOrInitOptions.strategy,\r\n        component: nameOrInitOptions.component,\r\n        moduleId: nameOrInitOptions.moduleId,\r\n        childRouter: nameOrInitOptions.component.childRouter,\r\n        lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]] as LifecycleArguments\r\n      };\r\n    }\r\n\r\n    return this.viewPortInstructions[viewPortName] = viewPortInstruction;\r\n  }\r\n\r\n  /**\r\n   * Gets the name of the route pattern's wildcard parameter, if applicable.\r\n   */\r\n  getWildCardName(): string {\r\n    // todo: potential issue, or at least unsafe typings\r\n    let configRoute = this.config.route as string;\r\n    let wildcardIndex = configRoute.lastIndexOf('*');\r\n    return configRoute.substr(wildcardIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Gets the path and query string created by filling the route\r\n   * pattern's wildcard parameter with the matching param.\r\n   */\r\n  getWildcardPath(): string {\r\n    let wildcardName = this.getWildCardName();\r\n    let path = this.params[wildcardName] || '';\r\n    let queryString = this.queryString;\r\n\r\n    if (queryString) {\r\n      path += '?' + queryString;\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  /**\r\n   * Gets the instruction's base URL, accounting for wildcard route parameters.\r\n   */\r\n  getBaseUrl(): string {\r\n    let $encodeURI = encodeURI;\r\n    let fragment = decodeURI(this.fragment);\r\n\r\n    if (fragment === '') {\r\n      let nonEmptyRoute = this.router.routes.find(route => {\r\n        return route.name === this.config.name &&\r\n          route.route !== '';\r\n      });\r\n      if (nonEmptyRoute) {\r\n        fragment = nonEmptyRoute.route as any;\r\n      }\r\n    }\r\n\r\n    if (!this.params) {\r\n      return $encodeURI(fragment);\r\n    }\r\n\r\n    let wildcardName = this.getWildCardName();\r\n    let path = this.params[wildcardName] || '';\r\n\r\n    if (!path) {\r\n      return $encodeURI(fragment);\r\n    }\r\n\r\n    return $encodeURI(fragment.substr(0, fragment.lastIndexOf(path)));\r\n  }\r\n\r\n  /**\r\n   * Finalize a viewport instruction\r\n   * @internal\r\n   */\r\n  _commitChanges(waitToSwap: boolean): Promise<void> {\r\n    let router = this.router;\r\n    router.currentInstruction = this;\r\n\r\n    const previousInstruction = this.previousInstruction;\r\n    if (previousInstruction) {\r\n      previousInstruction.config.navModel.isActive = false;\r\n    }\r\n\r\n    this.config.navModel.isActive = true;\r\n\r\n    router.refreshNavigation();\r\n\r\n    let loads: Promise<void>[] = [];\r\n    let delaySwaps: ISwapPlan[] = [];\r\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\r\n\r\n    for (let viewPortName in viewPortInstructions) {\r\n      let viewPortInstruction = viewPortInstructions[viewPortName];\r\n      let viewPort = router.viewPorts[viewPortName];\r\n\r\n      if (!viewPort) {\r\n        throw new Error(`There was no router-view found in the view for ${viewPortInstruction.moduleId}.`);\r\n      }\r\n\r\n      let childNavInstruction = viewPortInstruction.childNavigationInstruction;\r\n      if (viewPortInstruction.strategy === InternalActivationStrategy.Replace) {\r\n        if (childNavInstruction && childNavInstruction.parentCatchHandler) {\r\n          loads.push(childNavInstruction._commitChanges(waitToSwap));\r\n        } else {\r\n          if (waitToSwap) {\r\n            delaySwaps.push({ viewPort, viewPortInstruction });\r\n          }\r\n          loads.push(\r\n            viewPort\r\n              .process(viewPortInstruction, waitToSwap)\r\n              .then(() => childNavInstruction\r\n                ? childNavInstruction._commitChanges(waitToSwap)\r\n                : Promise.resolve()\r\n              )\r\n          );\r\n        }\r\n      } else {\r\n        if (childNavInstruction) {\r\n          loads.push(childNavInstruction._commitChanges(waitToSwap));\r\n        }\r\n      }\r\n    }\r\n\r\n    return Promise\r\n      .all(loads)\r\n      .then(() => {\r\n        delaySwaps.forEach(x => x.viewPort.swap(x.viewPortInstruction));\r\n        return null;\r\n      })\r\n      .then(() => prune(this));\r\n  }\r\n\r\n  /**@internal */\r\n  _updateTitle(): void {\r\n    let router = this.router;\r\n    let title = this._buildTitle(router.titleSeparator);\r\n    if (title) {\r\n      router.history.setTitle(title);\r\n    }\r\n  }\r\n\r\n  /**@internal */\r\n  _buildTitle(separator: string = ' | '): string {\r\n    let title = '';\r\n    let childTitles = [];\r\n    let navModelTitle = this.config.navModel.title;\r\n    let instructionRouter = this.router;\r\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\r\n\r\n    if (navModelTitle) {\r\n      title = instructionRouter.transformTitle(navModelTitle);\r\n    }\r\n\r\n    for (let viewPortName in viewPortInstructions) {\r\n      let viewPortInstruction = viewPortInstructions[viewPortName];\r\n      let child_nav_instruction = viewPortInstruction.childNavigationInstruction;\r\n\r\n      if (child_nav_instruction) {\r\n        let childTitle = child_nav_instruction._buildTitle(separator);\r\n        if (childTitle) {\r\n          childTitles.push(childTitle);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (childTitles.length) {\r\n      title = childTitles.join(separator) + (title ? separator : '') + title;\r\n    }\r\n\r\n    if (instructionRouter.title) {\r\n      title += (title ? separator : '') + instructionRouter.transformTitle(instructionRouter.title);\r\n    }\r\n\r\n    return title;\r\n  }\r\n}\r\n\r\nconst prune = (instruction: NavigationInstruction): void => {\r\n  instruction.previousInstruction = null;\r\n  instruction.plan = null;\r\n};\r\n\r\ninterface ISwapPlan {\r\n  viewPort: ViewPort;\r\n  viewPortInstruction: ViewPortInstruction;\r\n}\r\n","import { Router } from './router';\r\nimport { RouteConfig } from './interfaces';\r\n\r\n/**\r\n* Class for storing and interacting with a route's navigation settings.\r\n*/\r\nexport class NavModel {\r\n\r\n  /**\r\n  * True if this nav item is currently active.\r\n  */\r\n  isActive: boolean = false;\r\n\r\n  /**\r\n  * The title.\r\n  */\r\n  title: string = null;\r\n\r\n  /**\r\n  * This nav item's absolute href.\r\n  */\r\n  href: string = null;\r\n\r\n  /**\r\n  * This nav item's relative href.\r\n  */\r\n  relativeHref: string = null;\r\n\r\n  /**\r\n  * Data attached to the route at configuration time.\r\n  */\r\n  settings: any = {};\r\n\r\n  /**\r\n  * The route config.\r\n  */\r\n  config: RouteConfig = null;\r\n\r\n  /**\r\n  * The router associated with this navigation model.\r\n  */\r\n  router: Router;\r\n\r\n  order: number | boolean;\r\n\r\n  constructor(router: Router, relativeHref: string) {\r\n    this.router = router;\r\n    this.relativeHref = relativeHref;\r\n  }\r\n\r\n  /**\r\n  * Sets the route's title and updates document.title.\r\n  *  If the a navigation is in progress, the change will be applied\r\n  *  to document.title when the navigation completes.\r\n  *\r\n  * @param title The new title.\r\n  */\r\n  setTitle(title: string): void {\r\n    this.title = title;\r\n\r\n    if (this.isActive) {\r\n      this.router.updateTitle();\r\n    }\r\n  }\r\n}\r\n","import { RouteConfig } from './interfaces';\r\n\r\nexport function _normalizeAbsolutePath(path: string, hasPushState: boolean, absolute: boolean = false) {\r\n  if (!hasPushState && path[0] !== '#') {\r\n    path = '#' + path;\r\n  }\r\n\r\n  if (hasPushState && absolute) {\r\n    path = path.substring(1, path.length);\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\nexport function _createRootedPath(fragment: string, baseUrl: string, hasPushState: boolean, absolute?: boolean) {\r\n  if (isAbsoluteUrl.test(fragment)) {\r\n    return fragment;\r\n  }\r\n\r\n  let path = '';\r\n\r\n  if (baseUrl.length && baseUrl[0] !== '/') {\r\n    path += '/';\r\n  }\r\n\r\n  path += baseUrl;\r\n\r\n  if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {\r\n    path += '/';\r\n  }\r\n\r\n  if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {\r\n    path = path.substring(0, path.length - 1);\r\n  }\r\n\r\n  return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);\r\n}\r\n\r\nexport function _resolveUrl(fragment: string, baseUrl: string, hasPushState?: boolean) {\r\n  if (isRootedPath.test(fragment)) {\r\n    return _normalizeAbsolutePath(fragment, hasPushState);\r\n  }\r\n\r\n  return _createRootedPath(fragment, baseUrl, hasPushState);\r\n}\r\n\r\nexport function _ensureArrayWithSingleRoutePerConfig(config: RouteConfig) {\r\n  let routeConfigs = [];\r\n\r\n  if (Array.isArray(config.route)) {\r\n    for (let i = 0, ii = config.route.length; i < ii; ++i) {\r\n      let current = Object.assign({}, config);\r\n      current.route = config.route[i];\r\n      routeConfigs.push(current);\r\n    }\r\n  } else {\r\n    routeConfigs.push(Object.assign({}, config));\r\n  }\r\n\r\n  return routeConfigs;\r\n}\r\n\r\nconst isRootedPath = /^#?\\//;\r\nconst isAbsoluteUrl = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\r\n","import { RouteConfig, PipelineStep, RouteConfigSpecifier } from './interfaces';\r\nimport { _ensureArrayWithSingleRoutePerConfig } from './util';\r\nimport { Router } from './router';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { PipelineSlotName } from './pipeline-slot-name';\r\n\r\n/**\r\n * Class used to configure a [[Router]] instance.\r\n *\r\n * @constructor\r\n */\r\nexport class RouterConfiguration {\r\n  instructions: Array<(router: Router) => void> = [];\r\n  options: {\r\n    [key: string]: any;\r\n    compareQueryParams?: boolean;\r\n    root?: string;\r\n    pushState?: boolean;\r\n    hashChange?: boolean;\r\n    silent?: boolean;\r\n  } = {};\r\n  pipelineSteps: Array<{ name: string, step: Function | PipelineStep }> = [];\r\n  title: string;\r\n  titleSeparator: string;\r\n  unknownRouteConfig: RouteConfigSpecifier;\r\n  viewPortDefaults: Record<string, any>;\r\n\r\n  /**@internal */\r\n  _fallbackRoute: string;\r\n\r\n  /**\r\n   * Adds a step to be run during the [[Router]]'s navigation pipeline.\r\n   *\r\n   * @param name The name of the pipeline slot to insert the step into.\r\n   * @param step The pipeline step.\r\n   * @chainable\r\n   */\r\n  addPipelineStep(name: string, step: Function | PipelineStep): RouterConfiguration {\r\n    if (step === null || step === undefined) {\r\n      throw new Error('Pipeline step cannot be null or undefined.');\r\n    }\r\n    this.pipelineSteps.push({ name, step });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a step to be run during the [[Router]]'s authorize pipeline slot.\r\n   *\r\n   * @param step The pipeline step.\r\n   * @chainable\r\n   */\r\n  addAuthorizeStep(step: Function | PipelineStep): RouterConfiguration {\r\n    return this.addPipelineStep(PipelineSlotName.Authorize, step);\r\n  }\r\n\r\n  /**\r\n   * Adds a step to be run during the [[Router]]'s preActivate pipeline slot.\r\n   *\r\n   * @param step The pipeline step.\r\n   * @chainable\r\n   */\r\n  addPreActivateStep(step: Function | PipelineStep): RouterConfiguration {\r\n    return this.addPipelineStep(PipelineSlotName.PreActivate, step);\r\n  }\r\n\r\n  /**\r\n   * Adds a step to be run during the [[Router]]'s preRender pipeline slot.\r\n   *\r\n   * @param step The pipeline step.\r\n   * @chainable\r\n   */\r\n  addPreRenderStep(step: Function | PipelineStep): RouterConfiguration {\r\n    return this.addPipelineStep(PipelineSlotName.PreRender, step);\r\n  }\r\n\r\n  /**\r\n   * Adds a step to be run during the [[Router]]'s postRender pipeline slot.\r\n   *\r\n   * @param step The pipeline step.\r\n   * @chainable\r\n   */\r\n  addPostRenderStep(step: Function | PipelineStep): RouterConfiguration {\r\n    return this.addPipelineStep(PipelineSlotName.PostRender, step);\r\n  }\r\n\r\n  /**\r\n   * Configures a route that will be used if there is no previous location available on navigation cancellation.\r\n   *\r\n   * @param fragment The URL fragment to use as the navigation destination.\r\n   * @chainable\r\n   */\r\n  fallbackRoute(fragment: string): RouterConfiguration {\r\n    this._fallbackRoute = fragment;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Maps one or more routes to be registered with the router.\r\n   *\r\n   * @param route The [[RouteConfig]] to map, or an array of [[RouteConfig]] to map.\r\n   * @chainable\r\n   */\r\n  map(route: RouteConfig | RouteConfig[]): RouterConfiguration {\r\n    if (Array.isArray(route)) {\r\n      route.forEach(r => this.map(r));\r\n      return this;\r\n    }\r\n\r\n    return this.mapRoute(route);\r\n  }\r\n\r\n  /**\r\n   * Configures defaults to use for any view ports.\r\n   *\r\n   * @param viewPortConfig a view port configuration object to use as a\r\n   *  default, of the form { viewPortName: { moduleId } }.\r\n   * @chainable\r\n   */\r\n  useViewPortDefaults(viewPortConfig: Record<string, { [key: string]: any; moduleId: string }>): RouterConfiguration {\r\n    this.viewPortDefaults = viewPortConfig;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Maps a single route to be registered with the router.\r\n   *\r\n   * @param route The [[RouteConfig]] to map.\r\n   * @chainable\r\n   */\r\n  mapRoute(config: RouteConfig): RouterConfiguration {\r\n    this.instructions.push(router => {\r\n      let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\r\n\r\n      let navModel;\r\n      for (let i = 0, ii = routeConfigs.length; i < ii; ++i) {\r\n        let routeConfig = routeConfigs[i];\r\n        routeConfig.settings = routeConfig.settings || {};\r\n        if (!navModel) {\r\n          navModel = router.createNavModel(routeConfig);\r\n        }\r\n\r\n        router.addRoute(routeConfig, navModel);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an unknown route handler to be run when the URL fragment doesn't match any registered routes.\r\n   *\r\n   * @param config A string containing a moduleId to load, or a [[RouteConfig]], or a function that takes the\r\n   *  [[NavigationInstruction]] and selects a moduleId to load.\r\n   * @chainable\r\n   */\r\n  mapUnknownRoutes(config: RouteConfigSpecifier): RouterConfiguration {\r\n    this.unknownRouteConfig = config;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies the current configuration to the specified [[Router]].\r\n   *\r\n   * @param router The [[Router]] to apply the configuration to.\r\n   */\r\n  exportToRouter(router: Router): void {\r\n    let instructions = this.instructions;\r\n    for (let i = 0, ii = instructions.length; i < ii; ++i) {\r\n      instructions[i](router);\r\n    }\r\n\r\n    let { title, titleSeparator, unknownRouteConfig, _fallbackRoute, viewPortDefaults } = this;\r\n\r\n    if (title) {\r\n      router.title = title;\r\n    }\r\n\r\n    if (titleSeparator) {\r\n      router.titleSeparator = titleSeparator;\r\n    }\r\n\r\n    if (unknownRouteConfig) {\r\n      router.handleUnknownRoutes(unknownRouteConfig);\r\n    }\r\n\r\n    if (_fallbackRoute) {\r\n      router.fallbackRoute = _fallbackRoute;\r\n    }\r\n\r\n    if (viewPortDefaults) {\r\n      router.useViewPortDefaults(viewPortDefaults);\r\n    }\r\n\r\n    Object.assign(router.options, this.options);\r\n\r\n    let pipelineSteps = this.pipelineSteps;\r\n    let pipelineStepCount = pipelineSteps.length;\r\n    if (pipelineStepCount) {\r\n      if (!router.isRoot) {\r\n        throw new Error('Pipeline steps can only be added to the root router');\r\n      }\r\n\r\n      let pipelineProvider = router.pipelineProvider;\r\n      for (let i = 0, ii = pipelineStepCount; i < ii; ++i) {\r\n        let { name, step } = pipelineSteps[i];\r\n        pipelineProvider.addStep(name, step);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { RouteRecognizer, RouteHandler, ConfigurableRoute, State, RecognizedRoute } from 'aurelia-route-recognizer';\nimport { Container } from 'aurelia-dependency-injection';\nimport { History, NavigationOptions } from 'aurelia-history';\nimport { NavigationInstruction, NavigationInstructionInit } from './navigation-instruction';\nimport { NavModel } from './nav-model';\nimport { RouterConfiguration } from './router-configuration';\nimport {\n  _ensureArrayWithSingleRoutePerConfig,\n  _normalizeAbsolutePath,\n  _createRootedPath,\n  _resolveUrl\n} from './util';\nimport { NavigationResult, RouteConfig, RouteConfigSpecifier, ViewPortInstruction } from './interfaces';\nimport { PipelineProvider } from './pipeline-provider';\n\n/**@internal */\ndeclare module 'aurelia-history' {\n  interface History {\n    // This is wrong, as it's an implementation detail from aurelia-history-browser\n    // but we are poking it in here so probably will need to make it official in `aurelia-history`\n    /**\n     * A private flag of Aurelia History implementation to indicate if push state should be used\n     */\n    _hasPushState: boolean;\n\n    previousLocation: string;\n  }\n}\n\n/**@internal */\ndeclare module 'aurelia-route-recognizer' {\n  interface State {\n    types: {\n      dynamics: DynamicSegment;\n      stars: StarSegment;\n    };\n  }\n\n  interface RouteHandler {\n    navigationStrategy?: (instruction: NavigationInstruction) => any;\n  }\n\n  interface RecognizedRoute {\n    config?: RouteConfig;\n    queryParams?: Record<string, any>;\n  }\n}\n\ntype RouterConfigurationResolution = RouterConfiguration | ((cfg: RouterConfiguration) => void | RouterConfiguration | Promise<RouterConfiguration>);\n\n/**\n * The primary class responsible for handling routing and navigation.\n */\nexport class Router {\n\n  /**\n   * Container associated with this router. Also used to create child container for creating child router.\n   */\n  container: Container;\n\n  /**\n   * History instance of Aurelia abstract class for wrapping platform history global object\n   */\n  history: History;\n\n  /**\n   * A registry of registered viewport. Will be used to handle process navigation instruction route loading\n   * and dom swapping\n   */\n  viewPorts: Record<string, any>;\n\n  /**\n   * List of route configs registered with this router\n   */\n  routes: RouteConfig[];\n\n  /**\n  * The [[Router]]'s current base URL, typically based on the [[Router.currentInstruction]].\n  */\n  baseUrl: string;\n\n  /**\n   * If defined, used in generation of document title for [[Router]]'s routes.\n   */\n  title: string | undefined;\n\n  /**\n   * The separator used in the document title between [[Router]]'s routes.\n   */\n  titleSeparator: string | undefined;\n\n  /**\n   * True if the [[Router]] has been configured.\n   */\n  isConfigured: boolean;\n\n  /**\n   * True if the [[Router]] is currently processing a navigation.\n   */\n  isNavigating: boolean;\n\n  /**\n   * True if the [[Router]] is navigating due to explicit call to navigate function(s).\n   */\n  isExplicitNavigation: boolean;\n\n  /**\n   * True if the [[Router]] is navigating due to explicit call to navigateBack function.\n   */\n  isExplicitNavigationBack: boolean;\n\n  /**\n   * True if the [[Router]] is navigating into the app for the first time in the browser session.\n   */\n  isNavigatingFirst: boolean;\n\n  /**\n   * True if the [[Router]] is navigating to a page instance not in the browser session history.\n   */\n  isNavigatingNew: boolean;\n\n  /**\n   * True if the [[Router]] is navigating forward in the browser session history.\n   */\n  isNavigatingForward: boolean;\n\n  /**\n   * True if the [[Router]] is navigating back in the browser session history.\n   */\n  isNavigatingBack: boolean;\n\n  /**\n   * True if the [[Router]] is navigating due to a browser refresh.\n   */\n  isNavigatingRefresh: boolean;\n\n  /**\n   * True if the previous instruction successfully completed the CanDeactivatePreviousStep in the current navigation.\n   */\n  couldDeactivate: boolean;\n\n  /**\n   * The currently active navigation tracker.\n   */\n  currentNavigationTracker: number;\n\n  /**\n   * The navigation models for routes that specified [[RouteConfig.nav]].\n   */\n  navigation: NavModel[];\n\n  /**\n   * The currently active navigation instruction.\n   */\n  currentInstruction: NavigationInstruction;\n\n  /**\n   * The parent router, or null if this instance is not a child router.\n   */\n  parent: Router = null;\n\n  options: any = {};\n\n  /**\n   * The defaults used when a viewport lacks specified content\n   */\n  viewPortDefaults: Record<string, any> = {};\n\n  /**@internal */\n  catchAllHandler: (instruction: NavigationInstruction) => NavigationInstruction | Promise<NavigationInstruction>;\n  /**@internal */\n  fallbackRoute: string;\n  /**@internal */\n  pipelineProvider: PipelineProvider;\n  /**@internal */\n  _fallbackOrder: number;\n  /**@internal */\n  _recognizer: RouteRecognizer;\n  /**@internal */\n  _childRecognizer: RouteRecognizer;\n  /**@internal */\n  _configuredPromise: Promise<any>;\n  /**@internal */\n  _resolveConfiguredPromise: (value?: any) => void;\n\n  /**\n   * Extension point to transform the document title before it is built and displayed.\n   * By default, child routers delegate to the parent router, and the app router\n   * returns the title unchanged.\n   */\n  transformTitle: (title: string) => string = (title: string) => {\n    if (this.parent) {\n      return this.parent.transformTitle(title);\n    }\n    return title;\n  }\n\n  /**\n   * @param container The [[Container]] to use when child routers.\n   * @param history The [[History]] implementation to delegate navigation requests to.\n   */\n  constructor(container: Container, history: History) {\n    this.container = container;\n    this.history = history;\n    this.reset();\n  }\n\n  /**\n   * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\n   * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\n   */\n  reset() {\n    this.viewPorts = {};\n    this.routes = [];\n    this.baseUrl = '';\n    this.isConfigured = false;\n    this.isNavigating = false;\n    this.isExplicitNavigation = false;\n    this.isExplicitNavigationBack = false;\n    this.isNavigatingFirst = false;\n    this.isNavigatingNew = false;\n    this.isNavigatingRefresh = false;\n    this.isNavigatingForward = false;\n    this.isNavigatingBack = false;\n    this.couldDeactivate = false;\n    this.navigation = [];\n    this.currentInstruction = null;\n    this.viewPortDefaults = {};\n    this._fallbackOrder = 100;\n    this._recognizer = new RouteRecognizer();\n    this._childRecognizer = new RouteRecognizer();\n    this._configuredPromise = new Promise(resolve => {\n      this._resolveConfiguredPromise = resolve;\n    });\n  }\n\n  /**\n   * Gets a value indicating whether or not this [[Router]] is the root in the router tree. I.e., it has no parent.\n   */\n  get isRoot(): boolean {\n    return !this.parent;\n  }\n\n  /**\n   * Registers a viewPort to be used as a rendering target for activated routes.\n   *\n   * @param viewPort The viewPort.\n   * @param name The name of the viewPort. 'default' if unspecified.\n   */\n  registerViewPort(viewPort: /*ViewPort*/any, name?: string): void {\n    name = name || 'default';\n    this.viewPorts[name] = viewPort;\n  }\n\n  /**\n   * Returns a Promise that resolves when the router is configured.\n   */\n  ensureConfigured(): Promise<void> {\n    return this._configuredPromise;\n  }\n\n  /**\n   * Configures the router.\n   *\n   * @param callbackOrConfig The [[RouterConfiguration]] or a callback that takes a [[RouterConfiguration]].\n   */\n  configure(callbackOrConfig: RouterConfiguration | ((config: RouterConfiguration) => RouterConfiguration)): Promise<void> {\n    this.isConfigured = true;\n\n    let result: RouterConfigurationResolution = callbackOrConfig as RouterConfiguration;\n    let config: RouterConfiguration;\n    if (typeof callbackOrConfig === 'function') {\n      config = new RouterConfiguration();\n      result = callbackOrConfig(config);\n    }\n\n    return Promise\n      .resolve(result)\n      .then((c) => {\n        if (c && (c as RouterConfiguration).exportToRouter) {\n          config = c;\n        }\n\n        config.exportToRouter(this);\n        this.isConfigured = true;\n        this._resolveConfiguredPromise();\n      });\n  }\n\n  /**\n   * Navigates to a new location.\n   *\n   * @param fragment The URL fragment to use as the navigation destination.\n   * @param options The navigation options.\n   */\n  navigate(fragment: string, options?: NavigationOptions): NavigationResult {\n    if (!this.isConfigured && this.parent) {\n      return this.parent.navigate(fragment, options);\n    }\n\n    this.isExplicitNavigation = true;\n    return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);\n  }\n\n  /**\n   * Navigates to a new location corresponding to the route and params specified. Equivallent to [[Router.generate]] followed\n   * by [[Router.navigate]].\n   *\n   * @param route The name of the route to use when generating the navigation location.\n   * @param params The route parameters to be used when populating the route pattern.\n   * @param options The navigation options.\n   */\n  navigateToRoute(route: string, params?: any, options?: NavigationOptions): NavigationResult {\n    let path = this.generate(route, params);\n    return this.navigate(path, options);\n  }\n\n  /**\n   * Navigates back to the most recent location in history.\n   */\n  navigateBack(): void {\n    this.isExplicitNavigationBack = true;\n    this.history.navigateBack();\n  }\n\n  /**\n   * Creates a child router of the current router.\n   *\n   * @param container The [[Container]] to provide to the child router. Uses the current [[Router]]'s [[Container]] if unspecified.\n   * @returns {Router} The new child Router.\n   */\n  createChild(container?: Container): Router {\n    let childRouter = new Router(container || this.container.createChild(), this.history);\n    childRouter.parent = this;\n    return childRouter;\n  }\n\n  /**\n   * Generates a URL fragment matching the specified route pattern.\n   *\n   * @param name The name of the route whose pattern should be used to generate the fragment.\n   * @param params The route params to be used to populate the route pattern.\n   * @param options If options.absolute = true, then absolute url will be generated; otherwise, it will be relative url.\n   * @returns {string} A string containing the generated URL fragment.\n   */\n  generate(nameOrRoute: string | RouteConfig, params: any = {}, options: any = {}): string {\n    // A child recognizer generates routes for potential child routes. Any potential child route is added\n    // to the childRoute property of params for the childRouter to recognize. When generating routes, we\n    // use the childRecognizer when childRoute params are available to generate a child router enabled route.\n    let recognizer = 'childRoute' in params ? this._childRecognizer : this._recognizer;\n    let hasRoute = recognizer.hasRoute(nameOrRoute as string | RouteHandler);\n    if (!hasRoute) {\n      if (this.parent) {\n        return this.parent.generate(nameOrRoute, params, options);\n      }\n      throw new Error(`A route with name '${nameOrRoute}' could not be found. Check that \\`name: '${nameOrRoute}'\\` was specified in the route's config.`);\n    }\n    let path = recognizer.generate(nameOrRoute as string | RouteHandler, params);\n    let rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);\n    return options.absolute ? `${this.history.getAbsoluteRoot()}${rootedPath}` : rootedPath;\n  }\n\n  /**\n   * Creates a [[NavModel]] for the specified route config.\n   *\n   * @param config The route config.\n   */\n  createNavModel(config: RouteConfig): NavModel {\n    let navModel = new NavModel(\n      this,\n      'href' in config\n        ? config.href\n        // potential error when config.route is a string[] ?\n        : config.route as string);\n    navModel.title = config.title;\n    navModel.order = config.nav;\n    navModel.href = config.href;\n    navModel.settings = config.settings;\n    navModel.config = config;\n\n    return navModel;\n  }\n\n  /**\n   * Registers a new route with the router.\n   *\n   * @param config The [[RouteConfig]].\n   * @param navModel The [[NavModel]] to use for the route. May be omitted for single-pattern routes.\n   */\n  addRoute(config: RouteConfig, navModel?: NavModel): void {\n    if (Array.isArray(config.route)) {\n      let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\n      // the following is wrong. todo: fix this after TS refactoring release\n      routeConfigs.forEach(this.addRoute.bind(this));\n      return;\n    }\n\n    validateRouteConfig(config);\n\n    if (!('viewPorts' in config) && !config.navigationStrategy) {\n      config.viewPorts = {\n        'default': {\n          moduleId: config.moduleId,\n          view: config.view\n        }\n      };\n    }\n\n    if (!navModel) {\n      navModel = this.createNavModel(config);\n    }\n\n    this.routes.push(config);\n\n    let path = config.route;\n    if (path.charAt(0) === '/') {\n      path = path.substr(1);\n    }\n    let caseSensitive = config.caseSensitive === true;\n    let state: State = this._recognizer.add({\n      path: path,\n      handler: config as RouteHandler,\n      caseSensitive: caseSensitive\n    } as ConfigurableRoute);\n\n    if (path) {\n      let settings = config.settings;\n      delete config.settings;\n      let withChild = JSON.parse(JSON.stringify(config));\n      config.settings = settings;\n      withChild.route = `${path}/*childRoute`;\n      withChild.hasChildRouter = true;\n      this._childRecognizer.add({\n        path: withChild.route,\n        handler: withChild,\n        caseSensitive: caseSensitive\n      });\n\n      withChild.navModel = navModel;\n      withChild.settings = config.settings;\n      withChild.navigationStrategy = config.navigationStrategy;\n    }\n\n    config.navModel = navModel;\n\n    let navigation = this.navigation;\n\n    if ((navModel.order || navModel.order === 0) && navigation.indexOf(navModel) === -1) {\n      if ((!navModel.href && navModel.href !== '') && (state.types.dynamics || state.types.stars)) {\n        throw new Error('Invalid route config for \"' + config.route + '\" : dynamic routes must specify an \"href:\" to be included in the navigation model.');\n      }\n\n      if (typeof navModel.order !== 'number') {\n        navModel.order = ++this._fallbackOrder;\n      }\n\n      navigation.push(navModel);\n      // this is a potential error / inconsistency between browsers\n      //\n      // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n      // If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other,\n      // but sorted with respect to all different elements.\n      // Note: the ECMAscript standard does not guarantee this behaviour,\n      // and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.\n      navigation.sort((a, b) => <any>a.order - <any>b.order);\n    }\n  }\n\n  /**\n   * Gets a value indicating whether or not this [[Router]] or one of its ancestors has a route registered with the specified name.\n   *\n   * @param name The name of the route to check.\n   */\n  hasRoute(name: string): boolean {\n    return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));\n  }\n\n  /**\n   * Gets a value indicating whether or not this [[Router]] has a route registered with the specified name.\n   *\n   * @param name The name of the route to check.\n   */\n  hasOwnRoute(name: string): boolean {\n    return this._recognizer.hasRoute(name);\n  }\n\n  /**\n   * Register a handler to use when the incoming URL fragment doesn't match any registered routes.\n   *\n   * @param config The moduleId, or a function that selects the moduleId, or a [[RouteConfig]].\n   */\n  handleUnknownRoutes(config?: RouteConfigSpecifier): void {\n    if (!config) {\n      throw new Error('Invalid unknown route handler');\n    }\n\n    this.catchAllHandler = instruction => {\n      return this\n        ._createRouteConfig(config, instruction)\n        .then(c => {\n          instruction.config = c;\n          return instruction;\n        });\n    };\n  }\n\n  /**\n   * Updates the document title using the current navigation instruction.\n   */\n  updateTitle(): void {\n    let parentRouter = this.parent;\n    if (parentRouter) {\n      return parentRouter.updateTitle();\n    }\n\n    let currentInstruction = this.currentInstruction;\n    if (currentInstruction) {\n      currentInstruction._updateTitle();\n    }\n    return undefined;\n  }\n\n  /**\n   * Updates the navigation routes with hrefs relative to the current location.\n   * Note: This method will likely move to a plugin in a future release.\n   */\n  refreshNavigation(): void {\n    let nav = this.navigation;\n\n    for (let i = 0, length = nav.length; i < length; i++) {\n      let current = nav[i];\n      if (!current.config.href) {\n        current.href = _createRootedPath(current.relativeHref, this.baseUrl, this.history._hasPushState);\n      } else {\n        current.href = _normalizeAbsolutePath(current.config.href, this.history._hasPushState);\n      }\n    }\n  }\n\n  /**\n   * Sets the default configuration for the view ports. This specifies how to\n   *  populate a view port for which no module is specified. The default is\n   *  an empty view/view-model pair.\n   */\n  useViewPortDefaults($viewPortDefaults: Record<string, any>): void {\n    // a workaround to have strong typings while not requiring to expose interface ViewPortInstruction\n    let viewPortDefaults: Record<string, ViewPortInstruction> = $viewPortDefaults;\n    for (let viewPortName in viewPortDefaults) {\n      let viewPortConfig = viewPortDefaults[viewPortName];\n      this.viewPortDefaults[viewPortName] = {\n        moduleId: viewPortConfig.moduleId\n      };\n    }\n  }\n\n  /**@internal */\n  _refreshBaseUrl(): void {\n    let parentRouter = this.parent;\n    if (parentRouter) {\n      this.baseUrl = generateBaseUrl(parentRouter, parentRouter.currentInstruction);\n    }\n  }\n\n  /**@internal */\n  _createNavigationInstruction(url: string = '', parentInstruction: NavigationInstruction = null): Promise<NavigationInstruction> {\n    let fragment = url;\n    let queryString = '';\n\n    let queryIndex = url.indexOf('?');\n    if (queryIndex !== -1) {\n      fragment = url.substr(0, queryIndex);\n      queryString = url.substr(queryIndex + 1);\n    }\n\n    let urlRecognizationResults = this._recognizer.recognize(url) as IRouteRecognizationResults;\n    if (!urlRecognizationResults || !urlRecognizationResults.length) {\n      urlRecognizationResults = this._childRecognizer.recognize(url) as IRouteRecognizationResults;\n    }\n\n    let instructionInit: NavigationInstructionInit = {\n      fragment,\n      queryString,\n      config: null,\n      parentInstruction,\n      previousInstruction: this.currentInstruction,\n      router: this,\n      options: {\n        compareQueryParams: this.options.compareQueryParams\n      }\n    };\n\n    let result: Promise<NavigationInstruction>;\n\n    if (urlRecognizationResults && urlRecognizationResults.length) {\n      let first = urlRecognizationResults[0];\n      let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n        params: first.params,\n        queryParams: first.queryParams || urlRecognizationResults.queryParams,\n        config: first.config || first.handler\n      }));\n\n      if (typeof first.handler === 'function') {\n        result = evaluateNavigationStrategy(instruction, first.handler, first);\n      } else if (first.handler && typeof first.handler.navigationStrategy === 'function') {\n        result = evaluateNavigationStrategy(instruction, first.handler.navigationStrategy, first.handler);\n      } else {\n        result = Promise.resolve(instruction);\n      }\n    } else if (this.catchAllHandler) {\n      let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n        params: { path: fragment },\n        queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\n        config: null // config will be created by the catchAllHandler\n      }));\n\n      result = evaluateNavigationStrategy(instruction, this.catchAllHandler);\n    } else if (this.parent) {\n      let router = this._parentCatchAllHandler(this.parent);\n\n      if (router) {\n        let newParentInstruction = this._findParentInstructionFromRouter(router, parentInstruction);\n\n        let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n          params: { path: fragment },\n          queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\n          router: router,\n          parentInstruction: newParentInstruction,\n          parentCatchHandler: true,\n          config: null // config will be created by the chained parent catchAllHandler\n        }));\n\n        result = evaluateNavigationStrategy(instruction, router.catchAllHandler);\n      }\n    }\n\n    if (result && parentInstruction) {\n      this.baseUrl = generateBaseUrl(this.parent, parentInstruction);\n    }\n\n    return result || Promise.reject(new Error(`Route not found: ${url}`));\n  }\n\n  /**@internal */\n  _findParentInstructionFromRouter(router: Router, instruction: NavigationInstruction): NavigationInstruction {\n    if (instruction.router === router) {\n      instruction.fragment = router.baseUrl; // need to change the fragment in case of a redirect instead of moduleId\n      return instruction;\n    } else if (instruction.parentInstruction) {\n      return this._findParentInstructionFromRouter(router, instruction.parentInstruction);\n    }\n    return undefined;\n  }\n\n  /**@internal */\n  _parentCatchAllHandler(router: Router): Router | false {\n    if (router.catchAllHandler) {\n      return router;\n    } else if (router.parent) {\n      return this._parentCatchAllHandler(router.parent);\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _createRouteConfig(config: RouteConfigSpecifier, instruction: NavigationInstruction): Promise<RouteConfig> {\n    return Promise\n      .resolve(config)\n      .then((c: any) => {\n        if (typeof c === 'string') {\n          return { moduleId: c } as RouteConfig;\n        } else if (typeof c === 'function') {\n          return c(instruction);\n        }\n\n        return c;\n      })\n      // typing here could be either RouteConfig or RedirectConfig\n      // but temporarily treat both as RouteConfig\n      // todo: improve typings precision\n      .then((c: string | RouteConfig) => typeof c === 'string' ? { moduleId: c } as RouteConfig : c)\n      .then((c: RouteConfig) => {\n        c.route = instruction.params.path;\n        validateRouteConfig(c);\n\n        if (!c.navModel) {\n          c.navModel = this.createNavModel(c);\n        }\n\n        return c;\n      });\n  }\n}\n\n/* @internal exported for unit testing */\nexport const generateBaseUrl = (router: Router, instruction: NavigationInstruction): string => {\n  return `${router.baseUrl || ''}${instruction.getBaseUrl() || ''}`;\n};\n\n/* @internal exported for unit testing */\nexport const validateRouteConfig = (config: RouteConfig): void => {\n  if (typeof config !== 'object') {\n    throw new Error('Invalid Route Config');\n  }\n\n  if (typeof config.route !== 'string') {\n    let name = config.name || '(no name)';\n    throw new Error('Invalid Route Config for \"' + name + '\": You must specify a \"route:\" pattern.');\n  }\n\n  if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {\n    throw new Error('Invalid Route Config for \"' + config.route + '\": You must specify a \"moduleId:\", \"redirect:\", \"navigationStrategy:\", or \"viewPorts:\".');\n  }\n};\n\n/* @internal exported for unit testing */\nexport const evaluateNavigationStrategy = (\n  instruction: NavigationInstruction,\n  evaluator: Function,\n  context?: any\n): Promise<NavigationInstruction> => {\n  return Promise\n    .resolve(evaluator.call(context, instruction))\n    .then(() => {\n      if (!('viewPorts' in instruction.config)) {\n        instruction.config.viewPorts = {\n          'default': {\n            moduleId: instruction.config.moduleId\n          }\n        };\n      }\n\n      return instruction;\n    });\n};\n\ninterface IRouteRecognizationResults extends Array<RecognizedRoute> {\n  queryParams: Record<string, any>;\n}\n","import { PipelineStatus } from './pipeline-status';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { Next, StepRunnerFunction, NextCompletionHandler } from './interfaces';\r\n\r\n/**@internal exported for unit testing */\r\nexport const createNextFn = (instruction: NavigationInstruction, steps: StepRunnerFunction[]): Next => {\r\n  let index = -1;\r\n  const next: Next = function() {\r\n    index++;\r\n\r\n    if (index < steps.length) {\r\n      let currentStep = steps[index];\r\n\r\n      try {\r\n        return currentStep(instruction, next);\r\n      } catch (e) {\r\n        return next.reject(e);\r\n      }\r\n    } else {\r\n      return next.complete();\r\n    }\r\n  } as Next;\r\n\r\n  next.complete = createCompletionHandler(next, PipelineStatus.Completed);\r\n  next.cancel = createCompletionHandler(next, PipelineStatus.Canceled);\r\n  next.reject = createCompletionHandler(next, PipelineStatus.Rejected);\r\n\r\n  return next;\r\n};\r\n\r\n/**@internal exported for unit testing */\r\nexport const createCompletionHandler = (next: Next, status: PipelineStatus): NextCompletionHandler => {\r\n  return (output: any) => Promise\r\n    .resolve({\r\n      status,\r\n      output,\r\n      completed: status === PipelineStatus.Completed\r\n    });\r\n};\r\n","import { PipelineStep, PipelineResult, Next, StepRunnerFunction, IPipelineSlot } from './interfaces';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { createNextFn } from './next';\r\n\r\n/**\r\n * The class responsible for managing and processing the navigation pipeline.\r\n */\r\nexport class Pipeline {\r\n  /**\r\n   * The pipeline steps. And steps added via addStep will be converted to a function\r\n   * The actualy running functions with correct step contexts of this pipeline\r\n   */\r\n  steps: StepRunnerFunction[] = [];\r\n\r\n  /**\r\n   * Adds a step to the pipeline.\r\n   *\r\n   * @param step The pipeline step.\r\n   */\r\n  addStep(step: StepRunnerFunction | PipelineStep | IPipelineSlot): Pipeline {\r\n    let run;\r\n\r\n    if (typeof step === 'function') {\r\n      run = step;\r\n    } else if (typeof step.getSteps === 'function') {\r\n      // getSteps is to enable support open slots\r\n      // where devs can add multiple steps into the same slot name\r\n      let steps = step.getSteps();\r\n      for (let i = 0, l = steps.length; i < l; i++) {\r\n        this.addStep(steps[i]);\r\n      }\r\n\r\n      return this;\r\n    } else {\r\n      run = (step as PipelineStep).run.bind(step);\r\n    }\r\n\r\n    this.steps.push(run);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Runs the pipeline.\r\n   *\r\n   * @param instruction The navigation instruction to process.\r\n   */\r\n  run(instruction: NavigationInstruction): Promise<PipelineResult> {\r\n    const nextFn = createNextFn(instruction, this.steps);\r\n    return nextFn();\r\n  }\r\n}\r\n","import { NavigationOptions } from 'aurelia-history';\r\nimport { Router } from './router';\r\n\r\n/**@internal */\r\ndeclare module 'aurelia-history' {\r\n  interface NavigationOptions {\r\n    useAppRouter?: boolean;\r\n  }\r\n}\r\n\r\n/**\r\n* When a navigation command is encountered, the current navigation\r\n* will be cancelled and control will be passed to the navigation\r\n* command so it can determine the correct action.\r\n*/\r\nexport interface NavigationCommand {\r\n  navigate: (router: Router) => void;\r\n  /**@internal */\r\n  shouldContinueProcessing?: boolean;\r\n  /**@internal */\r\n  setRouter?: (router: Router) => void;\r\n}\r\n\r\n/**\r\n* Determines if the provided object is a navigation command.\r\n* A navigation command is anything with a navigate method.\r\n*\r\n* @param obj The object to check.\r\n*/\r\nexport function isNavigationCommand(obj: any): obj is NavigationCommand {\r\n  return obj && typeof obj.navigate === 'function';\r\n}\r\n\r\n/**\r\n* Used during the activation lifecycle to cause a redirect.\r\n*/\r\nexport class Redirect implements NavigationCommand {\r\n\r\n  url: string;\r\n  /**@internal */\r\n  options: NavigationOptions;\r\n  /**@internal */\r\n  shouldContinueProcessing: boolean;\r\n\r\n  private router: Router;\r\n\r\n  /**\r\n   * @param url The URL fragment to use as the navigation destination.\r\n   * @param options The navigation options.\r\n   */\r\n  constructor(url: string, options: NavigationOptions = {}) {\r\n    this.url = url;\r\n    this.options = Object.assign({ trigger: true, replace: true }, options);\r\n    this.shouldContinueProcessing = false;\r\n  }\r\n\r\n  /**\r\n   * Called by the activation system to set the child router.\r\n   *\r\n   * @param router The router.\r\n   */\r\n  setRouter(router: Router): void {\r\n    this.router = router;\r\n  }\r\n\r\n  /**\r\n   * Called by the navigation pipeline to navigate.\r\n   *\r\n   * @param appRouter The router to be redirected.\r\n   */\r\n  navigate(appRouter: Router): void {\r\n    let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\r\n    navigatingRouter.navigate(this.url, this.options);\r\n  }\r\n}\r\n\r\n/**\r\n * Used during the activation lifecycle to cause a redirect to a named route.\r\n */\r\nexport class RedirectToRoute implements NavigationCommand {\r\n\r\n  route: string;\r\n  params: any;\r\n  /**@internal */\r\n  options: NavigationOptions;\r\n\r\n  /**@internal */\r\n  shouldContinueProcessing: boolean;\r\n\r\n  /**@internal */\r\n  router: Router;\r\n\r\n  /**\r\n   * @param route The name of the route.\r\n   * @param params The parameters to be sent to the activation method.\r\n   * @param options The options to use for navigation.\r\n   */\r\n  constructor(route: string, params: any = {}, options: NavigationOptions = {}) {\r\n    this.route = route;\r\n    this.params = params;\r\n    this.options = Object.assign({ trigger: true, replace: true }, options);\r\n    this.shouldContinueProcessing = false;\r\n  }\r\n\r\n  /**\r\n   * Called by the activation system to set the child router.\r\n   *\r\n   * @param router The router.\r\n   */\r\n  setRouter(router: Router): void {\r\n    this.router = router;\r\n  }\r\n\r\n  /**\r\n   * Called by the navigation pipeline to navigate.\r\n   *\r\n   * @param appRouter The router to be redirected.\r\n   */\r\n  navigate(appRouter: Router): void {\r\n    let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\r\n    navigatingRouter.navigateToRoute(this.route, this.params, this.options);\r\n  }\r\n}\r\n","import { ViewPortPlan, ViewPortInstruction, RouteConfig, ViewPort } from './interfaces';\r\nimport { Redirect } from './navigation-commands';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { InternalActivationStrategy, ActivationStrategyType } from './activation-strategy';\r\n\r\ntype ViewPortPlansRecord = Record<string, ViewPortPlan>;\r\n\r\n/**\r\n * @internal exported for unit testing\r\n */\r\nexport function _buildNavigationPlan(\r\n  instruction: NavigationInstruction,\r\n  forceLifecycleMinimum?: boolean\r\n): Promise<ViewPortPlansRecord | Redirect> {\r\n  let config = instruction.config;\r\n\r\n  if ('redirect' in config) {\r\n    return buildRedirectPlan(instruction);\r\n  }\r\n\r\n  const prevInstruction = instruction.previousInstruction;\r\n  const defaultViewPortConfigs = instruction.router.viewPortDefaults;\r\n\r\n  if (prevInstruction) {\r\n    return buildTransitionPlans(instruction, prevInstruction, defaultViewPortConfigs, forceLifecycleMinimum);\r\n  }\r\n\r\n  // first navigation, only need to prepare a few information for each viewport plan\r\n  const viewPortPlans: ViewPortPlansRecord = {};\r\n  let viewPortConfigs = config.viewPorts;\r\n  for (let viewPortName in viewPortConfigs) {\r\n    let viewPortConfig = viewPortConfigs[viewPortName];\r\n    if (viewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {\r\n      viewPortConfig = defaultViewPortConfigs[viewPortName];\r\n    }\r\n    viewPortPlans[viewPortName] = {\r\n      name: viewPortName,\r\n      strategy: InternalActivationStrategy.Replace,\r\n      config: viewPortConfig\r\n    };\r\n  }\r\n\r\n  return Promise.resolve(viewPortPlans);\r\n}\r\n\r\n/**\r\n * Build redirect plan based on config of a navigation instruction\r\n * @internal exported for unit testing\r\n */\r\nexport const buildRedirectPlan = (instruction: NavigationInstruction) => {\r\n  const config = instruction.config;\r\n  const router = instruction.router;\r\n  return router\r\n    ._createNavigationInstruction(config.redirect)\r\n    .then(redirectInstruction => {\r\n\r\n      const params: Record<string, any> = {};\r\n      const originalInstructionParams = instruction.params;\r\n      const redirectInstructionParams = redirectInstruction.params;\r\n\r\n      for (let key in redirectInstructionParams) {\r\n        // If the param on the redirect points to another param, e.g. { route: first/:this, redirect: second/:this }\r\n        let val = redirectInstructionParams[key];\r\n        if (typeof val === 'string' && val[0] === ':') {\r\n          val = val.slice(1);\r\n          // And if that param is found on the original instruction then use it\r\n          if (val in originalInstructionParams) {\r\n            params[key] = originalInstructionParams[val];\r\n          }\r\n        } else {\r\n          params[key] = redirectInstructionParams[key];\r\n        }\r\n      }\r\n      let redirectLocation = router.generate(redirectInstruction.config, params, instruction.options);\r\n\r\n      // Special handling for child routes\r\n      for (let key in originalInstructionParams) {\r\n        redirectLocation = redirectLocation.replace(`:${key}`, originalInstructionParams[key]);\r\n      }\r\n\r\n      let queryString = instruction.queryString;\r\n      if (queryString) {\r\n        redirectLocation += '?' + queryString;\r\n      }\r\n\r\n      return Promise.resolve(new Redirect(redirectLocation));\r\n    });\r\n};\r\n\r\n/**\r\n * @param viewPortPlans the Plan record that holds information about built plans\r\n * @internal exported for unit testing\r\n */\r\nexport const buildTransitionPlans = (\r\n  currentInstruction: NavigationInstruction,\r\n  previousInstruction: NavigationInstruction,\r\n  defaultViewPortConfigs: Record<string, ViewPortInstruction>,\r\n  forceLifecycleMinimum?: boolean\r\n): Promise<ViewPortPlansRecord> => {\r\n\r\n  let viewPortPlans: ViewPortPlansRecord = {};\r\n  let newInstructionConfig = currentInstruction.config;\r\n  let hasNewParams = hasDifferentParameterValues(previousInstruction, currentInstruction);\r\n  let pending: Promise<void>[] = [];\r\n  let previousViewPortInstructions = previousInstruction.viewPortInstructions as Record<string, ViewPortInstruction>;\r\n\r\n  for (let viewPortName in previousViewPortInstructions) {\r\n\r\n    const prevViewPortInstruction = previousViewPortInstructions[viewPortName];\r\n    const prevViewPortComponent = prevViewPortInstruction.component;\r\n    const newInstructionViewPortConfigs = newInstructionConfig.viewPorts as Record<string, RouteConfig>;\r\n\r\n    // if this is invoked on a viewport without any changes, based on new url,\r\n    // newViewPortConfig will be the existing viewport instruction\r\n    let nextViewPortConfig = viewPortName in newInstructionViewPortConfigs\r\n      ? newInstructionViewPortConfigs[viewPortName]\r\n      : prevViewPortInstruction;\r\n\r\n    if (nextViewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {\r\n      nextViewPortConfig = defaultViewPortConfigs[viewPortName];\r\n    }\r\n\r\n    const viewPortActivationStrategy = determineActivationStrategy(\r\n      currentInstruction,\r\n      prevViewPortInstruction,\r\n      nextViewPortConfig,\r\n      hasNewParams,\r\n      forceLifecycleMinimum\r\n    );\r\n    const viewPortPlan = viewPortPlans[viewPortName] = {\r\n      name: viewPortName,\r\n      // ViewPortInstruction can quack like a RouteConfig\r\n      config: nextViewPortConfig as RouteConfig,\r\n      prevComponent: prevViewPortComponent,\r\n      prevModuleId: prevViewPortInstruction.moduleId,\r\n      strategy: viewPortActivationStrategy\r\n    } as ViewPortPlan;\r\n\r\n    // recursively build nav plans for all existing child routers/viewports of this viewport\r\n    // this is possible because existing child viewports and routers already have necessary information\r\n    // to process the wildcard path from parent instruction\r\n    if (viewPortActivationStrategy !== InternalActivationStrategy.Replace && prevViewPortInstruction.childRouter) {\r\n      const path = currentInstruction.getWildcardPath();\r\n      const task: Promise<void> = prevViewPortInstruction\r\n        .childRouter\r\n        ._createNavigationInstruction(path, currentInstruction)\r\n        .then((childInstruction: NavigationInstruction) => {\r\n          viewPortPlan.childNavigationInstruction = childInstruction;\r\n\r\n          return _buildNavigationPlan(\r\n            childInstruction,\r\n            // is it safe to assume viewPortPlan has not been changed from previous assignment?\r\n            // if so, can just use local variable viewPortPlanStrategy\r\n            // there could be user code modifying viewport plan during _createNavigationInstruction?\r\n            viewPortPlan.strategy === InternalActivationStrategy.InvokeLifecycle\r\n          )\r\n            .then(childPlan => {\r\n              if (childPlan instanceof Redirect) {\r\n                return Promise.reject(childPlan);\r\n              }\r\n              childInstruction.plan = childPlan;\r\n              // for bluebird ?\r\n              return null;\r\n            });\r\n        });\r\n\r\n      pending.push(task);\r\n    }\r\n  }\r\n\r\n  return Promise.all(pending).then(() => viewPortPlans);\r\n};\r\n\r\n/**\r\n * @param newViewPortConfig if this is invoked on a viewport without any changes, based on new url, newViewPortConfig will be the existing viewport instruction\r\n * @internal exported for unit testing\r\n */\r\nexport const determineActivationStrategy = (\r\n  currentNavInstruction: NavigationInstruction,\r\n  prevViewPortInstruction: ViewPortInstruction,\r\n  newViewPortConfig: RouteConfig | ViewPortInstruction,\r\n  // indicates whether there is difference between old and new url params\r\n  hasNewParams: boolean,\r\n  forceLifecycleMinimum?: boolean\r\n): ActivationStrategyType => {\r\n\r\n  let newInstructionConfig = currentNavInstruction.config;\r\n  let prevViewPortViewModel = prevViewPortInstruction.component.viewModel;\r\n  let viewPortPlanStrategy: ActivationStrategyType;\r\n\r\n  if (prevViewPortInstruction.moduleId !== newViewPortConfig.moduleId) {\r\n    viewPortPlanStrategy = InternalActivationStrategy.Replace;\r\n  } else if ('determineActivationStrategy' in prevViewPortViewModel) {\r\n    viewPortPlanStrategy = prevViewPortViewModel.determineActivationStrategy(...currentNavInstruction.lifecycleArgs);\r\n  } else if (newInstructionConfig.activationStrategy) {\r\n    viewPortPlanStrategy = newInstructionConfig.activationStrategy;\r\n  } else if (hasNewParams || forceLifecycleMinimum) {\r\n    viewPortPlanStrategy = InternalActivationStrategy.InvokeLifecycle;\r\n  } else {\r\n    viewPortPlanStrategy = InternalActivationStrategy.NoChange;\r\n  }\r\n  return viewPortPlanStrategy;\r\n};\r\n\r\n/**@internal exported for unit testing */\r\nexport const hasDifferentParameterValues = (prev: NavigationInstruction, next: NavigationInstruction): boolean => {\r\n  let prevParams = prev.params;\r\n  let nextParams = next.params;\r\n  let nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;\r\n\r\n  for (let key in nextParams) {\r\n    if (key === nextWildCardName) {\r\n      continue;\r\n    }\r\n\r\n    if (prevParams[key] !== nextParams[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  for (let key in prevParams) {\r\n    if (key === nextWildCardName) {\r\n      continue;\r\n    }\r\n\r\n    if (prevParams[key] !== nextParams[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (!next.options.compareQueryParams) {\r\n    return false;\r\n  }\r\n\r\n  let prevQueryParams = prev.queryParams;\r\n  let nextQueryParams = next.queryParams;\r\n  for (let key in nextQueryParams) {\r\n    if (prevQueryParams[key] !== nextQueryParams[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  for (let key in prevQueryParams) {\r\n    if (prevQueryParams[key] !== nextQueryParams[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n","import { Next } from './interfaces';\r\nimport { Redirect } from './navigation-commands';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { _buildNavigationPlan } from './navigation-plan';\r\n\r\n/**\r\n * Transform a navigation instruction into viewport plan record object,\r\n * or a redirect request if user viewmodel demands\r\n */\r\nexport class BuildNavigationPlanStep {\r\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n    return _buildNavigationPlan(navigationInstruction)\r\n      .then(plan => {\r\n        if (plan instanceof Redirect) {\r\n          return next.cancel(plan);\r\n        }\r\n        navigationInstruction.plan = plan;\r\n        return next();\r\n      })\r\n      .catch(next.cancel);\r\n  }\r\n}\r\n","import { RouteConfig, ViewPortComponent, ViewPortPlan, ViewPortInstruction } from './interfaces';\r\nimport { Redirect } from './navigation-commands';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { _buildNavigationPlan } from './navigation-plan';\r\nimport { InternalActivationStrategy } from './activation-strategy';\r\nimport { RouteLoader } from './route-loader';\r\n\r\n/**\r\n * Loading plan calculated based on a navigration-instruction and a viewport plan\r\n */\r\ninterface ILoadingPlan {\r\n  viewPortPlan: ViewPortPlan;\r\n  navigationInstruction: NavigationInstruction;\r\n}\r\n\r\n/**\r\n * @internal Exported for unit testing\r\n */\r\nexport const loadNewRoute = (\r\n  routeLoader: RouteLoader,\r\n  navigationInstruction: NavigationInstruction\r\n): Promise<any[] | void> => {\r\n  let loadingPlans = determineLoadingPlans(navigationInstruction);\r\n  let loadPromises = loadingPlans.map((loadingPlan: ILoadingPlan) => loadRoute(\r\n    routeLoader,\r\n    loadingPlan.navigationInstruction,\r\n    loadingPlan.viewPortPlan\r\n  ));\r\n\r\n  return Promise.all(loadPromises);\r\n};\r\n\r\n/**\r\n * @internal Exported for unit testing\r\n */\r\nexport const determineLoadingPlans = (\r\n  navigationInstruction: NavigationInstruction,\r\n  loadingPlans: ILoadingPlan[] = []\r\n): ILoadingPlan[] => {\r\n  let viewPortPlans: Record<string, ViewPortPlan> = navigationInstruction.plan;\r\n\r\n  for (let viewPortName in viewPortPlans) {\r\n    let viewPortPlan = viewPortPlans[viewPortName];\r\n    let childNavInstruction = viewPortPlan.childNavigationInstruction;\r\n\r\n    if (viewPortPlan.strategy === InternalActivationStrategy.Replace) {\r\n      loadingPlans.push({ viewPortPlan, navigationInstruction } as ILoadingPlan);\r\n\r\n      if (childNavInstruction) {\r\n        determineLoadingPlans(childNavInstruction, loadingPlans);\r\n      }\r\n    } else {\r\n      let viewPortInstruction = navigationInstruction.addViewPortInstruction({\r\n        name: viewPortName,\r\n        strategy: viewPortPlan.strategy,\r\n        moduleId: viewPortPlan.prevModuleId,\r\n        component: viewPortPlan.prevComponent\r\n      }) as ViewPortInstruction;\r\n\r\n      if (childNavInstruction) {\r\n        viewPortInstruction.childNavigationInstruction = childNavInstruction;\r\n        determineLoadingPlans(childNavInstruction, loadingPlans);\r\n      }\r\n    }\r\n  }\r\n\r\n  return loadingPlans;\r\n};\r\n\r\n/**\r\n * @internal Exported for unit testing\r\n */\r\nexport const loadRoute = (\r\n  routeLoader: RouteLoader,\r\n  navigationInstruction: NavigationInstruction,\r\n  viewPortPlan: ViewPortPlan\r\n): Promise<any> => {\r\n  let planConfig = viewPortPlan.config;\r\n  let moduleId = planConfig ? planConfig.moduleId : null;\r\n\r\n  return loadComponent(routeLoader, navigationInstruction, planConfig)\r\n    .then((component) => {\r\n      let viewPortInstruction = navigationInstruction.addViewPortInstruction({\r\n        name: viewPortPlan.name,\r\n        strategy: viewPortPlan.strategy,\r\n        moduleId: moduleId,\r\n        component: component\r\n      }) as ViewPortInstruction;\r\n\r\n      let childRouter = component.childRouter;\r\n      if (childRouter) {\r\n        let path = navigationInstruction.getWildcardPath();\r\n\r\n        return childRouter\r\n          ._createNavigationInstruction(path, navigationInstruction)\r\n          .then((childInstruction) => {\r\n            viewPortPlan.childNavigationInstruction = childInstruction;\r\n\r\n            return _buildNavigationPlan(childInstruction)\r\n              .then((childPlan) => {\r\n                if (childPlan instanceof Redirect) {\r\n                  return Promise.reject(childPlan);\r\n                }\r\n                childInstruction.plan = childPlan;\r\n                viewPortInstruction.childNavigationInstruction = childInstruction;\r\n\r\n                return loadNewRoute(routeLoader, childInstruction);\r\n              });\r\n          });\r\n      }\r\n      // ts complains without this, though they are same\r\n      return void 0;\r\n    });\r\n};\r\n\r\n/**\r\n * Load a routed-component based on navigation instruction and route config\r\n * @internal exported for unit testing only\r\n */\r\nexport const loadComponent = (\r\n  routeLoader: RouteLoader,\r\n  navigationInstruction: NavigationInstruction,\r\n  config: RouteConfig\r\n): Promise<ViewPortComponent> => {\r\n  let router = navigationInstruction.router;\r\n  let lifecycleArgs = navigationInstruction.lifecycleArgs;\r\n\r\n  return Promise.resolve()\r\n    .then(() => routeLoader.loadRoute(router, config, navigationInstruction))\r\n    .then(\r\n      /**\r\n       * @param component an object carrying information about loaded route\r\n       * typically contains information about view model, childContainer, view and router\r\n       */\r\n      (component: ViewPortComponent) => {\r\n        let { viewModel, childContainer } = component;\r\n        component.router = router;\r\n        component.config = config;\r\n\r\n        if ('configureRouter' in viewModel) {\r\n          let childRouter = childContainer.getChildRouter();\r\n          component.childRouter = childRouter;\r\n\r\n          return childRouter\r\n            .configure(c => viewModel.configureRouter(c, childRouter, lifecycleArgs[0], lifecycleArgs[1], lifecycleArgs[2]))\r\n            .then(() => component);\r\n        }\r\n\r\n        return component;\r\n      }\r\n    );\r\n};\r\n","import { RouteConfig } from './interfaces';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { Router } from './router';\r\n\r\n/**\r\n * Abstract class that is responsible for loading view / view model from a route config\r\n * The default implementation can be found in `aurelia-templating-router`\r\n */\r\nexport class RouteLoader {\r\n  /**\r\n   * Load a route config based on its viewmodel / view configuration\r\n   */\r\n  // return typing: return typings used to be never\r\n  // as it was a throw. Changing it to Promise<any> should not cause any issues\r\n  loadRoute(router: Router, config: RouteConfig, navigationInstruction: NavigationInstruction): Promise</*ViewPortInstruction*/any> {\r\n    throw new Error('Route loaders must implement \"loadRoute(router, config, navigationInstruction)\".');\r\n  }\r\n}\r\n","import { Next } from './interfaces';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { loadNewRoute } from './utilities-route-loading';\r\nimport { RouteLoader } from './route-loader';\r\n/**\r\n * A pipeline step responsible for loading a route config of a navigation instruction\r\n */\r\nexport class LoadRouteStep {\r\n  /**@internal */\r\n  static inject() { return [RouteLoader]; }\r\n  /**\r\n   * Route loader isntance that will handle loading route config\r\n   * @internal\r\n   */\r\n  routeLoader: RouteLoader;\r\n  constructor(routeLoader: RouteLoader) {\r\n    this.routeLoader = routeLoader;\r\n  }\r\n  /**\r\n   * Run the internal to load route config of a navigation instruction to prepare for next steps in the pipeline\r\n   */\r\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n    return loadNewRoute(this.routeLoader, navigationInstruction)\r\n      .then(next, next.cancel);\r\n  }\r\n}\r\n","import { NavigationInstruction } from './navigation-instruction';\r\n\r\n/**\r\n * A pipeline step for instructing a piepline to commit changes on a navigation instruction\r\n */\r\nexport class CommitChangesStep {\r\n  run(navigationInstruction: NavigationInstruction, next: Function): Promise<any> {\r\n    return navigationInstruction\r\n      ._commitChanges(/*wait to swap?*/ true)\r\n      .then(() => {\r\n        navigationInstruction._updateTitle();\r\n        return next();\r\n      });\r\n  }\r\n}\r\n","/**\r\n * An optional interface describing the available activation strategies.\r\n * @internal Used internally.\r\n */\r\nexport const enum InternalActivationStrategy {\r\n  /**\r\n   * Reuse the existing view model, without invoking Router lifecycle hooks.\r\n   */\r\n  NoChange = 'no-change',\r\n  /**\r\n   * Reuse the existing view model, invoking Router lifecycle hooks.\r\n   */\r\n  InvokeLifecycle = 'invoke-lifecycle',\r\n  /**\r\n   * Replace the existing view model, invoking Router lifecycle hooks.\r\n   */\r\n  Replace = 'replace'\r\n}\r\n\r\n/**\r\n * The strategy to use when activating modules during navigation.\r\n */\r\n// kept for compat reason\r\nexport const activationStrategy: ActivationStrategy = {\r\n  noChange: InternalActivationStrategy.NoChange,\r\n  invokeLifecycle: InternalActivationStrategy.InvokeLifecycle,\r\n  replace: InternalActivationStrategy.Replace\r\n};\r\n\r\n/**\r\n * An optional interface describing the available activation strategies.\r\n */\r\nexport interface ActivationStrategy {\r\n  /**\r\n   * Reuse the existing view model, without invoking Router lifecycle hooks.\r\n   */\r\n  noChange: 'no-change';\r\n  /**\r\n   * Reuse the existing view model, invoking Router lifecycle hooks.\r\n   */\r\n  invokeLifecycle: 'invoke-lifecycle';\r\n  /**\r\n   * Replace the existing view model, invoking Router lifecycle hooks.\r\n   */\r\n  replace: 'replace';\r\n}\r\n\r\n/**\r\n * Enum like type for activation strategy built-in values\r\n */\r\nexport type ActivationStrategyType = ActivationStrategy[keyof ActivationStrategy];\r\n","import { Next, ViewPortComponent, ViewPortPlan, ViewPortInstruction, LifecycleArguments } from './interfaces';\r\nimport { isNavigationCommand } from './navigation-commands';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { activationStrategy } from './activation-strategy';\r\nimport { Router } from './router';\r\n\r\n/**\r\n * Recursively find list of deactivate-able view models\r\n * and invoke the either 'canDeactivate' or 'deactivate' on each\r\n * @internal exported for unit testing\r\n */\r\nexport const processDeactivatable = (\r\n  navigationInstruction: NavigationInstruction,\r\n  callbackName: 'canDeactivate' | 'deactivate',\r\n  next: Next,\r\n  ignoreResult?: boolean\r\n): Promise<any> => {\r\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\r\n  let infos = findDeactivatable(plan, callbackName);\r\n  let i = infos.length; // query from inside out\r\n\r\n  function inspect(val: any): Promise<any> {\r\n    if (ignoreResult || shouldContinue(val)) {\r\n      return iterate();\r\n    }\r\n\r\n    return next.cancel(val);\r\n  }\r\n\r\n  function iterate(): Promise<any> {\r\n    if (i--) {\r\n      try {\r\n        let viewModel = infos[i];\r\n        let result = viewModel[callbackName](navigationInstruction);\r\n        return processPotential(result, inspect, next.cancel);\r\n      } catch (error) {\r\n        return next.cancel(error);\r\n      }\r\n    }\r\n\r\n    navigationInstruction.router.couldDeactivate = true;\r\n\r\n    return next();\r\n  }\r\n\r\n  return iterate();\r\n};\r\n\r\n/**\r\n * Recursively find and returns a list of deactivate-able view models\r\n * @internal exported for unit testing\r\n */\r\nexport const findDeactivatable = (\r\n  plan: Record<string, ViewPortPlan>,\r\n  callbackName: string,\r\n  list: IActivatableInfo[] = []\r\n): any[] => {\r\n  for (let viewPortName in plan) {\r\n    let viewPortPlan = plan[viewPortName];\r\n    let prevComponent = viewPortPlan.prevComponent;\r\n\r\n    if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace)\r\n      && prevComponent\r\n    ) {\r\n      let viewModel = prevComponent.viewModel;\r\n\r\n      if (callbackName in viewModel) {\r\n        list.push(viewModel);\r\n      }\r\n    }\r\n\r\n    if (viewPortPlan.strategy === activationStrategy.replace && prevComponent) {\r\n      addPreviousDeactivatable(prevComponent, callbackName, list);\r\n    } else if (viewPortPlan.childNavigationInstruction) {\r\n      findDeactivatable(viewPortPlan.childNavigationInstruction.plan, callbackName, list);\r\n    }\r\n  }\r\n\r\n  return list;\r\n};\r\n\r\n/**\r\n * @internal exported for unit testing\r\n */\r\nexport const addPreviousDeactivatable = (\r\n  component: ViewPortComponent,\r\n  callbackName: string,\r\n  list: IActivatableInfo[]\r\n): void => {\r\n  let childRouter = component.childRouter;\r\n\r\n  if (childRouter && childRouter.currentInstruction) {\r\n    let viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;\r\n\r\n    for (let viewPortName in viewPortInstructions) {\r\n      let viewPortInstruction = viewPortInstructions[viewPortName];\r\n      let prevComponent = viewPortInstruction.component;\r\n      let prevViewModel = prevComponent.viewModel;\r\n\r\n      if (callbackName in prevViewModel) {\r\n        list.push(prevViewModel);\r\n      }\r\n\r\n      addPreviousDeactivatable(prevComponent, callbackName, list);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @internal exported for unit testing\r\n */\r\nexport const processActivatable = (\r\n  navigationInstruction: NavigationInstruction,\r\n  callbackName: 'canActivate' | 'activate',\r\n  next: Next,\r\n  ignoreResult?: boolean\r\n): Promise<any> => {\r\n  let infos = findActivatable(navigationInstruction, callbackName);\r\n  let length = infos.length;\r\n  let i = -1; // query from top down\r\n\r\n  function inspect(val: any, router: Router): Promise<any> {\r\n    if (ignoreResult || shouldContinue(val, router)) {\r\n      return iterate();\r\n    }\r\n\r\n    return next.cancel(val);\r\n  }\r\n\r\n  function iterate(): Promise<any> {\r\n    i++;\r\n\r\n    if (i < length) {\r\n      try {\r\n        let current = infos[i];\r\n        let result = current.viewModel[callbackName](...current.lifecycleArgs);\r\n        return processPotential(result, (val: any) => inspect(val, current.router), next.cancel);\r\n      } catch (error) {\r\n        return next.cancel(error);\r\n      }\r\n    }\r\n\r\n    return next();\r\n  }\r\n\r\n  return iterate();\r\n};\r\n\r\ninterface IActivatableInfo {\r\n  viewModel: any;\r\n  lifecycleArgs: LifecycleArguments;\r\n  router: Router;\r\n}\r\n\r\n/**\r\n * Find list of activatable view model and add to list (3rd parameter)\r\n * @internal exported for unit testing\r\n */\r\nexport const findActivatable = (\r\n  navigationInstruction: NavigationInstruction,\r\n  callbackName: 'canActivate' | 'activate',\r\n  list: IActivatableInfo[] = [],\r\n  router?: Router\r\n): IActivatableInfo[] => {\r\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\r\n\r\n  Object\r\n    .keys(plan)\r\n    .forEach((viewPortName) => {\r\n      let viewPortPlan = plan[viewPortName];\r\n      let viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName] as ViewPortInstruction;\r\n      let viewPortComponent = viewPortInstruction.component;\r\n      let viewModel = viewPortComponent.viewModel;\r\n\r\n      if (\r\n        (viewPortPlan.strategy === activationStrategy.invokeLifecycle\r\n          || viewPortPlan.strategy === activationStrategy.replace\r\n        )\r\n        && callbackName in viewModel\r\n      ) {\r\n        list.push({\r\n          viewModel,\r\n          lifecycleArgs: viewPortInstruction.lifecycleArgs,\r\n          router\r\n        });\r\n      }\r\n\r\n      let childNavInstruction = viewPortPlan.childNavigationInstruction;\r\n\r\n      if (childNavInstruction) {\r\n        findActivatable(\r\n          childNavInstruction,\r\n          callbackName,\r\n          list,\r\n          viewPortComponent.childRouter || router\r\n        );\r\n      }\r\n    });\r\n\r\n  return list;\r\n};\r\n\r\nconst shouldContinue = <T = any>(output: T, router?: Router): boolean | T => {\r\n  if (output instanceof Error) {\r\n    return false;\r\n  }\r\n\r\n  if (isNavigationCommand(output)) {\r\n    if (typeof output.setRouter === 'function') {\r\n      output.setRouter(router);\r\n    }\r\n\r\n    return !!output.shouldContinueProcessing;\r\n  }\r\n\r\n  if (output === undefined) {\r\n    return true;\r\n  }\r\n\r\n  return output;\r\n};\r\n\r\n/**\r\n * A basic interface for an Observable type\r\n */\r\nexport interface IObservable {\r\n  subscribe(sub?: IObservableConfig): ISubscription;\r\n}\r\n\r\nexport interface IObservableConfig {\r\n  next(): void;\r\n  error(err?: any): void;\r\n  complete(): void;\r\n}\r\n\r\n/**\r\n * A basic interface for a Subscription to an Observable\r\n */\r\ninterface ISubscription {\r\n  unsubscribe(): void;\r\n}\r\n\r\ntype SafeSubscriptionFunc = (sub: SafeSubscription) => ISubscription;\r\n\r\n/**\r\n * wraps a subscription, allowing unsubscribe calls even if\r\n * the first value comes synchronously\r\n */\r\nclass SafeSubscription {\r\n\r\n  private _subscribed: boolean;\r\n  private _subscription: ISubscription;\r\n\r\n  constructor(subscriptionFunc: SafeSubscriptionFunc) {\r\n    this._subscribed = true;\r\n    this._subscription = subscriptionFunc(this);\r\n\r\n    if (!this._subscribed) {\r\n      this.unsubscribe();\r\n    }\r\n  }\r\n\r\n  get subscribed(): boolean {\r\n    return this._subscribed;\r\n  }\r\n\r\n  unsubscribe(): void {\r\n    if (this._subscribed && this._subscription) {\r\n      this._subscription.unsubscribe();\r\n    }\r\n\r\n    this._subscribed = false;\r\n  }\r\n}\r\n\r\n/**\r\n * A function to process return value from `activate`/`canActivate` steps\r\n * Supports observable/promise\r\n *\r\n * For observable, resolve at first next() or on complete()\r\n */\r\nconst processPotential = (obj: any, resolve: (val?: any) => any, reject: (err?: any) => any): any => {\r\n  // if promise like\r\n  if (obj && typeof obj.then === 'function') {\r\n    return Promise.resolve(obj).then(resolve).catch(reject);\r\n  }\r\n\r\n  // if observable\r\n  if (obj && typeof obj.subscribe === 'function') {\r\n    let obs: IObservable = obj;\r\n    return new SafeSubscription(sub => obs.subscribe({\r\n      next() {\r\n        if (sub.subscribed) {\r\n          sub.unsubscribe();\r\n          resolve(obj);\r\n        }\r\n      },\r\n      error(error) {\r\n        if (sub.subscribed) {\r\n          sub.unsubscribe();\r\n          reject(error);\r\n        }\r\n      },\r\n      complete() {\r\n        if (sub.subscribed) {\r\n          sub.unsubscribe();\r\n          resolve(obj);\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  // else just resolve\r\n  try {\r\n    return resolve(obj);\r\n  } catch (error) {\r\n    return reject(error);\r\n  }\r\n};\r\n","import { Next } from './interfaces';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { processDeactivatable, processActivatable } from './utilities-activation';\r\n\r\n/**\r\n * A pipeline step responsible for finding and activating method `canDeactivate` on a view model of a route\r\n */\r\nexport class CanDeactivatePreviousStep {\r\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n    return processDeactivatable(navigationInstruction, 'canDeactivate', next);\r\n  }\r\n}\r\n\r\n/**\r\n * A pipeline step responsible for finding and activating method `canActivate` on a view model of a route\r\n */\r\nexport class CanActivateNextStep {\r\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n    return processActivatable(navigationInstruction, 'canActivate', next);\r\n  }\r\n}\r\n\r\n/**\r\n * A pipeline step responsible for finding and activating method `deactivate` on a view model of a route\r\n */\r\nexport class DeactivatePreviousStep {\r\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n    return processDeactivatable(navigationInstruction, 'deactivate', next, true);\r\n  }\r\n}\r\n\r\n/**\r\n * A pipeline step responsible for finding and activating method `activate` on a view model of a route\r\n */\r\nexport class ActivateNextStep {\r\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n    return processActivatable(navigationInstruction, 'activate', next, true);\r\n  }\r\n}\r\n","import { Container } from 'aurelia-dependency-injection';\r\nimport { Pipeline } from './pipeline';\r\nimport { BuildNavigationPlanStep } from './step-build-navigation-plan';\r\nimport { LoadRouteStep } from './step-load-route';\r\nimport { CommitChangesStep } from './step-commit-changes';\r\nimport { CanDeactivatePreviousStep, CanActivateNextStep, DeactivatePreviousStep, ActivateNextStep } from './step-activation';\r\nimport { PipelineStep, StepRunnerFunction, IPipelineSlot } from './interfaces';\r\nimport { PipelineSlotName } from './pipeline-slot-name';\r\n\r\n/**\r\n * A multi-slots Pipeline Placeholder Step for hooking into a pipeline execution\r\n */\r\nclass PipelineSlot implements IPipelineSlot {\r\n\r\n  /**@internal */\r\n  container: Container;\r\n  /**@internal */\r\n  slotName: string;\r\n  /**@internal */\r\n  slotAlias?: string;\r\n\r\n  steps: (Function | PipelineStep)[] = [];\r\n\r\n  constructor(container: Container, name: string, alias?: string) {\r\n    this.container = container;\r\n    this.slotName = name;\r\n    this.slotAlias = alias;\r\n  }\r\n\r\n  getSteps(): (StepRunnerFunction | IPipelineSlot | PipelineStep)[] {\r\n    return this.steps.map(x => this.container.get(x));\r\n  }\r\n}\r\n\r\n/**\r\n * Class responsible for creating the navigation pipeline.\r\n */\r\nexport class PipelineProvider {\r\n\r\n  /**@internal */\r\n  static inject() { return [Container]; }\r\n  /**@internal */\r\n  container: Container;\r\n  /**@internal */\r\n  steps: (Function | PipelineSlot)[];\r\n\r\n  constructor(container: Container) {\r\n    this.container = container;\r\n    this.steps = [\r\n      BuildNavigationPlanStep,\r\n      CanDeactivatePreviousStep, // optional\r\n      LoadRouteStep,\r\n      createPipelineSlot(container, PipelineSlotName.Authorize),\r\n      CanActivateNextStep, // optional\r\n      createPipelineSlot(container, PipelineSlotName.PreActivate, 'modelbind'),\r\n      // NOTE: app state changes start below - point of no return\r\n      DeactivatePreviousStep, // optional\r\n      ActivateNextStep, // optional\r\n      createPipelineSlot(container, PipelineSlotName.PreRender, 'precommit'),\r\n      CommitChangesStep,\r\n      createPipelineSlot(container, PipelineSlotName.PostRender, 'postcomplete')\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Create the navigation pipeline.\r\n   */\r\n  createPipeline(useCanDeactivateStep: boolean = true): Pipeline {\r\n    let pipeline = new Pipeline();\r\n    this.steps.forEach(step => {\r\n      if (useCanDeactivateStep || step !== CanDeactivatePreviousStep) {\r\n        pipeline.addStep(this.container.get(step));\r\n      }\r\n    });\r\n    return pipeline;\r\n  }\r\n\r\n  /**@internal */\r\n  _findStep(name: string): PipelineSlot {\r\n    // Steps that are not PipelineSlots are constructor functions, and they will automatically fail. Probably.\r\n    return this.steps.find(x => (x as PipelineSlot).slotName === name || (x as PipelineSlot).slotAlias === name) as PipelineSlot;\r\n  }\r\n\r\n  /**\r\n   * Adds a step into the pipeline at a known slot location.\r\n   */\r\n  addStep(name: string, step: PipelineStep | Function): void {\r\n    let found = this._findStep(name);\r\n    if (found) {\r\n      let slotSteps = found.steps;\r\n      // prevent duplicates\r\n      if (!slotSteps.includes(step)) {\r\n        slotSteps.push(step);\r\n      }\r\n    } else {\r\n      throw new Error(`Invalid pipeline slot name: ${name}.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a step from a slot in the pipeline\r\n   */\r\n  removeStep(name: string, step: PipelineStep): void {\r\n    let slot = this._findStep(name);\r\n    if (slot) {\r\n      let slotSteps = slot.steps;\r\n      slotSteps.splice(slotSteps.indexOf(step), 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears all steps from a slot in the pipeline\r\n   * @internal\r\n   */\r\n  _clearSteps(name: string = ''): void {\r\n    let slot = this._findStep(name);\r\n    if (slot) {\r\n      slot.steps = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets all pipeline slots\r\n   */\r\n  reset(): void {\r\n    this._clearSteps(PipelineSlotName.Authorize);\r\n    this._clearSteps(PipelineSlotName.PreActivate);\r\n    this._clearSteps(PipelineSlotName.PreRender);\r\n    this._clearSteps(PipelineSlotName.PostRender);\r\n  }\r\n}\r\n\r\n/**@internal */\r\nconst createPipelineSlot = (container: Container, name: PipelineSlotName, alias?: string): PipelineSlot => {\r\n  return new PipelineSlot(container, name, alias);\r\n};\r\n","import * as LogManager from 'aurelia-logging';\r\nimport { Container } from 'aurelia-dependency-injection';\r\nimport { History, NavigationOptions } from 'aurelia-history';\r\nimport { Router } from './router';\r\nimport { PipelineProvider } from './pipeline-provider';\r\nimport { isNavigationCommand } from './navigation-commands';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { NavigationInstruction } from './navigation-instruction';\r\nimport { ViewPort, ConfiguresRouter, PipelineResult } from './interfaces';\r\nimport { RouterEvent } from './router-event';\r\nimport { RouterConfiguration } from './router-configuration';\r\n\r\n/**@internal */\r\ndeclare module 'aurelia-dependency-injection' {\r\n  interface Container {\r\n    viewModel?: any;\r\n  }\r\n}\r\n\r\nconst logger = LogManager.getLogger('app-router');\r\n\r\n/**\r\n * The main application router.\r\n */\r\nexport class AppRouter extends Router {\r\n\r\n  /**@internal */\r\n  static inject() { return [Container, History, PipelineProvider, EventAggregator]; }\r\n\r\n  events: EventAggregator;\r\n  /**@internal */\r\n  maxInstructionCount: number;\r\n  /**@internal */\r\n  _queue: NavigationInstruction[];\r\n  /**@internal */\r\n  isActive: boolean;\r\n\r\n  constructor(container: Container, history: History, pipelineProvider: PipelineProvider, events: EventAggregator) {\r\n    super(container, history); // Note the super will call reset internally.\r\n    this.pipelineProvider = pipelineProvider;\r\n    this.events = events;\r\n  }\r\n\r\n  /**\r\n   * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\r\n   * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\r\n   */\r\n  reset(): void {\r\n    super.reset();\r\n    this.maxInstructionCount = 10;\r\n    if (!this._queue) {\r\n      this._queue = [];\r\n    } else {\r\n      this._queue.length = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads the specified URL.\r\n   *\r\n   * @param url The URL fragment to load.\r\n   */\r\n  loadUrl(url: string): Promise<NavigationInstruction> {\r\n    return this\r\n      ._createNavigationInstruction(url)\r\n      .then(instruction => this._queueInstruction(instruction))\r\n      .catch(error => {\r\n        logger.error(error);\r\n        restorePreviousLocation(this);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Registers a viewPort to be used as a rendering target for activated routes.\r\n   *\r\n   * @param viewPort The viewPort. This is typically a <router-view/> element in Aurelia default impl\r\n   * @param name The name of the viewPort. 'default' if unspecified.\r\n   */\r\n  registerViewPort(viewPort: /*ViewPort*/ any, name?: string): Promise<any> {\r\n    // having strong typing without changing public API\r\n    const $viewPort: ViewPort = viewPort;\r\n    super.registerViewPort($viewPort, name);\r\n\r\n    // beside adding viewport to the registry of this instance\r\n    // AppRouter also configure routing/history to start routing functionality\r\n    // There are situation where there are more than 1 <router-view/> element at root view\r\n    // in that case, still only activate once via the following guard\r\n    if (!this.isActive) {\r\n      const viewModel = this._findViewModel($viewPort);\r\n      if ('configureRouter' in viewModel) {\r\n        // If there are more than one <router-view/> element at root view\r\n        // use this flag to guard against configure method being invoked multiple times\r\n        // this flag is set inside method configure\r\n        if (!this.isConfigured) {\r\n          // replace the real resolve with a noop to guarantee that any action in base class Router\r\n          // won't resolve the configurePromise prematurely\r\n          const resolveConfiguredPromise = this._resolveConfiguredPromise;\r\n          this._resolveConfiguredPromise = () => {/**/};\r\n          return this\r\n            .configure(config =>\r\n              Promise\r\n                .resolve(viewModel.configureRouter(config, this))\r\n                // an issue with configure interface. Should be fixed there\r\n                // todo: fix this via configure interface in router\r\n                .then(() => config) as any\r\n            )\r\n            .then(() => {\r\n              this.activate();\r\n              resolveConfiguredPromise();\r\n            });\r\n        }\r\n      } else {\r\n        this.activate();\r\n      }\r\n    }\r\n    // when a viewport is added dynamically to a root view that is already activated\r\n    // just process the navigation instruction\r\n    else {\r\n      this._dequeueInstruction();\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Activates the router. This instructs the router to begin listening for history changes and processing instructions.\r\n   *\r\n   * @params options The set of options to activate the router with.\r\n   */\r\n  activate(options?: NavigationOptions): void {\r\n    if (this.isActive) {\r\n      return;\r\n    }\r\n\r\n    this.isActive = true;\r\n    // route handler property is responsible for handling url change\r\n    // the interface of aurelia-history isn't clear on this perspective\r\n    this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);\r\n    this.history.activate(this.options);\r\n    this._dequeueInstruction();\r\n  }\r\n\r\n  /**\r\n   * Deactivates the router.\r\n   */\r\n  deactivate(): void {\r\n    this.isActive = false;\r\n    this.history.deactivate();\r\n  }\r\n\r\n  /**@internal */\r\n  _queueInstruction(instruction: NavigationInstruction): Promise<any> {\r\n    return new Promise((resolve) => {\r\n      instruction.resolve = resolve;\r\n      this._queue.unshift(instruction);\r\n      this._dequeueInstruction();\r\n    });\r\n  }\r\n\r\n  /**@internal */\r\n  _dequeueInstruction(instructionCount: number = 0): Promise<PipelineResult | void> {\r\n    return Promise.resolve().then(() => {\r\n      if (this.isNavigating && !instructionCount) {\r\n        // ts complains about inconsistent returns without void 0\r\n        return void 0;\r\n      }\r\n\r\n      let instruction = this._queue.shift();\r\n      this._queue.length = 0;\r\n\r\n      if (!instruction) {\r\n        // ts complains about inconsistent returns without void 0\r\n        return void 0;\r\n      }\r\n\r\n      this.isNavigating = true;\r\n\r\n      let navtracker: number = this.history.getState('NavigationTracker');\r\n      let currentNavTracker = this.currentNavigationTracker;\r\n\r\n      if (!navtracker && !currentNavTracker) {\r\n        this.isNavigatingFirst = true;\r\n        this.isNavigatingNew = true;\r\n      } else if (!navtracker) {\r\n        this.isNavigatingNew = true;\r\n      } else if (!currentNavTracker) {\r\n        this.isNavigatingRefresh = true;\r\n      } else if (currentNavTracker < navtracker) {\r\n        this.isNavigatingForward = true;\r\n      } else if (currentNavTracker > navtracker) {\r\n        this.isNavigatingBack = true;\r\n      } if (!navtracker) {\r\n        navtracker = Date.now();\r\n        this.history.setState('NavigationTracker', navtracker);\r\n      }\r\n      this.currentNavigationTracker = navtracker;\r\n\r\n      instruction.previousInstruction = this.currentInstruction;\r\n\r\n      let maxInstructionCount = this.maxInstructionCount;\r\n\r\n      if (!instructionCount) {\r\n        this.events.publish(RouterEvent.Processing, { instruction });\r\n      } else if (instructionCount === maxInstructionCount - 1) {\r\n        logger.error(`${instructionCount + 1} navigation instructions have been attempted without success. Restoring last known good location.`);\r\n        restorePreviousLocation(this);\r\n        return this._dequeueInstruction(instructionCount + 1);\r\n      } else if (instructionCount > maxInstructionCount) {\r\n        throw new Error('Maximum navigation attempts exceeded. Giving up.');\r\n      }\r\n\r\n      let pipeline = this.pipelineProvider.createPipeline(!this.couldDeactivate);\r\n\r\n      return pipeline\r\n        .run(instruction)\r\n        .then(result => processResult(instruction, result, instructionCount, this))\r\n        .catch(error => {\r\n          return { output: error instanceof Error ? error : new Error(error) } as PipelineResult;\r\n        })\r\n        .then(result => resolveInstruction(instruction, result, !!instructionCount, this));\r\n    });\r\n  }\r\n\r\n  /**@internal */\r\n  _findViewModel(viewPort: ViewPort): ConfiguresRouter | undefined {\r\n    if (this.container.viewModel) {\r\n      return this.container.viewModel;\r\n    }\r\n\r\n    if (viewPort.container) {\r\n      let container = viewPort.container;\r\n\r\n      while (container) {\r\n        if (container.viewModel) {\r\n          this.container.viewModel = container.viewModel;\r\n          return container.viewModel;\r\n        }\r\n\r\n        container = container.parent;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst processResult = (\r\n  instruction: NavigationInstruction,\r\n  result: PipelineResult,\r\n  instructionCount: number,\r\n  router: AppRouter\r\n): Promise<PipelineResult> => {\r\n  if (!(result && 'completed' in result && 'output' in result)) {\r\n    result = result || {} as PipelineResult;\r\n    result.output = new Error(`Expected router pipeline to return a navigation result, but got [${JSON.stringify(result)}] instead.`);\r\n  }\r\n\r\n  let finalResult: PipelineResult = null;\r\n  let navigationCommandResult = null;\r\n  if (isNavigationCommand(result.output)) {\r\n    navigationCommandResult = result.output.navigate(router);\r\n  } else {\r\n    finalResult = result;\r\n\r\n    if (!result.completed) {\r\n      if (result.output instanceof Error) {\r\n        logger.error(result.output.toString());\r\n      }\r\n\r\n      restorePreviousLocation(router);\r\n    }\r\n  }\r\n\r\n  return Promise.resolve(navigationCommandResult)\r\n    .then(_ => router._dequeueInstruction(instructionCount + 1))\r\n    .then(innerResult => finalResult || innerResult || result);\r\n};\r\n\r\nconst resolveInstruction = (\r\n  instruction: NavigationInstruction,\r\n  result: PipelineResult,\r\n  isInnerInstruction: boolean,\r\n  router: AppRouter\r\n): PipelineResult => {\r\n  instruction.resolve(result);\r\n\r\n  let eventAggregator = router.events;\r\n  let eventArgs = { instruction, result };\r\n  if (!isInnerInstruction) {\r\n    router.isNavigating = false;\r\n    router.isExplicitNavigation = false;\r\n    router.isExplicitNavigationBack = false;\r\n    router.isNavigatingFirst = false;\r\n    router.isNavigatingNew = false;\r\n    router.isNavigatingRefresh = false;\r\n    router.isNavigatingForward = false;\r\n    router.isNavigatingBack = false;\r\n    router.couldDeactivate = false;\r\n\r\n    let eventName: string;\r\n\r\n    if (result.output instanceof Error) {\r\n      eventName = RouterEvent.Error;\r\n    } else if (!result.completed) {\r\n      eventName = RouterEvent.Canceled;\r\n    } else {\r\n      let queryString = instruction.queryString ? ('?' + instruction.queryString) : '';\r\n      router.history.previousLocation = instruction.fragment + queryString;\r\n      eventName = RouterEvent.Success;\r\n    }\r\n\r\n    eventAggregator.publish(eventName, eventArgs);\r\n    eventAggregator.publish(RouterEvent.Complete, eventArgs);\r\n  } else {\r\n    eventAggregator.publish(RouterEvent.ChildComplete, eventArgs);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst restorePreviousLocation = (router: AppRouter): void => {\r\n  let previousLocation = router.history.previousLocation;\r\n  if (previousLocation) {\r\n    router.navigate(previousLocation, { trigger: false, replace: true });\r\n  } else if (router.fallbackRoute) {\r\n    router.navigate(router.fallbackRoute, { trigger: true, replace: true });\r\n  } else {\r\n    logger.error('Router navigation failed, and no previous location or fallbackRoute could be restored.');\r\n  }\r\n};\r\n","/**\r\n* The status of a Pipeline.\r\n*/\r\nexport const enum PipelineStatus {\r\n  Completed = 'completed',\r\n  Canceled = 'canceled',\r\n  Rejected = 'rejected',\r\n  Running = 'running'\r\n}\r\n","/**\r\n * A list of known router events used by the Aurelia router\r\n * to signal the pipeline has come to a certain state\r\n */\r\n// const enum is preserved in tsconfig\r\nexport const enum RouterEvent {\r\n  Processing = 'router:navigation:processing',\r\n  Error = 'router:navigation:error',\r\n  Canceled = 'router:navigation:canceled',\r\n  Complete = 'router:navigation:complete',\r\n  Success = 'router:navigation:success',\r\n  ChildComplete = 'router:navigation:child:complete'\r\n}\r\n","/**\r\n * Available pipeline slot names to insert interceptor into router pipeline\r\n */\r\n// const enum is preserved in tsconfig\r\nexport const enum PipelineSlotName {\r\n  /**\r\n   * Authorization slot. Invoked early in the pipeline,\r\n   * before `canActivate` hook of incoming route\r\n   */\r\n  Authorize = 'authorize',\r\n  /**\r\n   * Pre-activation slot. Invoked early in the pipeline,\r\n   * Invoked timing:\r\n   *   - after Authorization slot\r\n   *   - after canActivate hook on new view model\r\n   *   - before deactivate hook on old view model\r\n   *   - before activate hook on new view model\r\n   */\r\n  PreActivate = 'preActivate',\r\n  /**\r\n   * Pre-render slot. Invoked later in the pipeline\r\n   * Invokcation timing:\r\n   *   - after activate hook on new view model\r\n   *   - before commit step on new navigation instruction\r\n   */\r\n  PreRender = 'preRender',\r\n  /**\r\n   * Post-render slot. Invoked last in the pipeline\r\n   */\r\n  PostRender = 'postRender'\r\n}\r\n"],"names":["RouteRecognizer","Container","LogManager.getLogger","tslib_1.__extends","History","EventAggregator","PipelineStatus","RouterEvent","PipelineSlotName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;AAGA;IA4DE,+BAAY,IAA+B;;;;QAT3C,SAAI,GAAwC,IAAI,CAAC;QAEjD,YAAO,GAAwB,EAAE,CAAC;QAQhC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAE1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAE/B,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,IAAI,OAAO,GAA0B,IAAI,CAAC;QAC1C,GAAG;YACD,IAAI,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YACtD,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE;;gBAEnD,OAAO,aAAa,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC;aACjD;YAED,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACtC,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;SACrC,QAAQ,OAAO,EAAE;QAElB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,OAAb,MAAM,GAAQ,EAAE,EAAE,IAAI,CAAC,WAAW,SAAK,cAAc,EAAC,CAAC;QACvE,IAAI,CAAC,aAAa,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KACrD;;;;IAKD,kDAAkB,GAAlB;QACE,IAAI,YAAY,GAA4B,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,oBAAoB,GAAwC,IAAI,CAAC,oBAAoB,CAAC;QAE1F,KAAK,IAAI,GAAG,IAAI,oBAAoB,EAAE;YACpC,IAAI,gBAAgB,GAAG,oBAAoB,CAAC,GAAG,CAAC,CAAC,0BAA0B,CAAC;YAC5E,IAAI,gBAAgB,EAAE;gBACpB,YAAY,CAAC,IAAI,OAAjB,YAAY,EAAS,gBAAgB,CAAC,kBAAkB,EAAE,EAAE;aAC7D;SACF;QAED,OAAO,YAAY,CAAC;KACrB;;;;;IAMD,0DAA0B,GAA1B;QACE,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,mBAAmB,GAAA,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAA,CAAC,CAAC;KACjF;IAOD,sDAAsB,GAAtB,UACE,iBAAmD,EACnD,QAAiC,EACjC,QAAiB,EACjB,SAAe;QAGf,IAAI,mBAAwC,CAAC;QAC7C,IAAI,YAAY,GAAG,OAAO,iBAAiB,KAAK,QAAQ,GAAG,iBAAiB,GAAG,iBAAiB,CAAC,IAAI,CAAC;QACtG,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,IAAM,MAAM,GAAgB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,eAAe,EAAE,YAAY,EAAE,CAAC,CAAC;QAEnG,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;YACzC,mBAAmB,GAAG;gBACpB,IAAI,EAAE,iBAAiB;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,SAAS;gBACpB,WAAW,EAAE,SAAS,CAAC,WAAW;gBAClC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAAuB;aAClF,CAAC;SACH;aAAM;YACL,mBAAmB,GAAG;gBACpB,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,iBAAiB,CAAC,QAAQ;gBACpC,SAAS,EAAE,iBAAiB,CAAC,SAAS;gBACtC,QAAQ,EAAE,iBAAiB,CAAC,QAAQ;gBACpC,WAAW,EAAE,iBAAiB,CAAC,SAAS,CAAC,WAAW;gBACpD,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAAuB;aAClF,CAAC;SACH;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,GAAG,mBAAmB,CAAC;KACtE;;;;IAKD,+CAAe,GAAf;;QAEE,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,KAAe,CAAC;QAC9C,IAAI,aAAa,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACjD,OAAO,WAAW,CAAC,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;KAC9C;;;;;IAMD,+CAAe,GAAf;QACE,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC1C,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC3C,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAEnC,IAAI,WAAW,EAAE;YACf,IAAI,IAAI,GAAG,GAAG,WAAW,CAAC;SAC3B;QAED,OAAO,IAAI,CAAC;KACb;;;;IAKD,0CAAU,GAAV;QAAA,iBA0BC;QAzBC,IAAI,UAAU,GAAG,SAAS,CAAC;QAC3B,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAExC,IAAI,QAAQ,KAAK,EAAE,EAAE;YACnB,IAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK;gBAC/C,OAAO,KAAK,CAAC,IAAI,KAAK,KAAI,CAAC,MAAM,CAAC,IAAI;oBACpC,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;aACtB,CAAC,CAAC;YACH,IAAI,aAAa,EAAE;gBACjB,QAAQ,GAAG,aAAa,CAAC,KAAY,CAAC;aACvC;SACF;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC7B;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC1C,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAE3C,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC7B;QAED,OAAO,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACnE;;;;;IAMD,8CAAc,GAAd,UAAe,UAAmB;QAAlC,iBAwDC;QAvDC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAEjC,IAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACrD,IAAI,mBAAmB,EAAE;YACvB,mBAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;SACtD;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAE3B,IAAI,KAAK,GAAoB,EAAE,CAAC;QAChC,IAAI,UAAU,GAAgB,EAAE,CAAC;QACjC,IAAI,oBAAoB,GAAwC,IAAI,CAAC,oBAAoB,CAAC;gCAEjF,YAAY;YACnB,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAE9C,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,oDAAkD,mBAAmB,CAAC,QAAQ,MAAG,CAAC,CAAC;aACpG;YAED,IAAI,mBAAmB,GAAG,mBAAmB,CAAC,0BAA0B,CAAC;YACzE,IAAI,mBAAmB,CAAC,QAAQ,8BAAyC;gBACvE,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,kBAAkB,EAAE;oBACjE,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;iBAC5D;qBAAM;oBACL,IAAI,UAAU,EAAE;wBACd,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,UAAA,EAAE,mBAAmB,qBAAA,EAAE,CAAC,CAAC;qBACpD;oBACD,KAAK,CAAC,IAAI,CACR,QAAQ;yBACL,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC;yBACxC,IAAI,CAAC,cAAM,OAAA,mBAAmB;0BAC3B,mBAAmB,CAAC,cAAc,CAAC,UAAU,CAAC;0BAC9C,OAAO,CAAC,OAAO,EAAE,GAAA,CACpB,CACJ,CAAC;iBACH;aACF;iBAAM;gBACL,IAAI,mBAAmB,EAAE;oBACvB,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;iBAC5D;aACF;;QA7BH,KAAK,IAAI,YAAY,IAAI,oBAAoB;oBAApC,YAAY;SA8BpB;QAED,OAAO,OAAO;aACX,GAAG,CAAC,KAAK,CAAC;aACV,IAAI,CAAC;YACJ,UAAU,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAA,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC;SACb,CAAC;aACD,IAAI,CAAC,cAAM,OAAA,KAAK,CAAC,KAAI,CAAC,GAAA,CAAC,CAAC;KAC5B;;IAGD,4CAAY,GAAZ;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACpD,IAAI,KAAK,EAAE;YACT,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAChC;KACF;;IAGD,2CAAW,GAAX,UAAY,SAAyB;QAAzB,0BAAA,EAAA,iBAAyB;QACnC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC/C,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC;QACpC,IAAI,oBAAoB,GAAwC,IAAI,CAAC,oBAAoB,CAAC;QAE1F,IAAI,aAAa,EAAE;YACjB,KAAK,GAAG,iBAAiB,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;SACzD;QAED,KAAK,IAAI,YAAY,IAAI,oBAAoB,EAAE;YAC7C,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAI,qBAAqB,GAAG,mBAAmB,CAAC,0BAA0B,CAAC;YAE3E,IAAI,qBAAqB,EAAE;gBACzB,IAAI,UAAU,GAAG,qBAAqB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC9D,IAAI,UAAU,EAAE;oBACd,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAC9B;aACF;SACF;QAED,IAAI,WAAW,CAAC,MAAM,EAAE;YACtB,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,GAAG,SAAS,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;SACxE;QAED,IAAI,iBAAiB,CAAC,KAAK,EAAE;YAC3B,KAAK,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,EAAE,IAAI,iBAAiB,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;SAC/F;QAED,OAAO,KAAK,CAAC;KACd;IACH,4BAAC;CAAA,IAAA;AAED,IAAM,KAAK,GAAG,UAAC,WAAkC;IAC/C,WAAW,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACvC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;CACzB,CAAC;;ACtVF;;;AAGA;IAuCE,kBAAY,MAAc,EAAE,YAAoB;;;;QAlChD,aAAQ,GAAY,KAAK,CAAC;;;;QAK1B,UAAK,GAAW,IAAI,CAAC;;;;QAKrB,SAAI,GAAW,IAAI,CAAC;;;;QAKpB,iBAAY,GAAW,IAAI,CAAC;;;;QAK5B,aAAQ,GAAQ,EAAE,CAAC;;;;QAKnB,WAAM,GAAgB,IAAI,CAAC;QAUzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;KAClC;;;;;;;;IASD,2BAAQ,GAAR,UAAS,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;SAC3B;KACF;IACH,eAAC;CAAA;;SC9De,sBAAsB,CAAC,IAAY,EAAE,YAAqB,EAAE,QAAyB;IAAzB,yBAAA,EAAA,gBAAyB;IACnG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACpC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;KACnB;IAED,IAAI,YAAY,IAAI,QAAQ,EAAE;QAC5B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACvC;IAED,OAAO,IAAI,CAAC;CACb;AAED,SAAgB,iBAAiB,CAAC,QAAgB,EAAE,OAAe,EAAE,YAAqB,EAAE,QAAkB;IAC5G,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAChC,OAAO,QAAQ,CAAC;KACjB;IAED,IAAI,IAAI,GAAG,EAAE,CAAC;IAEd,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACxC,IAAI,IAAI,GAAG,CAAC;KACb;IAED,IAAI,IAAI,OAAO,CAAC;IAEhB,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC1E,IAAI,IAAI,GAAG,CAAC;KACb;IAED,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACvE,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAC3C;IAED,OAAO,sBAAsB,CAAC,IAAI,GAAG,QAAQ,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;CACxE;AAED,SAAgB,WAAW,CAAC,QAAgB,EAAE,OAAe,EAAE,YAAsB;IACnF,IAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC/B,OAAO,sBAAsB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KACvD;IAED,OAAO,iBAAiB,CAAC,QAAQ,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;CAC3D;AAED,SAAgB,oCAAoC,CAAC,MAAmB;IACtE,IAAI,YAAY,GAAG,EAAE,CAAC;IAEtB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;YACrD,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACxC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5B;KACF;SAAM;QACL,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;KAC9C;IAED,OAAO,YAAY,CAAC;CACrB;AAED,IAAM,YAAY,GAAG,OAAO,CAAC;AAC7B,IAAM,aAAa,GAAG,8BAA8B,CAAC;;ACzDrD;;;;;AAKA;IAAA;QACE,iBAAY,GAAoC,EAAE,CAAC;QACnD,YAAO,GAOH,EAAE,CAAC;QACP,kBAAa,GAA2D,EAAE,CAAC;KA4L5E;;;;;;;;IA5KC,6CAAe,GAAf,UAAgB,IAAY,EAAE,IAA6B;QACzD,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,8CAAgB,GAAhB,UAAiB,IAA6B;QAC5C,OAAO,IAAI,CAAC,eAAe,8BAA6B,IAAI,CAAC,CAAC;KAC/D;;;;;;;IAQD,gDAAkB,GAAlB,UAAmB,IAA6B;QAC9C,OAAO,IAAI,CAAC,eAAe,kCAA+B,IAAI,CAAC,CAAC;KACjE;;;;;;;IAQD,8CAAgB,GAAhB,UAAiB,IAA6B;QAC5C,OAAO,IAAI,CAAC,eAAe,8BAA6B,IAAI,CAAC,CAAC;KAC/D;;;;;;;IAQD,+CAAiB,GAAjB,UAAkB,IAA6B;QAC7C,OAAO,IAAI,CAAC,eAAe,gCAA8B,IAAI,CAAC,CAAC;KAChE;;;;;;;IAQD,2CAAa,GAAb,UAAc,QAAgB;QAC5B,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;QAC/B,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,iCAAG,GAAH,UAAI,KAAkC;QAAtC,iBAOC;QANC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC7B;;;;;;;;IASD,iDAAmB,GAAnB,UAAoB,cAAwE;QAC1F,IAAI,CAAC,gBAAgB,GAAG,cAAc,CAAC;QACvC,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,sCAAQ,GAAR,UAAS,MAAmB;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,MAAM;YAC3B,IAAI,YAAY,GAAG,oCAAoC,CAAC,MAAM,CAAC,CAAC;YAEhE,IAAI,QAAQ,CAAC;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;gBACrD,IAAI,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;gBAClC,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,IAAI,EAAE,CAAC;gBAClD,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;iBAC/C;gBAED,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;aACxC;SACF,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;KACb;;;;;;;;IASD,8CAAgB,GAAhB,UAAiB,MAA4B;QAC3C,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC;QACjC,OAAO,IAAI,CAAC;KACb;;;;;;IAOD,4CAAc,GAAd,UAAe,MAAc;QAC3B,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;YACrD,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SACzB;QAEG,IAAA,SAAsF,EAApF,gBAAK,EAAE,kCAAc,EAAE,0CAAkB,EAAE,kCAAc,EAAE,sCAAyB,CAAC;QAE3F,IAAI,KAAK,EAAE;YACT,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;QAED,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;SACxC;QAED,IAAI,kBAAkB,EAAE;YACtB,MAAM,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;SAChD;QAED,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,aAAa,GAAG,cAAc,CAAC;SACvC;QAED,IAAI,gBAAgB,EAAE;YACpB,MAAM,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;SAC9C;QAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE5C,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACvC,IAAI,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAAC;QAC7C,IAAI,iBAAiB,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;aACxE;YAED,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;YAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,iBAAiB,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;gBAC/C,IAAA,qBAAiC,EAA/B,gBAAI,EAAE,cAAyB,CAAC;gBACtC,gBAAgB,CAAC,OAAO,CAAC,MAAI,EAAE,IAAI,CAAC,CAAC;aACtC;SACF;KACF;IACH,0BAAC;CAAA;;AC/JD;;;AAGA;;;;;IAoJE,gBAAY,SAAoB,EAAE,OAAgB;QAAlD,iBAIC;;;;QA9CD,WAAM,GAAW,IAAI,CAAC;QAEtB,YAAO,GAAQ,EAAE,CAAC;;;;QAKlB,qBAAgB,GAAwB,EAAE,CAAC;;;;;;QAwB3C,mBAAc,GAA8B,UAAC,KAAa;YACxD,IAAI,KAAI,CAAC,MAAM,EAAE;gBACf,OAAO,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aAC1C;YACD,OAAO,KAAK,CAAC;SACd,CAAA;QAOC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;;IAMD,sBAAK,GAAL;QAAA,iBAuBC;QAtBC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;QACtC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,IAAIA,sCAAe,EAAE,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,IAAIA,sCAAe,EAAE,CAAC;QAC9C,IAAI,CAAC,kBAAkB,GAAG,IAAI,OAAO,CAAC,UAAA,OAAO;YAC3C,KAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC;SAC1C,CAAC,CAAC;KACJ;IAKD,sBAAI,0BAAM;;;;aAAV;YACE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;SACrB;;;OAAA;;;;;;;IAQD,iCAAgB,GAAhB,UAAiB,QAAyB,EAAE,IAAa;QACvD,IAAI,GAAG,IAAI,IAAI,SAAS,CAAC;QACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;KACjC;;;;IAKD,iCAAgB,GAAhB;QACE,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAChC;;;;;;IAOD,0BAAS,GAAT,UAAU,gBAA8F;QAAxG,iBAqBC;QApBC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,IAAI,MAAM,GAAkC,gBAAuC,CAAC;QACpF,IAAI,MAA2B,CAAC;QAChC,IAAI,OAAO,gBAAgB,KAAK,UAAU,EAAE;YAC1C,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;YACnC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;SACnC;QAED,OAAO,OAAO;aACX,OAAO,CAAC,MAAM,CAAC;aACf,IAAI,CAAC,UAAC,CAAC;YACN,IAAI,CAAC,IAAK,CAAyB,CAAC,cAAc,EAAE;gBAClD,MAAM,GAAG,CAAC,CAAC;aACZ;YAED,MAAM,CAAC,cAAc,CAAC,KAAI,CAAC,CAAC;YAC5B,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,KAAI,CAAC,yBAAyB,EAAE,CAAC;SAClC,CAAC,CAAC;KACN;;;;;;;IAQD,yBAAQ,GAAR,UAAS,QAAgB,EAAE,OAA2B;QACpD,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE;YACrC,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAChD;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,CAAC;KACxG;;;;;;;;;IAUD,gCAAe,GAAf,UAAgB,KAAa,EAAE,MAAY,EAAE,OAA2B;QACtE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KACrC;;;;IAKD,6BAAY,GAAZ;QACE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;KAC7B;;;;;;;IAQD,4BAAW,GAAX,UAAY,SAAqB;QAC/B,IAAI,WAAW,GAAG,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;QAC1B,OAAO,WAAW,CAAC;KACpB;;;;;;;;;IAUD,yBAAQ,GAAR,UAAS,WAAiC,EAAE,MAAgB,EAAE,OAAiB;QAAnC,uBAAA,EAAA,WAAgB;QAAE,wBAAA,EAAA,YAAiB;;;;QAI7E,IAAI,UAAU,GAAG,YAAY,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC;QACnF,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,WAAoC,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aAC3D;YACD,MAAM,IAAI,KAAK,CAAC,wBAAsB,WAAW,iDAA6C,WAAW,4CAA0C,CAAC,CAAC;SACtJ;QACD,IAAI,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,WAAoC,EAAE,MAAM,CAAC,CAAC;QAC7E,IAAI,UAAU,GAAG,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrG,OAAO,OAAO,CAAC,QAAQ,GAAG,KAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,GAAG,UAAY,GAAG,UAAU,CAAC;KACzF;;;;;;IAOD,+BAAc,GAAd,UAAe,MAAmB;QAChC,IAAI,QAAQ,GAAG,IAAI,QAAQ,CACzB,IAAI,EACJ,MAAM,IAAI,MAAM;cACZ,MAAM,CAAC,IAAI;;cAEX,MAAM,CAAC,KAAe,CAAC,CAAC;QAC9B,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC9B,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;QAC5B,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAC5B,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QACpC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAEzB,OAAO,QAAQ,CAAC;KACjB;;;;;;;IAQD,yBAAQ,GAAR,UAAS,MAAmB,EAAE,QAAmB;QAC/C,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC/B,IAAI,YAAY,GAAG,oCAAoC,CAAC,MAAM,CAAC,CAAC;;YAEhE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/C,OAAO;SACR;QAED,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE5B,IAAI,EAAE,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAC1D,MAAM,CAAC,SAAS,GAAG;gBACjB,SAAS,EAAE;oBACT,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;iBAClB;aACF,CAAC;SACH;QAED,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEzB,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;QACxB,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC1B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACvB;QACD,IAAI,aAAa,GAAG,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC;QAClD,IAAI,KAAK,GAAU,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;YACtC,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,MAAsB;YAC/B,aAAa,EAAE,aAAa;SACR,CAAC,CAAC;QAExB,IAAI,IAAI,EAAE;YACR,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,OAAO,MAAM,CAAC,QAAQ,CAAC;YACvB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,SAAS,CAAC,KAAK,GAAM,IAAI,iBAAc,CAAC;YACxC,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;gBACxB,IAAI,EAAE,SAAS,CAAC,KAAK;gBACrB,OAAO,EAAE,SAAS;gBAClB,aAAa,EAAE,aAAa;aAC7B,CAAC,CAAC;YAEH,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC9B,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YACrC,SAAS,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC;SAC1D;QAED,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAE3B,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAEjC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,KAAK,CAAC,KAAK,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;YACnF,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,EAAE,MAAM,KAAK,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAC3F,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,MAAM,CAAC,KAAK,GAAG,oFAAoF,CAAC,CAAC;aACrJ;YAED,IAAI,OAAO,QAAQ,CAAC,KAAK,KAAK,QAAQ,EAAE;gBACtC,QAAQ,CAAC,KAAK,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC;aACxC;YAED,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;;;;;YAQ1B,UAAU,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAK,CAAC,CAAC,KAAK,GAAQ,CAAC,CAAC,KAAK,GAAA,CAAC,CAAC;SACxD;KACF;;;;;;IAOD,yBAAQ,GAAR,UAAS,IAAY;QACnB,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KACzF;;;;;;IAOD,4BAAW,GAAX,UAAY,IAAY;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACxC;;;;;;IAOD,oCAAmB,GAAnB,UAAoB,MAA6B;QAAjD,iBAaC;QAZC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,eAAe,GAAG,UAAA,WAAW;YAChC,OAAO,KAAI;iBACR,kBAAkB,CAAC,MAAM,EAAE,WAAW,CAAC;iBACvC,IAAI,CAAC,UAAA,CAAC;gBACL,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,OAAO,WAAW,CAAC;aACpB,CAAC,CAAC;SACN,CAAC;KACH;;;;IAKD,4BAAW,GAAX;QACE,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAI,YAAY,EAAE;YAChB,OAAO,YAAY,CAAC,WAAW,EAAE,CAAC;SACnC;QAED,IAAI,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACjD,IAAI,kBAAkB,EAAE;YACtB,kBAAkB,CAAC,YAAY,EAAE,CAAC;SACnC;QACD,OAAO,SAAS,CAAC;KAClB;;;;;IAMD,kCAAiB,GAAjB;QACE,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;QAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE,EAAE;YACpD,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;gBACxB,OAAO,CAAC,IAAI,GAAG,iBAAiB,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aAClG;iBAAM;gBACL,OAAO,CAAC,IAAI,GAAG,sBAAsB,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aACxF;SACF;KACF;;;;;;IAOD,oCAAmB,GAAnB,UAAoB,iBAAsC;;QAExD,IAAI,gBAAgB,GAAwC,iBAAiB,CAAC;QAC9E,KAAK,IAAI,YAAY,IAAI,gBAAgB,EAAE;YACzC,IAAI,cAAc,GAAG,gBAAgB,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG;gBACpC,QAAQ,EAAE,cAAc,CAAC,QAAQ;aAClC,CAAC;SACH;KACF;;IAGD,gCAAe,GAAf;QACE,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,YAAY,EAAE,YAAY,CAAC,kBAAkB,CAAC,CAAC;SAC/E;KACF;;IAGD,6CAA4B,GAA5B,UAA6B,GAAgB,EAAE,iBAA+C;QAAjE,oBAAA,EAAA,QAAgB;QAAE,kCAAA,EAAA,wBAA+C;QAC5F,IAAI,QAAQ,GAAG,GAAG,CAAC;QACnB,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YACrC,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;SAC1C;QAED,IAAI,uBAAuB,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAA+B,CAAC;QAC5F,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE;YAC/D,uBAAuB,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAA+B,CAAC;SAC9F;QAED,IAAI,eAAe,GAA8B;YAC/C,QAAQ,UAAA;YACR,WAAW,aAAA;YACX,MAAM,EAAE,IAAI;YACZ,iBAAiB,mBAAA;YACjB,mBAAmB,EAAE,IAAI,CAAC,kBAAkB;YAC5C,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE;gBACP,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,kBAAkB;aACpD;SACF,CAAC;QAEF,IAAI,MAAsC,CAAC;QAE3C,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,MAAM,EAAE;YAC7D,IAAI,KAAK,GAAG,uBAAuB,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,WAAW,GAAG,IAAI,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE;gBAC7E,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,WAAW,EAAE,KAAK,CAAC,WAAW,IAAI,uBAAuB,CAAC,WAAW;gBACrE,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO;aACtC,CAAC,CAAC,CAAC;YAEJ,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,EAAE;gBACvC,MAAM,GAAG,0BAA0B,CAAC,WAAW,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACxE;iBAAM,IAAI,KAAK,CAAC,OAAO,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,kBAAkB,KAAK,UAAU,EAAE;gBAClF,MAAM,GAAG,0BAA0B,CAAC,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;aACnG;iBAAM;gBACL,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;aACvC;SACF;aAAM,IAAI,IAAI,CAAC,eAAe,EAAE;YAC/B,IAAI,WAAW,GAAG,IAAI,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE;gBAC7E,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gBAC1B,WAAW,EAAE,uBAAuB,GAAG,uBAAuB,CAAC,WAAW,GAAG,EAAE;gBAC/E,MAAM,EAAE,IAAI;aACb,CAAC,CAAC,CAAC;YAEJ,MAAM,GAAG,0BAA0B,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;SACxE;aAAM,IAAI,IAAI,CAAC,MAAM,EAAE;YACtB,IAAI,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEtD,IAAI,MAAM,EAAE;gBACV,IAAI,oBAAoB,GAAG,IAAI,CAAC,gCAAgC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;gBAE5F,IAAI,WAAW,GAAG,IAAI,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE;oBAC7E,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC1B,WAAW,EAAE,uBAAuB,GAAG,uBAAuB,CAAC,WAAW,GAAG,EAAE;oBAC/E,MAAM,EAAE,MAAM;oBACd,iBAAiB,EAAE,oBAAoB;oBACvC,kBAAkB,EAAE,IAAI;oBACxB,MAAM,EAAE,IAAI;iBACb,CAAC,CAAC,CAAC;gBAEJ,MAAM,GAAG,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;aAC1E;SACF;QAED,IAAI,MAAM,IAAI,iBAAiB,EAAE;YAC/B,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;SAChE;QAED,OAAO,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,sBAAoB,GAAK,CAAC,CAAC,CAAC;KACvE;;IAGD,iDAAgC,GAAhC,UAAiC,MAAc,EAAE,WAAkC;QACjF,IAAI,WAAW,CAAC,MAAM,KAAK,MAAM,EAAE;YACjC,WAAW,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;YACtC,OAAO,WAAW,CAAC;SACpB;aAAM,IAAI,WAAW,CAAC,iBAAiB,EAAE;YACxC,OAAO,IAAI,CAAC,gCAAgC,CAAC,MAAM,EAAE,WAAW,CAAC,iBAAiB,CAAC,CAAC;SACrF;QACD,OAAO,SAAS,CAAC;KAClB;;IAGD,uCAAsB,GAAtB,UAAuB,MAAc;QACnC,IAAI,MAAM,CAAC,eAAe,EAAE;YAC1B,OAAO,MAAM,CAAC;SACf;aAAM,IAAI,MAAM,CAAC,MAAM,EAAE;YACxB,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACnD;QACD,OAAO,KAAK,CAAC;KACd;;;;IAKD,mCAAkB,GAAlB,UAAmB,MAA4B,EAAE,WAAkC;QAAnF,iBA0BC;QAzBC,OAAO,OAAO;aACX,OAAO,CAAC,MAAM,CAAC;aACf,IAAI,CAAC,UAAC,CAAM;YACX,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;gBACzB,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAiB,CAAC;aACvC;iBAAM,IAAI,OAAO,CAAC,KAAK,UAAU,EAAE;gBAClC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC;aACvB;YAED,OAAO,CAAC,CAAC;SACV,CAAC;;;;aAID,IAAI,CAAC,UAAC,CAAuB,IAAK,OAAA,OAAO,CAAC,KAAK,QAAQ,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAiB,GAAG,CAAC,GAAA,CAAC;aAC7F,IAAI,CAAC,UAAC,CAAc;YACnB,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;YAClC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAEvB,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACf,CAAC,CAAC,QAAQ,GAAG,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;aACrC;YAED,OAAO,CAAC,CAAC;SACV,CAAC,CAAC;KACN;IACH,aAAC;CAAA,IAAA;AAED;AACA,AAAO,IAAM,eAAe,GAAG,UAAC,MAAc,EAAE,WAAkC;IAChF,OAAO,MAAG,MAAM,CAAC,OAAO,IAAI,EAAE,KAAG,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,CAAE,CAAC;CACnE,CAAC;;AAGF,AAAO,IAAM,mBAAmB,GAAG,UAAC,MAAmB;IACrD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;KACzC;IAED,IAAI,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,EAAE;QACpC,IAAI,MAAI,GAAG,MAAM,CAAC,IAAI,IAAI,WAAW,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,MAAI,GAAG,yCAAyC,CAAC,CAAC;KAClG;IAED,IAAI,EAAE,UAAU,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,kBAAkB,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;QAC/F,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,MAAM,CAAC,KAAK,GAAG,yFAAyF,CAAC,CAAC;KAC1J;CACF,CAAC;;AAGF,AAAO,IAAM,0BAA0B,GAAG,UACxC,WAAkC,EAClC,SAAmB,EACnB,OAAa;IAEb,OAAO,OAAO;SACX,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;SAC7C,IAAI,CAAC;QACJ,IAAI,EAAE,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;YACxC,WAAW,CAAC,MAAM,CAAC,SAAS,GAAG;gBAC7B,SAAS,EAAE;oBACT,QAAQ,EAAE,WAAW,CAAC,MAAM,CAAC,QAAQ;iBACtC;aACF,CAAC;SACH;QAED,OAAO,WAAW,CAAC;KACpB,CAAC,CAAC;CACN,CAAC;;AC3tBF;AACA,AAAO,IAAM,YAAY,GAAG,UAAC,WAAkC,EAAE,KAA2B;IAC1F,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;IACf,IAAM,IAAI,GAAS;QACjB,KAAK,EAAE,CAAC;QAER,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE;YACxB,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAE/B,IAAI;gBACF,OAAO,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;aACvC;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACvB;SACF;aAAM;YACL,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;SACxB;KACM,CAAC;IAEV,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,IAAI,8BAA2B,CAAC;IACxE,IAAI,CAAC,MAAM,GAAG,uBAAuB,CAAC,IAAI,4BAA0B,CAAC;IACrE,IAAI,CAAC,MAAM,GAAG,uBAAuB,CAAC,IAAI,4BAA0B,CAAC;IAErE,OAAO,IAAI,CAAC;CACb,CAAC;;AAGF,AAAO,IAAM,uBAAuB,GAAG,UAAC,IAAU,EAAE,MAAsB;IACxE,OAAO,UAAC,MAAW,IAAK,OAAA,OAAO;SAC5B,OAAO,CAAC;QACP,MAAM,QAAA;QACN,MAAM,QAAA;QACN,SAAS,EAAE,MAAM;KAClB,CAAC,GAAA,CAAC;CACN,CAAC;;AClCF;;;AAGA;IAAA;;;;;QAKE,UAAK,GAAyB,EAAE,CAAC;KAuClC;;;;;;IAhCC,0BAAO,GAAP,UAAQ,IAAuD;QAC7D,IAAI,GAAG,CAAC;QAER,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;YAC9B,GAAG,GAAG,IAAI,CAAC;SACZ;aAAM,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,UAAU,EAAE;;;YAG9C,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACxB;YAED,OAAO,IAAI,CAAC;SACb;aAAM;YACL,GAAG,GAAI,IAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7C;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAErB,OAAO,IAAI,CAAC;KACb;;;;;;IAOD,sBAAG,GAAH,UAAI,WAAkC;QACpC,IAAM,MAAM,GAAG,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,OAAO,MAAM,EAAE,CAAC;KACjB;IACH,eAAC;CAAA;;AC5BD;;;;;;AAMA,SAAgB,mBAAmB,CAAC,GAAQ;IAC1C,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,UAAU,CAAC;CAClD;;;;AAKD;;;;;IAcE,kBAAY,GAAW,EAAE,OAA+B;QAA/B,wBAAA,EAAA,YAA+B;QACtD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QACxE,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;KACvC;;;;;;IAOD,4BAAS,GAAT,UAAU,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACtB;;;;;;IAOD,2BAAQ,GAAR,UAAS,SAAiB;QACxB,IAAI,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,SAAS,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC;QAC1F,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACnD;IACH,eAAC;CAAA,IAAA;AAED;;;AAGA;;;;;;IAkBE,yBAAY,KAAa,EAAE,MAAgB,EAAE,OAA+B;QAAjD,uBAAA,EAAA,WAAgB;QAAE,wBAAA,EAAA,YAA+B;QAC1E,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QACxE,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;KACvC;;;;;;IAOD,mCAAS,GAAT,UAAU,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACtB;;;;;;IAOD,kCAAQ,GAAR,UAAS,SAAiB;QACxB,IAAI,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,SAAS,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC;QAC1F,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACzE;IACH,sBAAC;CAAA;;ACnHD;;;AAGA,SAAgB,oBAAoB,CAClC,WAAkC,EAClC,qBAA+B;IAE/B,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IAEhC,IAAI,UAAU,IAAI,MAAM,EAAE;QACxB,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC;KACvC;IAED,IAAM,eAAe,GAAG,WAAW,CAAC,mBAAmB,CAAC;IACxD,IAAM,sBAAsB,GAAG,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC;IAEnE,IAAI,eAAe,EAAE;QACnB,OAAO,oBAAoB,CAAC,WAAW,EAAE,eAAe,EAAE,sBAAsB,EAAE,qBAAqB,CAAC,CAAC;KAC1G;;IAGD,IAAM,aAAa,GAAwB,EAAE,CAAC;IAC9C,IAAI,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC;IACvC,KAAK,IAAI,YAAY,IAAI,eAAe,EAAE;QACxC,IAAI,cAAc,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,cAAc,CAAC,QAAQ,KAAK,IAAI,IAAI,YAAY,IAAI,sBAAsB,EAAE;YAC9E,cAAc,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;SACvD;QACD,aAAa,CAAC,YAAY,CAAC,GAAG;YAC5B,IAAI,EAAE,YAAY;YAClB,QAAQ;YACR,MAAM,EAAE,cAAc;SACvB,CAAC;KACH;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;CACvC;;;;;AAMD,AAAO,IAAM,iBAAiB,GAAG,UAAC,WAAkC;IAClE,IAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IAClC,IAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IAClC,OAAO,MAAM;SACV,4BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC;SAC7C,IAAI,CAAC,UAAA,mBAAmB;QAEvB,IAAM,MAAM,GAAwB,EAAE,CAAC;QACvC,IAAM,yBAAyB,GAAG,WAAW,CAAC,MAAM,CAAC;QACrD,IAAM,yBAAyB,GAAG,mBAAmB,CAAC,MAAM,CAAC;QAE7D,KAAK,IAAI,GAAG,IAAI,yBAAyB,EAAE;;YAEzC,IAAI,GAAG,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC7C,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;gBAEnB,IAAI,GAAG,IAAI,yBAAyB,EAAE;oBACpC,MAAM,CAAC,GAAG,CAAC,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;iBAC9C;aACF;iBAAM;gBACL,MAAM,CAAC,GAAG,CAAC,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC;aAC9C;SACF;QACD,IAAI,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;;QAGhG,KAAK,IAAI,GAAG,IAAI,yBAAyB,EAAE;YACzC,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,MAAI,GAAK,EAAE,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC;SACxF;QAED,IAAI,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;QAC1C,IAAI,WAAW,EAAE;YACf,gBAAgB,IAAI,GAAG,GAAG,WAAW,CAAC;SACvC;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;KACxD,CAAC,CAAC;CACN,CAAC;;;;;AAMF,AAAO,IAAM,oBAAoB,GAAG,UAClC,kBAAyC,EACzC,mBAA0C,EAC1C,sBAA2D,EAC3D,qBAA+B;IAG/B,IAAI,aAAa,GAAwB,EAAE,CAAC;IAC5C,IAAI,oBAAoB,GAAG,kBAAkB,CAAC,MAAM,CAAC;IACrD,IAAI,YAAY,GAAG,2BAA2B,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACxF,IAAI,OAAO,GAAoB,EAAE,CAAC;IAClC,IAAI,4BAA4B,GAAG,mBAAmB,CAAC,oBAA2D,CAAC;4BAE1G,YAAY;QAEnB,IAAM,uBAAuB,GAAG,4BAA4B,CAAC,YAAY,CAAC,CAAC;QAC3E,IAAM,qBAAqB,GAAG,uBAAuB,CAAC,SAAS,CAAC;QAChE,IAAM,6BAA6B,GAAG,oBAAoB,CAAC,SAAwC,CAAC;;;QAIpG,IAAI,kBAAkB,GAAG,YAAY,IAAI,6BAA6B;cAClE,6BAA6B,CAAC,YAAY,CAAC;cAC3C,uBAAuB,CAAC;QAE5B,IAAI,kBAAkB,CAAC,QAAQ,KAAK,IAAI,IAAI,YAAY,IAAI,sBAAsB,EAAE;YAClF,kBAAkB,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;SAC3D;QAED,IAAM,0BAA0B,GAAG,2BAA2B,CAC5D,kBAAkB,EAClB,uBAAuB,EACvB,kBAAkB,EAClB,YAAY,EACZ,qBAAqB,CACtB,CAAC;QACF,IAAM,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG;YACjD,IAAI,EAAE,YAAY;;YAElB,MAAM,EAAE,kBAAiC;YACzC,aAAa,EAAE,qBAAqB;YACpC,YAAY,EAAE,uBAAuB,CAAC,QAAQ;YAC9C,QAAQ,EAAE,0BAA0B;SACrB,CAAC;;;;QAKlB,IAAI,0BAA0B,gCAA2C,uBAAuB,CAAC,WAAW,EAAE;YAC5G,IAAM,IAAI,GAAG,kBAAkB,CAAC,eAAe,EAAE,CAAC;YAClD,IAAM,IAAI,GAAkB,uBAAuB;iBAChD,WAAW;iBACX,4BAA4B,CAAC,IAAI,EAAE,kBAAkB,CAAC;iBACtD,IAAI,CAAC,UAAC,gBAAuC;gBAC5C,YAAY,CAAC,0BAA0B,GAAG,gBAAgB,CAAC;gBAE3D,OAAO,oBAAoB,CACzB,gBAAgB;;;;gBAIhB,YAAY,CAAC,QAAQ,8CACtB;qBACE,IAAI,CAAC,UAAA,SAAS;oBACb,IAAI,SAAS,YAAY,QAAQ,EAAE;wBACjC,OAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;qBAClC;oBACD,gBAAgB,CAAC,IAAI,GAAG,SAAS,CAAC;;oBAElC,OAAO,IAAI,CAAC;iBACb,CAAC,CAAC;aACN,CAAC,CAAC;YAEL,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpB;;IA7DH,KAAK,IAAI,YAAY,IAAI,4BAA4B;gBAA5C,YAAY;KA8DpB;IAED,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,aAAa,GAAA,CAAC,CAAC;CACvD,CAAC;;;;;AAMF,AAAO,IAAM,2BAA2B,GAAG,UACzC,qBAA4C,EAC5C,uBAA4C,EAC5C,iBAAoD;;AAEpD,YAAqB,EACrB,qBAA+B;IAG/B,IAAI,oBAAoB,GAAG,qBAAqB,CAAC,MAAM,CAAC;IACxD,IAAI,qBAAqB,GAAG,uBAAuB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxE,IAAI,oBAA4C,CAAC;IAEjD,IAAI,uBAAuB,CAAC,QAAQ,KAAK,iBAAiB,CAAC,QAAQ,EAAE;QACnE,oBAAoB,2BAAsC;KAC3D;SAAM,IAAI,6BAA6B,IAAI,qBAAqB,EAAE;QACjE,oBAAoB,GAAG,qBAAqB,CAAC,2BAA2B,OAAjD,qBAAqB,EAAgC,qBAAqB,CAAC,aAAa,CAAC,CAAC;KAClH;SAAM,IAAI,oBAAoB,CAAC,kBAAkB,EAAE;QAClD,oBAAoB,GAAG,oBAAoB,CAAC,kBAAkB,CAAC;KAChE;SAAM,IAAI,YAAY,IAAI,qBAAqB,EAAE;QAChD,oBAAoB,4CAA8C;KACnE;SAAM;QACL,oBAAoB,8BAAuC;KAC5D;IACD,OAAO,oBAAoB,CAAC;CAC7B,CAAC;;AAGF,AAAO,IAAM,2BAA2B,GAAG,UAAC,IAA2B,EAAE,IAA2B;IAClG,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAI,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC;IAElF,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;QAC1B,IAAI,GAAG,KAAK,gBAAgB,EAAE;YAC5B,SAAS;SACV;QAED,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,GAAG,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;KACF;IAED,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;QAC1B,IAAI,GAAG,KAAK,gBAAgB,EAAE;YAC5B,SAAS;SACV;QAED,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,GAAG,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;KACF;IAED,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;QACpC,OAAO,KAAK,CAAC;KACd;IAED,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC;IACvC,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC;IACvC,KAAK,IAAI,GAAG,IAAI,eAAe,EAAE;QAC/B,IAAI,eAAe,CAAC,GAAG,CAAC,KAAK,eAAe,CAAC,GAAG,CAAC,EAAE;YACjD,OAAO,IAAI,CAAC;SACb;KACF;IAED,KAAK,IAAI,GAAG,IAAI,eAAe,EAAE;QAC/B,IAAI,eAAe,CAAC,GAAG,CAAC,KAAK,eAAe,CAAC,GAAG,CAAC,EAAE;YACjD,OAAO,IAAI,CAAC;SACb;KACF;IAED,OAAO,KAAK,CAAC;CACd,CAAC;;ACpPF;;;;AAIA;IAAA;KAYC;IAXC,qCAAG,GAAH,UAAI,qBAA4C,EAAE,IAAU;QAC1D,OAAO,oBAAoB,CAAC,qBAAqB,CAAC;aAC/C,IAAI,CAAC,UAAA,IAAI;YACR,IAAI,IAAI,YAAY,QAAQ,EAAE;gBAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC1B;YACD,qBAAqB,CAAC,IAAI,GAAG,IAAI,CAAC;YAClC,OAAO,IAAI,EAAE,CAAC;SACf,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACvB;IACH,8BAAC;CAAA;;ACND;;;AAGA,AAAO,IAAM,YAAY,GAAG,UAC1B,WAAwB,EACxB,qBAA4C;IAE5C,IAAI,YAAY,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAChE,IAAI,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,UAAC,WAAyB,IAAK,OAAA,SAAS,CAC1E,WAAW,EACX,WAAW,CAAC,qBAAqB,EACjC,WAAW,CAAC,YAAY,CACzB,GAAA,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;CAClC,CAAC;;;;AAKF,AAAO,IAAM,qBAAqB,GAAG,UACnC,qBAA4C,EAC5C,YAAiC;IAAjC,6BAAA,EAAA,iBAAiC;IAEjC,IAAI,aAAa,GAAiC,qBAAqB,CAAC,IAAI,CAAC;IAE7E,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;QACtC,IAAI,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,mBAAmB,GAAG,YAAY,CAAC,0BAA0B,CAAC;QAElE,IAAI,YAAY,CAAC,QAAQ,8BAAyC;YAChE,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,cAAA,EAAE,qBAAqB,uBAAA,EAAkB,CAAC,CAAC;YAE3E,IAAI,mBAAmB,EAAE;gBACvB,qBAAqB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;aAC1D;SACF;aAAM;YACL,IAAI,mBAAmB,GAAG,qBAAqB,CAAC,sBAAsB,CAAC;gBACrE,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,YAAY,CAAC,QAAQ;gBAC/B,QAAQ,EAAE,YAAY,CAAC,YAAY;gBACnC,SAAS,EAAE,YAAY,CAAC,aAAa;aACtC,CAAwB,CAAC;YAE1B,IAAI,mBAAmB,EAAE;gBACvB,mBAAmB,CAAC,0BAA0B,GAAG,mBAAmB,CAAC;gBACrE,qBAAqB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;aAC1D;SACF;KACF;IAED,OAAO,YAAY,CAAC;CACrB,CAAC;;;;AAKF,AAAO,IAAM,SAAS,GAAG,UACvB,WAAwB,EACxB,qBAA4C,EAC5C,YAA0B;IAE1B,IAAI,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;IACrC,IAAI,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;IAEvD,OAAO,aAAa,CAAC,WAAW,EAAE,qBAAqB,EAAE,UAAU,CAAC;SACjE,IAAI,CAAC,UAAC,SAAS;QACd,IAAI,mBAAmB,GAAG,qBAAqB,CAAC,sBAAsB,CAAC;YACrE,IAAI,EAAE,YAAY,CAAC,IAAI;YACvB,QAAQ,EAAE,YAAY,CAAC,QAAQ;YAC/B,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,SAAS;SACrB,CAAwB,CAAC;QAE1B,IAAI,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;QACxC,IAAI,WAAW,EAAE;YACf,IAAI,IAAI,GAAG,qBAAqB,CAAC,eAAe,EAAE,CAAC;YAEnD,OAAO,WAAW;iBACf,4BAA4B,CAAC,IAAI,EAAE,qBAAqB,CAAC;iBACzD,IAAI,CAAC,UAAC,gBAAgB;gBACrB,YAAY,CAAC,0BAA0B,GAAG,gBAAgB,CAAC;gBAE3D,OAAO,oBAAoB,CAAC,gBAAgB,CAAC;qBAC1C,IAAI,CAAC,UAAC,SAAS;oBACd,IAAI,SAAS,YAAY,QAAQ,EAAE;wBACjC,OAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;qBAClC;oBACD,gBAAgB,CAAC,IAAI,GAAG,SAAS,CAAC;oBAClC,mBAAmB,CAAC,0BAA0B,GAAG,gBAAgB,CAAC;oBAElE,OAAO,YAAY,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;iBACpD,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;QAED,OAAO,KAAK,CAAC,CAAC;KACf,CAAC,CAAC;CACN,CAAC;;;;;AAMF,AAAO,IAAM,aAAa,GAAG,UAC3B,WAAwB,EACxB,qBAA4C,EAC5C,MAAmB;IAEnB,IAAI,MAAM,GAAG,qBAAqB,CAAC,MAAM,CAAC;IAC1C,IAAI,aAAa,GAAG,qBAAqB,CAAC,aAAa,CAAC;IAExD,OAAO,OAAO,CAAC,OAAO,EAAE;SACrB,IAAI,CAAC,cAAM,OAAA,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,qBAAqB,CAAC,GAAA,CAAC;SACxE,IAAI;;;;;IAKH,UAAC,SAA4B;QACrB,IAAA,+BAAS,EAAE,yCAAc,CAAe;QAC9C,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;QAC1B,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;QAE1B,IAAI,iBAAiB,IAAI,SAAS,EAAE;YAClC,IAAI,aAAW,GAAG,cAAc,CAAC,cAAc,EAAE,CAAC;YAClD,SAAS,CAAC,WAAW,GAAG,aAAW,CAAC;YAEpC,OAAO,aAAW;iBACf,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,SAAS,CAAC,eAAe,CAAC,CAAC,EAAE,aAAW,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC;iBAC/G,IAAI,CAAC,cAAM,OAAA,SAAS,GAAA,CAAC,CAAC;SAC1B;QAED,OAAO,SAAS,CAAC;KAClB,CACF,CAAC;CACL,CAAC;;ACnJF;;;;AAIA;IAAA;KASC;;;;;;IAHC,+BAAS,GAAT,UAAU,MAAc,EAAE,MAAmB,EAAE,qBAA4C;QACzF,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;KACrG;IACH,kBAAC;CAAA;;ACbD;;;AAGA;IAQE,uBAAY,WAAwB;QAClC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAChC;;IARM,oBAAM,GAAb,cAAkB,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE;;;;IAYzC,2BAAG,GAAH,UAAI,qBAA4C,EAAE,IAAU;QAC1D,OAAO,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,qBAAqB,CAAC;aACzD,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC5B;IACH,oBAAC;CAAA;;ACvBD;;;AAGA;IAAA;KASC;IARC,+BAAG,GAAH,UAAI,qBAA4C,EAAE,IAAc;QAC9D,OAAO,qBAAqB;aACzB,cAAc,mBAAmB,IAAI,CAAC;aACtC,IAAI,CAAC;YACJ,qBAAqB,CAAC,YAAY,EAAE,CAAC;YACrC,OAAO,IAAI,EAAE,CAAC;SACf,CAAC,CAAC;KACN;IACH,wBAAC;CAAA;;ACdD;;;;AAIA,AAAA,IAAkB,0BAajB;AAbD,WAAkB,0BAA0B;;;;IAI1C,oDAAsB,CAAA;;;;IAItB,kEAAoC,CAAA;;;;IAIpC,iDAAmB,CAAA;CACpB,EAbiB,0BAA0B,KAA1B,0BAA0B,QAa3C;;;;;AAMD,IAAa,kBAAkB,GAAuB;IACpD,QAAQ;IACR,eAAe;IACf,OAAO;CACR;;ACrBD;;;;;AAKA,AAAO,IAAM,oBAAoB,GAAG,UAClC,qBAA4C,EAC5C,YAA4C,EAC5C,IAAU,EACV,YAAsB;IAEtB,IAAI,IAAI,GAAiC,qBAAqB,CAAC,IAAI,CAAC;IACpE,IAAI,KAAK,GAAG,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAClD,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;IAErB,SAAS,OAAO,CAAC,GAAQ;QACvB,IAAI,YAAY,IAAI,cAAc,CAAC,GAAG,CAAC,EAAE;YACvC,OAAO,OAAO,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACzB;IAED,SAAS,OAAO;QACd,IAAI,CAAC,EAAE,EAAE;YACP,IAAI;gBACF,IAAI,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC;gBAC5D,OAAO,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACvD;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC3B;SACF;QAED,qBAAqB,CAAC,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;QAEpD,OAAO,IAAI,EAAE,CAAC;KACf;IAED,OAAO,OAAO,EAAE,CAAC;CAClB,CAAC;;;;;AAMF,AAAO,IAAM,iBAAiB,GAAG,UAC/B,IAAkC,EAClC,YAAoB,EACpB,IAA6B;IAA7B,qBAAA,EAAA,SAA6B;IAE7B,KAAK,IAAI,YAAY,IAAI,IAAI,EAAE;QAC7B,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC;QAE/C,IAAI,CAAC,YAAY,CAAC,QAAQ,KAAK,kBAAkB,CAAC,eAAe,IAAI,YAAY,CAAC,QAAQ,KAAK,kBAAkB,CAAC,OAAO;eACpH,aAAa,EAChB;YACA,IAAI,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;YAExC,IAAI,YAAY,IAAI,SAAS,EAAE;gBAC7B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACtB;SACF;QAED,IAAI,YAAY,CAAC,QAAQ,KAAK,kBAAkB,CAAC,OAAO,IAAI,aAAa,EAAE;YACzE,wBAAwB,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;SAC7D;aAAM,IAAI,YAAY,CAAC,0BAA0B,EAAE;YAClD,iBAAiB,CAAC,YAAY,CAAC,0BAA0B,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;SACrF;KACF;IAED,OAAO,IAAI,CAAC;CACb,CAAC;;;;AAKF,AAAO,IAAM,wBAAwB,GAAG,UACtC,SAA4B,EAC5B,YAAoB,EACpB,IAAwB;IAExB,IAAI,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;IAExC,IAAI,WAAW,IAAI,WAAW,CAAC,kBAAkB,EAAE;QACjD,IAAI,oBAAoB,GAAG,WAAW,CAAC,kBAAkB,CAAC,oBAAoB,CAAC;QAE/E,KAAK,IAAI,YAAY,IAAI,oBAAoB,EAAE;YAC7C,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAI,aAAa,GAAG,mBAAmB,CAAC,SAAS,CAAC;YAClD,IAAI,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC;YAE5C,IAAI,YAAY,IAAI,aAAa,EAAE;gBACjC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC1B;YAED,wBAAwB,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;SAC7D;KACF;CACF,CAAC;;;;AAKF,AAAO,IAAM,kBAAkB,GAAG,UAChC,qBAA4C,EAC5C,YAAwC,EACxC,IAAU,EACV,YAAsB;IAEtB,IAAI,KAAK,GAAG,eAAe,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;IACjE,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAEX,SAAS,OAAO,CAAC,GAAQ,EAAE,MAAc;QACvC,IAAI,YAAY,IAAI,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE;YAC/C,OAAO,OAAO,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACzB;IAED,SAAS,OAAO;;QACd,CAAC,EAAE,CAAC;QAEJ,IAAI,CAAC,GAAG,MAAM,EAAE;YACd,IAAI;gBACF,IAAI,SAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,MAAM,GAAG,CAAA,KAAA,SAAO,CAAC,SAAS,EAAC,YAAY,CAAC,WAAI,SAAO,CAAC,aAAa,CAAC,CAAC;gBACvE,OAAO,gBAAgB,CAAC,MAAM,EAAE,UAAC,GAAQ,IAAK,OAAA,OAAO,CAAC,GAAG,EAAE,SAAO,CAAC,MAAM,CAAC,GAAA,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aAC1F;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC3B;SACF;QAED,OAAO,IAAI,EAAE,CAAC;KACf;IAED,OAAO,OAAO,EAAE,CAAC;CAClB,CAAC;;;;;AAYF,AAAO,IAAM,eAAe,GAAG,UAC7B,qBAA4C,EAC5C,YAAwC,EACxC,IAA6B,EAC7B,MAAe;IADf,qBAAA,EAAA,SAA6B;IAG7B,IAAI,IAAI,GAAiC,qBAAqB,CAAC,IAAI,CAAC;IAEpE,MAAM;SACH,IAAI,CAAC,IAAI,CAAC;SACV,OAAO,CAAC,UAAC,YAAY;QACpB,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,mBAAmB,GAAG,qBAAqB,CAAC,oBAAoB,CAAC,YAAY,CAAwB,CAAC;QAC1G,IAAI,iBAAiB,GAAG,mBAAmB,CAAC,SAAS,CAAC;QACtD,IAAI,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC;QAE5C,IACE,CAAC,YAAY,CAAC,QAAQ,KAAK,kBAAkB,CAAC,eAAe;eACxD,YAAY,CAAC,QAAQ,KAAK,kBAAkB,CAAC,OAAO;eAEtD,YAAY,IAAI,SAAS,EAC5B;YACA,IAAI,CAAC,IAAI,CAAC;gBACR,SAAS,WAAA;gBACT,aAAa,EAAE,mBAAmB,CAAC,aAAa;gBAChD,MAAM,QAAA;aACP,CAAC,CAAC;SACJ;QAED,IAAI,mBAAmB,GAAG,YAAY,CAAC,0BAA0B,CAAC;QAElE,IAAI,mBAAmB,EAAE;YACvB,eAAe,CACb,mBAAmB,EACnB,YAAY,EACZ,IAAI,EACJ,iBAAiB,CAAC,WAAW,IAAI,MAAM,CACxC,CAAC;SACH;KACF,CAAC,CAAC;IAEL,OAAO,IAAI,CAAC;CACb,CAAC;AAEF,IAAM,cAAc,GAAG,UAAU,MAAS,EAAE,MAAe;IACzD,IAAI,MAAM,YAAY,KAAK,EAAE;QAC3B,OAAO,KAAK,CAAC;KACd;IAED,IAAI,mBAAmB,CAAC,MAAM,CAAC,EAAE;QAC/B,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE;YAC1C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC1B;QAED,OAAO,CAAC,CAAC,MAAM,CAAC,wBAAwB,CAAC;KAC1C;IAED,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,MAAM,CAAC;CACf,CAAC;;;;;AA4BF;IAKE,0BAAY,gBAAsC;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAE5C,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;KACF;IAED,sBAAI,wCAAU;aAAd;YACE,OAAO,IAAI,CAAC,WAAW,CAAC;SACzB;;;OAAA;IAED,sCAAW,GAAX;QACE,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,EAAE;YAC1C,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;SAClC;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;KAC1B;IACH,uBAAC;CAAA,IAAA;;;;;;;AAQD,IAAM,gBAAgB,GAAG,UAAC,GAAQ,EAAE,OAA2B,EAAE,MAA0B;;IAEzF,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE;QACzC,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACzD;;IAGD,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,SAAS,KAAK,UAAU,EAAE;QAC9C,IAAI,KAAG,GAAgB,GAAG,CAAC;QAC3B,OAAO,IAAI,gBAAgB,CAAC,UAAA,GAAG,IAAI,OAAA,KAAG,CAAC,SAAS,CAAC;YAC/C,IAAI;gBACF,IAAI,GAAG,CAAC,UAAU,EAAE;oBAClB,GAAG,CAAC,WAAW,EAAE,CAAC;oBAClB,OAAO,CAAC,GAAG,CAAC,CAAC;iBACd;aACF;YACD,KAAK,YAAC,KAAK;gBACT,IAAI,GAAG,CAAC,UAAU,EAAE;oBAClB,GAAG,CAAC,WAAW,EAAE,CAAC;oBAClB,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;aACF;YACD,QAAQ;gBACN,IAAI,GAAG,CAAC,UAAU,EAAE;oBAClB,GAAG,CAAC,WAAW,EAAE,CAAC;oBAClB,OAAO,CAAC,GAAG,CAAC,CAAC;iBACd;aACF;SACF,CAAC,GAAA,CAAC,CAAC;KACL;;IAGD,IAAI;QACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;KACrB;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;KACtB;CACF,CAAC;;AC1TF;;;AAGA;IAAA;KAIC;IAHC,uCAAG,GAAH,UAAI,qBAA4C,EAAE,IAAU;QAC1D,OAAO,oBAAoB,CAAC,qBAAqB,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;KAC3E;IACH,gCAAC;CAAA,IAAA;AAED;;;AAGA;IAAA;KAIC;IAHC,iCAAG,GAAH,UAAI,qBAA4C,EAAE,IAAU;QAC1D,OAAO,kBAAkB,CAAC,qBAAqB,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;KACvE;IACH,0BAAC;CAAA,IAAA;AAED;;;AAGA;IAAA;KAIC;IAHC,oCAAG,GAAH,UAAI,qBAA4C,EAAE,IAAU;QAC1D,OAAO,oBAAoB,CAAC,qBAAqB,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC9E;IACH,6BAAC;CAAA,IAAA;AAED;;;AAGA;IAAA;KAIC;IAHC,8BAAG,GAAH,UAAI,qBAA4C,EAAE,IAAU;QAC1D,OAAO,kBAAkB,CAAC,qBAAqB,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC1E;IACH,uBAAC;CAAA;;AC7BD;;;AAGA;IAWE,sBAAY,SAAoB,EAAE,IAAY,EAAE,KAAc;QAF9D,UAAK,GAAgC,EAAE,CAAC;QAGtC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;IAED,+BAAQ,GAAR;QAAA,iBAEC;QADC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;KACnD;IACH,mBAAC;CAAA,IAAA;;;;AAKD;IASE,0BAAY,SAAoB;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG;YACX,uBAAuB;YACvB,yBAAyB;YACzB,aAAa;YACb,kBAAkB,CAAC,SAAS,8BAA6B;YACzD,mBAAmB;YACnB,kBAAkB,CAAC,SAAS,mCAAgC,WAAW,CAAC;;YAExE,sBAAsB;YACtB,gBAAgB;YAChB,kBAAkB,CAAC,SAAS,+BAA8B,WAAW,CAAC;YACtE,iBAAiB;YACjB,kBAAkB,CAAC,SAAS,iCAA+B,cAAc,CAAC;SAC3E,CAAC;KACH;;IAtBM,uBAAM,GAAb,cAAkB,OAAO,CAACC,oCAAS,CAAC,CAAC,EAAE;;;;IA2BvC,yCAAc,GAAd,UAAe,oBAAoC;QAAnD,iBAQC;QARc,qCAAA,EAAA,2BAAoC;QACjD,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACrB,IAAI,oBAAoB,IAAI,IAAI,KAAK,yBAAyB,EAAE;gBAC9D,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;aAC5C;SACF,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;KACjB;;IAGD,oCAAS,GAAT,UAAU,IAAY;;QAEpB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAC,CAAkB,CAAC,QAAQ,KAAK,IAAI,IAAK,CAAkB,CAAC,SAAS,KAAK,IAAI,GAAA,CAAiB,CAAC;KAC9H;;;;IAKD,kCAAO,GAAP,UAAQ,IAAY,EAAE,IAA6B;QACjD,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,KAAK,EAAE;YACT,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;;YAE5B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC7B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACtB;SACF;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,iCAA+B,IAAI,MAAG,CAAC,CAAC;SACzD;KACF;;;;IAKD,qCAAU,GAAV,UAAW,IAAY,EAAE,IAAkB;QACzC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,IAAI,EAAE;YACR,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;YAC3B,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;SAC9C;KACF;;;;;IAMD,sCAAW,GAAX,UAAY,IAAiB;QAAjB,qBAAA,EAAA,SAAiB;QAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACjB;KACF;;;;IAKD,gCAAK,GAAL;QACE,IAAI,CAAC,WAAW,6BAA4B,CAAC;QAC7C,IAAI,CAAC,WAAW,iCAA8B,CAAC;QAC/C,IAAI,CAAC,WAAW,6BAA4B,CAAC;QAC7C,IAAI,CAAC,WAAW,+BAA6B,CAAC;KAC/C;IACH,uBAAC;CAAA,IAAA;AAED;AACA,IAAM,kBAAkB,GAAG,UAAC,SAAoB,EAAE,IAAsB,EAAE,KAAc;IACtF,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;CACjD,CAAC;;ACpHF,IAAM,MAAM,GAAGC,oBAAoB,CAAC,YAAY,CAAC,CAAC;;;;AAKlD;IAA+BC,6BAAM;IAanC,mBAAY,SAAoB,EAAE,OAAgB,EAAE,gBAAkC,EAAE,MAAuB;QAA/G,YACE,kBAAM,SAAS,EAAE,OAAO,CAAC,SAG1B;QAFC,KAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;KACtB;;IAdM,gBAAM,GAAb,cAAkB,OAAO,CAACF,oCAAS,EAAEG,sBAAO,EAAE,gBAAgB,EAAEC,sCAAe,CAAC,CAAC,EAAE;;;;;IAoBnF,yBAAK,GAAL;QACE,iBAAM,KAAK,WAAE,CAAC;QACd,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SAClB;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;SACxB;KACF;;;;;;IAOD,2BAAO,GAAP,UAAQ,GAAW;QAAnB,iBAQC;QAPC,OAAO,IAAI;aACR,4BAA4B,CAAC,GAAG,CAAC;aACjC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAA,CAAC;aACxD,KAAK,CAAC,UAAA,KAAK;YACV,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACpB,uBAAuB,CAAC,KAAI,CAAC,CAAC;SAC/B,CAAC,CAAC;KACN;;;;;;;IAQD,oCAAgB,GAAhB,UAAiB,QAA0B,EAAE,IAAa;QAA1D,iBA4CC;;QA1CC,IAAM,SAAS,GAAa,QAAQ,CAAC;QACrC,iBAAM,gBAAgB,YAAC,SAAS,EAAE,IAAI,CAAC,CAAC;;;;;QAMxC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAM,WAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACjD,IAAI,iBAAiB,IAAI,WAAS,EAAE;;;;gBAIlC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;;;oBAGtB,IAAM,0BAAwB,GAAG,IAAI,CAAC,yBAAyB,CAAC;oBAChE,IAAI,CAAC,yBAAyB,GAAG,eAAY,CAAC;oBAC9C,OAAO,IAAI;yBACR,SAAS,CAAC,UAAA,MAAM;wBACf,OAAA,OAAO;6BACJ,OAAO,CAAC,WAAS,CAAC,eAAe,CAAC,MAAM,EAAE,KAAI,CAAC,CAAC;;;6BAGhD,IAAI,CAAC,cAAM,OAAA,MAAM,GAAA,CAAQ;qBAAA,CAC7B;yBACA,IAAI,CAAC;wBACJ,KAAI,CAAC,QAAQ,EAAE,CAAC;wBAChB,0BAAwB,EAAE,CAAC;qBAC5B,CAAC,CAAC;iBACN;aACF;iBAAM;gBACL,IAAI,CAAC,QAAQ,EAAE,CAAC;aACjB;SACF;;;aAGI;YACH,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;;;;;;IAOD,4BAAQ,GAAR,UAAS,OAA2B;QAClC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;QAGrB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC/F,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;;;;IAKD,8BAAU,GAAV;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;KAC3B;;IAGD,qCAAiB,GAAjB,UAAkB,WAAkC;QAApD,iBAMC;QALC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO;YACzB,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;YAC9B,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACjC,KAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B,CAAC,CAAC;KACJ;;IAGD,uCAAmB,GAAnB,UAAoB,gBAA4B;QAAhD,iBA6DC;QA7DmB,iCAAA,EAAA,oBAA4B;QAC9C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YAC5B,IAAI,KAAI,CAAC,YAAY,IAAI,CAAC,gBAAgB,EAAE;;gBAE1C,OAAO,KAAK,CAAC,CAAC;aACf;YAED,IAAI,WAAW,GAAG,KAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACtC,KAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YAEvB,IAAI,CAAC,WAAW,EAAE;;gBAEhB,OAAO,KAAK,CAAC,CAAC;aACf;YAED,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,IAAI,UAAU,GAAW,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;YACpE,IAAI,iBAAiB,GAAG,KAAI,CAAC,wBAAwB,CAAC;YAEtD,IAAI,CAAC,UAAU,IAAI,CAAC,iBAAiB,EAAE;gBACrC,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;aAC7B;iBAAM,IAAI,CAAC,UAAU,EAAE;gBACtB,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;aAC7B;iBAAM,IAAI,CAAC,iBAAiB,EAAE;gBAC7B,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;aACjC;iBAAM,IAAI,iBAAiB,GAAG,UAAU,EAAE;gBACzC,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;aACjC;iBAAM,IAAI,iBAAiB,GAAG,UAAU,EAAE;gBACzC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAC9B;YAAC,IAAI,CAAC,UAAU,EAAE;gBACjB,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACxB,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;aACxD;YACD,KAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC;YAE3C,WAAW,CAAC,mBAAmB,GAAG,KAAI,CAAC,kBAAkB,CAAC;YAE1D,IAAI,mBAAmB,GAAG,KAAI,CAAC,mBAAmB,CAAC;YAEnD,IAAI,CAAC,gBAAgB,EAAE;gBACrB,KAAI,CAAC,MAAM,CAAC,OAAO,kDAAyB,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;aAC9D;iBAAM,IAAI,gBAAgB,KAAK,mBAAmB,GAAG,CAAC,EAAE;gBACvD,MAAM,CAAC,KAAK,CAAI,gBAAgB,GAAG,CAAC,sGAAmG,CAAC,CAAC;gBACzI,uBAAuB,CAAC,KAAI,CAAC,CAAC;gBAC9B,OAAO,KAAI,CAAC,mBAAmB,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC;aACvD;iBAAM,IAAI,gBAAgB,GAAG,mBAAmB,EAAE;gBACjD,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;aACrE;YAED,IAAI,QAAQ,GAAG,KAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,CAAC;YAE3E,OAAO,QAAQ;iBACZ,GAAG,CAAC,WAAW,CAAC;iBAChB,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,aAAa,CAAC,WAAW,EAAE,MAAM,EAAE,gBAAgB,EAAE,KAAI,CAAC,GAAA,CAAC;iBAC1E,KAAK,CAAC,UAAA,KAAK;gBACV,OAAO,EAAE,MAAM,EAAE,KAAK,YAAY,KAAK,GAAG,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,EAAoB,CAAC;aACxF,CAAC;iBACD,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,kBAAkB,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,gBAAgB,EAAE,KAAI,CAAC,GAAA,CAAC,CAAC;SACtF,CAAC,CAAC;KACJ;;IAGD,kCAAc,GAAd,UAAe,QAAkB;QAC/B,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;SACjC;QAED,IAAI,QAAQ,CAAC,SAAS,EAAE;YACtB,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;YAEnC,OAAO,SAAS,EAAE;gBAChB,IAAI,SAAS,CAAC,SAAS,EAAE;oBACvB,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;oBAC/C,OAAO,SAAS,CAAC,SAAS,CAAC;iBAC5B;gBAED,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;aAC9B;SACF;QAED,OAAO,SAAS,CAAC;KAClB;IACH,gBAAC;CA5ND,CAA+B,MAAM,GA4NpC;AAED,IAAM,aAAa,GAAG,UACpB,WAAkC,EAClC,MAAsB,EACtB,gBAAwB,EACxB,MAAiB;IAEjB,IAAI,EAAE,MAAM,IAAI,WAAW,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,CAAC,EAAE;QAC5D,MAAM,GAAG,MAAM,IAAI,EAAoB,CAAC;QACxC,MAAM,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,sEAAoE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAY,CAAC,CAAC;KACnI;IAED,IAAI,WAAW,GAAmB,IAAI,CAAC;IACvC,IAAI,uBAAuB,GAAG,IAAI,CAAC;IACnC,IAAI,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;QACtC,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC1D;SAAM;QACL,WAAW,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACrB,IAAI,MAAM,CAAC,MAAM,YAAY,KAAK,EAAE;gBAClC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aACxC;YAED,uBAAuB,CAAC,MAAM,CAAC,CAAC;SACjC;KACF;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC;SAC5C,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,mBAAmB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAA,CAAC;SAC3D,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,IAAI,WAAW,IAAI,MAAM,GAAA,CAAC,CAAC;CAC9D,CAAC;AAEF,IAAM,kBAAkB,GAAG,UACzB,WAAkC,EAClC,MAAsB,EACtB,kBAA2B,EAC3B,MAAiB;IAEjB,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE5B,IAAI,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC;IACpC,IAAI,SAAS,GAAG,EAAE,WAAW,aAAA,EAAE,MAAM,QAAA,EAAE,CAAC;IACxC,IAAI,CAAC,kBAAkB,EAAE;QACvB,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,MAAM,CAAC,oBAAoB,GAAG,KAAK,CAAC;QACpC,MAAM,CAAC,wBAAwB,GAAG,KAAK,CAAC;QACxC,MAAM,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACjC,MAAM,CAAC,eAAe,GAAG,KAAK,CAAC;QAC/B,MAAM,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACnC,MAAM,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACnC,MAAM,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAChC,MAAM,CAAC,eAAe,GAAG,KAAK,CAAC;QAE/B,IAAI,SAAS,SAAQ,CAAC;QAEtB,IAAI,MAAM,CAAC,MAAM,YAAY,KAAK,EAAE;YAClC,SAAS,yCAAqB;SAC/B;aAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YAC5B,SAAS,+CAAwB;SAClC;aAAM;YACL,IAAI,WAAW,GAAG,WAAW,CAAC,WAAW,IAAI,GAAG,GAAG,WAAW,CAAC,WAAW,IAAI,EAAE,CAAC;YACjF,MAAM,CAAC,OAAO,CAAC,gBAAgB,GAAG,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC;YACrE,SAAS,6CAAuB;SACjC;QAED,eAAe,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC9C,eAAe,CAAC,OAAO,8CAAuB,SAAS,CAAC,CAAC;KAC1D;SAAM;QACL,eAAe,CAAC,OAAO,yDAA4B,SAAS,CAAC,CAAC;KAC/D;IAED,OAAO,MAAM,CAAC;CACf,CAAC;AAEF,IAAM,uBAAuB,GAAG,UAAC,MAAiB;IAChD,IAAI,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACvD,IAAI,gBAAgB,EAAE;QACpB,MAAM,CAAC,QAAQ,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KACtE;SAAM,IAAI,MAAM,CAAC,aAAa,EAAE;QAC/B,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KACzE;SAAM;QACL,MAAM,CAAC,KAAK,CAAC,wFAAwF,CAAC,CAAC;KACxG;CACF,CAAC;;ACzUF;;;AAGA,AAAA,WAAkB,cAAc;IAC9B,yCAAuB,CAAA;IACvB,uCAAqB,CAAA;IACrB,uCAAqB,CAAA;IACrB,qCAAmB,CAAA;CACpB,EALiBC,sBAAc,KAAdA,sBAAc,QAK/B;;ACRD;;;;AAIA,AACA,WAAkB,WAAW;IAC3B,0DAA2C,CAAA;IAC3C,gDAAiC,CAAA;IACjC,sDAAuC,CAAA;IACvC,sDAAuC,CAAA;IACvC,oDAAqC,CAAA;IACrC,iEAAkD,CAAA;CACnD,EAPiBC,mBAAW,KAAXA,mBAAW,QAO5B;;ACZD;;;AAGA,AACA,WAAkB,gBAAgB;;;;;IAKhC,2CAAuB,CAAA;;;;;;;;;IASvB,+CAA2B,CAAA;;;;;;;IAO3B,2CAAuB,CAAA;;;;IAIvB,6CAAyB,CAAA;CAC1B,EA1BiBC,wBAAgB,KAAhBA,wBAAgB,QA0BjC;;;;;;;;;;;;;;;;;;;;;;"}